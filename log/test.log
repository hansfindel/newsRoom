Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (24ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (14ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aae3751d44b612a400026a')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aae3751d44b612a400026b')})
MONGODB (1ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8965671fc614ad000002'), "name"=>"user1", "email"=>"user_admin1@example.com", "role"=>1, "password_salt"=>"$2a$10$7RkL9MqLLmsbJytPV.ANhu", "password_hash"=>"$2a$10$7RkL9MqLLmsbJytPV.ANhuqC.vGfGtPCQOMewmtkmxW8eEjrQVrmq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#new as HTML
MONGODB (18ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
  Rendered sessions/new.html.erb within layouts/application (3.5ms)
Completed 200 OK in 111ms (Views: 78.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8965671fc614ad000002')}).limit(-1)
MONGODB (27ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (80.2ms)
Completed 200 OK in 94ms (Views: 84.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab8965671fc614ad000001'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex"})
Redirected to http://www.example.com/
Completed 302 Found in 31ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8965671fc614ad000001')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8966671fc614ad000005'), "name"=>"user2", "email"=>"user_admin2@example.com", "role"=>1, "password_salt"=>"$2a$10$6vih27Uiw9w7tnkCMP2Kyu", "password_hash"=>"$2a$10$6vih27Uiw9w7tnkCMP2KyusUfFwzg9YFQsDxOqC9rDjsus5jMkflO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin2@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin2@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000005')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000005')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 12ms (Views: 4.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000005')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8966671fc614ad000007')})
  Rendered news_agencies/_form.html.erb (49.5ms)
Completed 200 OK in 96ms (Views: 89.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8966671fc614ad000009'), "name"=>"user3", "email"=>"user_admin3@example.com", "role"=>1, "password_salt"=>"$2a$10$FbKqfdkSZnl/Z.9boiLAUO", "password_hash"=>"$2a$10$FbKqfdkSZnl/Z.9boiLAUOrMjNbdMdemlTKdyj8USNRQEBReRvGWS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin3@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin3@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000009')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 4.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000009')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8966671fc614ad00000b')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 13ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:10 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 13:44:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8966671fc614ad000009')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8966671fc614ad00000d')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 15ms (Views: 7.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8967671fc614ad00000f'), "name"=>"user4", "email"=>"user_admin4@example.com", "role"=>1, "password_salt"=>"$2a$10$86WahSu1nvlCmos8kbUFUu", "password_hash"=>"$2a$10$86WahSu1nvlCmos8kbUFUu5e751aLUWlRlz3mx9VX8xQX.FmOYFVy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin4@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin4@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00000f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab8967671fc614ad00000e'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00000f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8967671fc614ad000011')})
  Rendered news_agencies/_form.html.erb (43.6ms)
Completed 200 OK in 53ms (Views: 45.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00000f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8967671fc614ad000013')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 15ms (Views: 6.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad00000e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8967671fc614ad000015'), "name"=>"user5", "email"=>"user_admin5@example.com", "role"=>1, "password_salt"=>"$2a$10$l6OCzkmo9soWZMy3sKYTFO", "password_hash"=>"$2a$10$l6OCzkmo9soWZMy3sKYTFOMdPzDKU8NehupxGCeITqO.TvS/3uua2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin5@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000015')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000015')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8967671fc614ad000017')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 13ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000015')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50ab8967671fc614ad000019')}])
Redirected to http://www.example.com/news_agencies/50ab8967671fc614ad000019
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab8967671fc614ad000019" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab8967671fc614ad000019"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000019')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000015')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000019')}).limit(-1)
Completed 200 OK in 25ms (Views: 18.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad000019')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8967671fc614ad00001b'), "name"=>"user6", "email"=>"user_admin6@example.com", "role"=>1, "password_salt"=>"$2a$10$PGBqdH/.mOHYg62TUBj1uO", "password_hash"=>"$2a$10$PGBqdH/.mOHYg62TUBj1uOzaZu37OKvGQC6pAQjbnw6dZ5t7fZ5fW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
Completed 200 OK in 41ms (Views: 40.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin6@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin6@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8967671fc614ad00001d')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 13ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad00001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8967671fc614ad00001f')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 16ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8967671fc614ad000021'), "name"=>"user7", "email"=>"user_admin7@example.com", "role"=>1, "password_salt"=>"$2a$10$pBeZsEqi8cC3krCgREf3au", "password_hash"=>"$2a$10$pBeZsEqi8cC3krCgREf3auSglD5XODicDmQeHBlO.x8NYJ50vXUpa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin7@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin7@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 16ms (Views: 7.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab8967671fc614ad000020'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (30ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (3.2ms)
Completed 200 OK in 75ms (Views: 36.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab8967671fc614ad000020" for 127.0.0.1 at 2012-11-20 10:45:11 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab8967671fc614ad000020"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 13:44:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000020')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8967671fc614ad000020')}).limit(-1)
Completed 200 OK in 52ms (Views: 44.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad000020')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8968671fc614ad000023'), "name"=>"user8", "email"=>"user_admin8@example.com", "role"=>1, "password_salt"=>"$2a$10$OzKal6OnupkqLhn4DOTWje", "password_hash"=>"$2a$10$OzKal6OnupkqLhn4DOTWjeMAbaRwPPESl7wlzrz.taxdRqoj90x26"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin8@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin8@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab8968671fc614ad000022'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 11ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab8968671fc614ad000022/edit" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50ab8968671fc614ad000022"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000022')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000022')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab8968671fc614ad000022')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 27ms (Views: 20.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000022')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8968671fc614ad000025'), "name"=>"user9", "email"=>"user_admin9@example.com", "role"=>1, "password_salt"=>"$2a$10$Luovo7J5pEhBqEe2pUFgz.", "password_hash"=>"$2a$10$Luovo7J5pEhBqEe2pUFgz.P8lSHZBexNHuFiKexNU3.e1D3U6vytG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab8968671fc614ad000024'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 11ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50ab8968671fc614ad000024" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50ab8968671fc614ad000024"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000024')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000024')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000024')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 48ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 9ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36b1d44b612a40000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36b1d44b612a40000ef')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36b1d44b612a40000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36b1d44b612a40000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36c1d44b612a40000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36c1d44b612a4000102')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36c1d44b612a4000108')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36c1d44b612a400010e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36c1d44b612a4000110')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aae36d1d44b612a4000112')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8965671fc614ad000002')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8966671fc614ad000005')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8966671fc614ad000009')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad00000f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad000015')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad00001b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8967671fc614ad000021')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000023')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000025')})


Started GET "/users" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8968671fc614ad000029'), "name"=>"user10", "email"=>"user1@example.com", "role"=>5, "password_salt"=>"$2a$10$LNUg5e/bP640.HA8cyCoFe", "password_hash"=>"$2a$10$LNUg5e/bP640.HA8cyCoFeQl9WYKDmBLmB0TYFI2XGcGIeGdQlX.2"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/users/50ab8968671fc614ad000029" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab8968671fc614ad000029"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000029')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000029')}).limit(-1)
Completed 200 OK in 10ms (Views: 2.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000029')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8968671fc614ad00002d'), "name"=>"user11", "email"=>"user2@example.com", "role"=>5, "password_salt"=>"$2a$10$c61aHWpkRdHlnq58AL88dO", "password_hash"=>"$2a$10$c61aHWpkRdHlnq58AL88dOmU0.JQyhV5S0ANfIXFhKWPJqSsWe70."}])


Started GET "/users/50ab8968671fc614ad00002d?method=delete" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50ab8968671fc614ad00002d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad00002d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad00002d')}).limit(-1)
Completed 200 OK in 9ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad00002d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8968671fc614ad000030'), "name"=>"user12", "email"=>"mi_random@mail.co", "role"=>15, "password_salt"=>"$2a$10$NE7Fkbrg07gx/xLmWbLcx.", "password_hash"=>"$2a$10$NE7Fkbrg07gx/xLmWbLcx.omUXBE9U5miwA1xXzPrea/c68BhklRC"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (14ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 34.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user12", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000030')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 11ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user13", "email"=>"user3@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 49ms (Views: 42.5ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user14", "email"=>"user4@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user14", "email"=>"user4@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50ab8968671fc614ad000046'), "password_salt"=>"$2a$10$.7wL8cMmbfp5AbSbCO1dqO", "password_hash"=>"$2a$10$.7wL8cMmbfp5AbSbCO1dqOfHu0aTuXEUTIOYYWi0jb/MV/IPQCntm"}])
Redirected to http://www.example.com/users/50ab8968671fc614ad000046
Completed 302 Found in 79ms (ActiveRecord: 0.0ms)


Started GET "/users/50ab8968671fc614ad000046" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab8968671fc614ad000046"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000046')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000046')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8968671fc614ad000046')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8968671fc614ad000046')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 11ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user15", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 50ms (Views: 43.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user16", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000058'), "name"=>"user17", "email"=>"user7@example.com", "role"=>5, "password_salt"=>"$2a$10$/a9gYWOFLOsEAk1MtwrJXu", "password_hash"=>"$2a$10$/a9gYWOFLOsEAk1MtwrJXuYfn5V0J0UZSSr3OIFAUIZZeESYijt3W"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 11ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50ab8969671fc614ad000058" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50ab8969671fc614ad000058"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8969671fc614ad000058')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy"})
Redirected to http://www.example.com/
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 11ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000058')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 52ms (Views: 44.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000065'), "headline"=>"un1q", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000065')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000065"}})
MONGODB (24ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000065')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000066'), "headline"=>"uniq", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000066')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000066"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000066')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000067'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000067')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000067"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000067')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000068'), "headline"=>"unique", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000068')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000068"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000068')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000068')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00006a'), "headline"=>"no_user_article1", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad00006a')}, {"$set"=>{"guid"=>"50ab8969671fc614ad00006a"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00006a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (11ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a400008b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a400008d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a400008f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a400009e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000a1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000a5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000a9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000ab')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aae3691d44b612a40000ae')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50ab8969671fc614ad00006c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00006d'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad00006c')}])
MONGODB (1ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50ab8969671fc614ad00006e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00006f'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad00006e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50ab8969671fc614ad000070')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000071'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad000070')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "headline"=>"asdfqwer", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000072'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad00006c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000073'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad00006e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000074'), "article_id"=>BSON::ObjectId('50ab8969671fc614ad00006b'), "category_id"=>BSON::ObjectId('50ab8969671fc614ad000070')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad00006b')}, {"$set"=>{"guid"=>"50ab8969671fc614ad00006b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00006b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000075'), "headline"=>"asdf", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000075')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000075"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000075')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000076'), "headline"=>"new_article_1", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000076')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000076"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000076')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000076')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000076')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000076')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000078'), "name"=>"user18", "email"=>"user8@example.com", "role"=>5, "password_salt"=>"$2a$10$T4Ns01vQl9FsmOcSdBjLDe", "password_hash"=>"$2a$10$T4Ns01vQl9FsmOcSdBjLDe7.8WjAhCpiISJtR/GIIv72.AeM81Lbi"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000079'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50ab8969671fc614ad000078'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000079')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000079"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000079')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000078')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00007a'), "headline"=>"un1que", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad00007a')}, {"$set"=>{"guid"=>"50ab8969671fc614ad00007a"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad00007a')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00007a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00007c'), "name"=>"user19", "email"=>"user9@example.com", "role"=>5, "password_salt"=>"$2a$10$IZv7VGEWAYVUutMd5AhNlu", "password_hash"=>"$2a$10$IZv7VGEWAYVUutMd5AhNluR6oJmOLAA3VFz7yuy7YeVxcSdE9q79e"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00007d'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50ab8969671fc614ad00007c'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad00007d')}, {"$set"=>{"guid"=>"50ab8969671fc614ad00007d"}})


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad00007f'), "name"=>"user20", "email"=>"user_admin10@example.com", "role"=>1, "password_salt"=>"$2a$10$FHqqfbVrbU4cXxZcltL9EO", "password_hash"=>"$2a$10$FHqqfbVrbU4cXxZcltL9EOhSg1r1yeN6.4jxY08EGtyn7pLQCMrtm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8969671fc614ad00007f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000080'), "headline"=>"Article 1", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000080')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000080"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000081'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000081')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000081"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (50.8ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 74ms (Views: 66.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000083'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab8969671fc614ad000083')}, {"$set"=>{"guid"=>"50ab8969671fc614ad000083"}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab8969671fc614ad000084'), "name"=>"user21", "email"=>"user_admin11@example.com", "role"=>1, "password_salt"=>"$2a$10$knDnaUPDXl7OwsfgJ4hTd.", "password_hash"=>"$2a$10$knDnaUPDXl7OwsfgJ4hTd.b4GwWvluKpa.hLIskUxwvKTQOevWYx."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:13 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:13 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab8969671fc614ad000084')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab896a671fc614ad000086'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab896a671fc614ad000086')}, {"$set"=>{"guid"=>"50ab896a671fc614ad000086"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896a671fc614ad000088'), "name"=>"user22", "email"=>"user_admin12@example.com", "role"=>1, "password_salt"=>"$2a$10$BTWwR247mErclVDSEtzsxe", "password_hash"=>"$2a$10$BTWwR247mErclVDSEtzsxeTgYa7JXYslTprIRJQRFt4HiGHlH9oEC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad000088')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 53ms (Views: 44.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50ab896a671fc614ad000089'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab896a671fc614ad000089')}, {"$set"=>{"guid"=>"50ab896a671fc614ad000089"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896a671fc614ad00008a'), "name"=>"user23", "email"=>"user_admin13@example.com", "role"=>1, "password_salt"=>"$2a$10$WQFS3IcUIvWaVtbmrc93tu", "password_hash"=>"$2a$10$WQFS3IcUIvWaVtbmrc93tuu/6wG.PkFbrBKtj.N.sRi1VF8hexif2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin13@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.8ms)
MONGODB (24ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad00008c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad00008c')})
Completed 200 OK in 48ms (Views: 40.0ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-20 00:00:00 UTC, "_id"=>BSON::ObjectId('50ab896a671fc614ad00008e'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab896a671fc614ad00008e')}, {"$set"=>{"guid"=>"50ab896a671fc614ad00008e"}})
Redirected to http://www.example.com/articles/50ab896a671fc614ad00008e
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/articles/50ab896a671fc614ad00008e" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50ab896a671fc614ad00008e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad00008e')})
Completed 200 OK in 13ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896a671fc614ad00008f'), "name"=>"user24", "email"=>"user_admin14@example.com", "role"=>1, "password_salt"=>"$2a$10$spcqId2.siTBks6w4IdSCO", "password_hash"=>"$2a$10$spcqId2.siTBks6w4IdSCOKjhxkmMZ3f8t70kz0X.Xupq7z9pX96C"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin14@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin14@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad000091')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad000091')})
Completed 200 OK in 20ms (Views: 11.8ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad00008f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad000093')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab896a671fc614ad000093')})
Completed 200 OK in 62ms (Views: 53.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896a671fc614ad000095'), "name"=>"user25", "email"=>"user_admin15@example.com", "role"=>1, "password_salt"=>"$2a$10$.gNmfMNL/kieNuzU./4brO", "password_hash"=>"$2a$10$.gNmfMNL/kieNuzU./4brOZKVheSC0ac4mm9K7sARAyCLqq8jmveG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896a671fc614ad000095')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad000098'), "name"=>"user26", "email"=>"user_admin16@example.com", "role"=>1, "password_salt"=>"$2a$10$Sd4BVb/3flpmq.0aCA.ra.", "password_hash"=>"$2a$10$Sd4BVb/3flpmq.0aCA.ra.7LWH38yMCyIgLbC8Ey2qnLVMSa1TN1e"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad000098')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad000098')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 107ms (Views: 98.2ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad000098')}).limit(-1)
  Rendered areas/_form.html.erb (2.9ms)
Completed 200 OK in 26ms (Views: 17.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad00009c'), "name"=>"user27", "email"=>"user_admin17@example.com", "role"=>1, "password_salt"=>"$2a$10$BET1cv9/0RWp4Iaz4zeTD.", "password_hash"=>"$2a$10$BET1cv9/0RWp4Iaz4zeTD.Gq0tSkYzisDQ69S3EOrOgT1I6fj2pkW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad00009c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad00009b'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad00009c')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad00009c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad00009b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad0000a2'), "name"=>"user28", "email"=>"user_admin18@example.com", "role"=>1, "password_salt"=>"$2a$10$EoYWbixE5Ea4.rqqT9Gkze", "password_hash"=>"$2a$10$EoYWbixE5Ea4.rqqT9Gkze.38uqEUcGPTggS.byX3XbNC2eDOT3bu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 55ms (Views: 46.4ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a2')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad0000a8'), "name"=>"user29", "email"=>"user_admin19@example.com", "role"=>1, "password_salt"=>"$2a$10$mBYb7e77179ke/8DGtcJRO", "password_hash"=>"$2a$10$mBYb7e77179ke/8DGtcJROvEprTEtJRYqUqD7RC8IIWF4OXrCeEG."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a8')}).limit(-1)
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 11ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50ab896b671fc614ad0000ac')}])
Redirected to http://www.example.com/areas/50ab896b671fc614ad0000ac
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas/50ab896b671fc614ad0000ac" for 127.0.0.1 at 2012-11-20 10:45:15 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab896b671fc614ad0000ac"}
MONGODB (16ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 13:44:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ac')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ac')}).limit(-1)
Completed 200 OK in 27ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad0000ae'), "name"=>"user30", "email"=>"user_admin20@example.com", "role"=>1, "password_salt"=>"$2a$10$h/PiTlK3ufbPWc7inp7xSe", "password_hash"=>"$2a$10$h/PiTlK3ufbPWc7inp7xSeIyjWEXqicVfExDSOWSxc08zoJjsRxku"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ae')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab896b671fc614ad0000ad'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ae')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab896b671fc614ad0000ad" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab896b671fc614ad0000ad"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ad')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ae')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ad')}).limit(-1)
Completed 200 OK in 9ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ad')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896c671fc614ad0000b0'), "name"=>"user31", "email"=>"user_admin21@example.com", "role"=>1, "password_salt"=>"$2a$10$jfcNrQytSIwxFagSa43hp.", "password_hash"=>"$2a$10$jfcNrQytSIwxFagSa43hp.Ap10DgFVRTx/Oqm5sX/j5TYLMRxkcNC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#new as HTML
MONGODB (23ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
Completed 200 OK in 30ms (Views: 4.8ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab896c671fc614ad0000af'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab896c671fc614ad0000af/edit" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50ab896c671fc614ad0000af"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000af')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000af')}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 13ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000af')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab896c671fc614ad0000b2'), "name"=>"user32", "email"=>"user_admin22@example.com", "role"=>1, "password_salt"=>"$2a$10$44C7ZkDPFFEhGNmMc8nfeu", "password_hash"=>"$2a$10$44C7ZkDPFFEhGNmMc8nfeuI0Zumlgmf/eeqttCV1/EDaD0ZH4Q9W2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin22@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin22@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab896c671fc614ad0000b1'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50ab896c671fc614ad0000b1" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50ab896c671fc614ad0000b1"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b1')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b1')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b1')})
Redirected to http://www.example.com/areas
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 10:45:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 13:44:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 11ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00007d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000080')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000081')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000083')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad000086')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad000089')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad00008e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b3')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b4')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b5')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b6')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab896c671fc614ad0000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b7')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b8')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab8970671fc614ad0000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab8970671fc614ad0000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"turbolinks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cache-digests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exploring-rubygems"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tagging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fnordmetric"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jruby-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"image-manipulation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bullet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ransack"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"miniprofiler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sidekiq"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-reputation-system"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exporting-csv-and-excel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"facebook-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"brakeman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-session-hijacking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"squeel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"securing-an-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rest-api-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-rails-api-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rubber-and-amazon-ec2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"wizard-forms-with-wicked"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"queue-classic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8975671fc614ad0000d2')}])
MONGODB (26ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrating-to-postgresql"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"datatables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"globalize3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"copycopter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"compass-css-sprites"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refinery-cms-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"better-sass-with-bourbon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"twitter-bootstrap-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeattr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passing-data-to-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rabl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jbuilder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"private-pub"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-urls-with-friendlyid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-html-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"oh-my-zsh"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"elasticsearch-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-identity"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-place-editing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-open-source"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-spree"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mercury-editor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"playing-with-pjax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-machines-with-vagrant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"soap-with-savon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"billing-with-stripe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"spork"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-admin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-with-sorcery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"foreman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pry-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"understanding-the-asset-pipeline"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-with-sunspot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mountable-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-time-web-requests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-i-test"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"remember-me-reset-password"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"geocoder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markdown-with-redcarpet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"resque"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-in-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"template-inheritance"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sass-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"coffeescript-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-streaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-1-overview"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"guard"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"client-side-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"trees-with-ancestry"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-javascript-with-jasmine"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"messaging-with-faye"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"decent-exposure"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"token-fields"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-specs-and-capybara"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n-backends"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"undo-with-paper-trail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-kaminari"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"carrierwave-file-uploads"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metrics-metrics-metrics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metawhere-metasearch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-from-scratch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"notifications-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-state"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"new-gem-with-bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gravatar"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beanstalkd-and-stalker"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-omniauth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-sort-paginate-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activerecord-relation-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongoid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-attr-accessible"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"engage-with-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000126')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"inherited-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polling-for-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-table-columns"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"controllers-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfkit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multistep-forms"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"a-b-testing-with-a-bingo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"calendars"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-dynamic-delegator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"validations-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customizing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"introducing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"erb-blocks-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"syntax-highlighting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-mailer-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"unobtrusive-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"xss-protection-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-beta-and-rvm"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mobile-devices"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple-individually"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"my-favorite-web-apps-in-2009"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongodb-and-mongomapper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tableless-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authorization-with-cancan"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mechanize"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-nokogiri"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"embedded-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"declarative-authorization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pickle-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gemcutter-jeweler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cropping-images"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"include-vs-joins"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"finding-unused-css"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seed-data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seven-security-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"searchlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-and-bookmarks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-scrapi"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"touch-and-cache"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"delayed-job"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-with-authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"feed-parsing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metric-fu"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cron-in-ruby"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"self-referential-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tree-based-navigation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"three-profiling-tools"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"factories-not-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rspec-matchers-macros"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"webrat"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beginning-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polymorphic-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfs-with-prawn"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-3-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-middleware"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-metal"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"app-templates-in-rails-2-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-lists"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-express-checkout"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"integrating-active-merchant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-merchant-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-security"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-2-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"memoization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jquery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paperclip"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"capistrano-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"helpers-outside-views"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"going-back"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"monitoring-with-god"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-daemon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"starling-and-workling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rake-in-background"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"populating-a-database"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beta-invitations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passenger-in-development"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"non-active-record-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thinking-sphinx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"session-based-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"liquid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"semi-static-pages"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"selenium"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"endless-page"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails-with-git"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"anonymous-scopes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gem-dependencies"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tracking-attribute-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-zones-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gitting-rails-2-1-rc1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exception-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"site-wide-announcements"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"auto-complete-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-out-helper-object"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"5-view-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-partials"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-profiling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"analyzing-the-production-log"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"git-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-activeresource"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeresource-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"make-resourceful"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-long-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fragment-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-select-menus"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-rss-feeds"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"logging-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"yaml-configuration-file"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cookie-based-session-store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-basic-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fixtures-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simplify-views-with-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generate-named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-pdf-documents"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"destroy-without-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"scope-out"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"adding-an-environment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-controllers-with-rspec"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markaby-in-helper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restful-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rake-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"stopping-spam-with-akismet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-helper-modules"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-name-in-url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hacking-activerecord"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-without-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"optimistic-locking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-to-make-a-generator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"create-model-through-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-logger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d5')}])
MONGODB (18ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cleaning-up-the-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-with-ruby-debug"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"handling-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"update-through-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"will-paginate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"reading-the-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"console-tricks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"two-many-to-many"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"catch-all-route"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rjs-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-with-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"with-options"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"conditional-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"blocks-in-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customize-field-error"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multibutton-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subversion-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rest-actions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-plugin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-in-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formatting-time"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-page-title"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"group-by-month"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-groups-of"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cross-site-scripting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hackers-love-mass-assignment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sql-injection"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-stack-trace"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"counter-cache-column"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"eager-loading"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"super-simple-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restricting-access"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"where-administration-goes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"looping-through-flash"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"habtm-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fun-with-find-conditions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"performing-calculations-on-models"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad0001ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-model-in-session"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000201')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000203')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"filtering-sensitive-logs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"layouts-and-content-for"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"all-about-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"shortcut-blocks-with-symbol-to-proc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000207')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"using-with-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"move-find-into-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad000209')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"find-through-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-find-by-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00020b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-with-instance-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab8976671fc614ad00020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505721"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00020f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00020d'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"John McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"John McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"John McAfee", "_id"=>BSON::ObjectId('50ab897b671fc614ad000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000211'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00020d'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"McAfee", "_id"=>BSON::ObjectId('50ab897b671fc614ad000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000213'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00020d'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"police"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"police"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"police", "_id"=>BSON::ObjectId('50ab897b671fc614ad000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000215'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00020d'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Murder Suspect McAfee Blogs While on the Run From Police", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/?p=1505721\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/?p=1505721\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/iMwC2F9YYf_ERZfKx5k5cZHPUTQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/iMwC2F9YYf_ERZfKx5k5cZHPUTQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/iMwC2F9YYf_ERZfKx5k5cZHPUTQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/iMwC2F9YYf_ERZfKx5k5cZHPUTQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/vD6ACy--fTg\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/vD6ACy--fTg/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505721", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00020d')}])
MONGODB (22ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505977"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000217'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000216'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50ab897b671fc614ad000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000219'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000216'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"htc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"htc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"htc", "_id"=>BSON::ObjectId('50ab897b671fc614ad00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00021b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000216'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"HTC’s Peter Chou: We Don’t Pay Apple $6-$8 per Android Phone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cpL08S4Ur8k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cpL08S4Ur8k/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505977", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00021d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00021c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Science"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Science"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Science", "_id"=>BSON::ObjectId('50ab897b671fc614ad00021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00021f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00021c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charger", "_id"=>BSON::ObjectId('50ab897b671fc614ad000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000221'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00021c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"wireless charging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"wireless charging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"wireless charging", "_id"=>BSON::ObjectId('50ab897b671fc614ad000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000223'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00021c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Friction May Someday Charge Your Cellphone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/hosSQiGVu44\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/hosSQiGVu44/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504677"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000225'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000224'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"e-textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"e-textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"e-textbooks", "_id"=>BSON::ObjectId('50ab897b671fc614ad000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000227'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000224'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"education"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"education"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"education", "_id"=>BSON::ObjectId('50ab897b671fc614ad000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000229'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000224'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"textbooks", "_id"=>BSON::ObjectId('50ab897b671fc614ad00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00022b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000224'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"New E-Textbooks Report Student Study Habits", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1E39Q2oobHc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1E39Q2oobHc/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504677", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505897"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00022d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00022c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Google Maps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Google Maps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Google Maps", "_id"=>BSON::ObjectId('50ab897b671fc614ad00022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00022f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00022c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"asia"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"asia"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"asia", "_id"=>BSON::ObjectId('50ab897b671fc614ad000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000231'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00022c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Google Maps Helps Man Walk 5,000 Miles Across Asia [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jRNYy92fxE0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jRNYy92fxE0/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505897", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505833"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000233'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000232'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Windows Phone 7.8"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Windows Phone 7.8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Windows Phone 7.8", "_id"=>BSON::ObjectId('50ab897b671fc614ad000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000235'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000232'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"windows phone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"windows phone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"windows phone", "_id"=>BSON::ObjectId('50ab897b671fc614ad000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000237'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000232'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Windows Phone 7 Handsets Will Be Updated Past 7.8 [REPORT]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/X-VavXrE0L4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/X-VavXrE0L4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505901"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000239'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000238'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cherokee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cherokee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cherokee", "_id"=>BSON::ObjectId('50ab897b671fc614ad00023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00023b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000238'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"gmail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"gmail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"gmail", "_id"=>BSON::ObjectId('50ab897b671fc614ad00023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00023d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000238'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Gmail Gets Support for Cherokee, Raises Language Count to 57", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Pn5bt4Vo8ek\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Pn5bt4Vo8ek/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505901", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000238')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505869"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00023f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00023e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Seqinetic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Seqinetic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Seqinetic", "_id"=>BSON::ObjectId('50ab897b671fc614ad000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000241'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00023e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"glasses"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"glasses"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"glasses", "_id"=>BSON::ObjectId('50ab897b671fc614ad000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000243'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00023e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sun"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sun"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sun", "_id"=>BSON::ObjectId('50ab897b671fc614ad000244')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000245'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00023e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000244')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Seqinetic ‘Sun’ Glasses Lets You Wear Daylight to Fight Winter Blues [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/0-jmnwG0f9Y\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/0-jmnwG0f9Y/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505869", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00023e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504489"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000247'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"android applications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"android applications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"android applications", "_id"=>BSON::ObjectId('50ab897b671fc614ad000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000249'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50ab897b671fc614ad00024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00024b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food apps", "_id"=>BSON::ObjectId('50ab897b671fc614ad00024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00024d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone apps", "_id"=>BSON::ObjectId('50ab897b671fc614ad00024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00024f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50ab897b671fc614ad000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000251'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000246'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"6 Tech Fixes for Your Thanksgiving", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5IjFJznntVo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5IjFJznntVo/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504489", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504453"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000253'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000252'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50ab897b671fc614ad000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000255'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000252'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50ab897b671fc614ad000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000257'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000252'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50ab897b671fc614ad000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000259'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000252'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Nintendo’s Wii U: First Impressions", "deck"=>"<br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"      <br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ea-21714_ko\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ea-21714_ko/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504453", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000252')}])
MONGODB (17ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505695"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00025b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00025a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50ab897b671fc614ad00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00025d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00025a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50ab897b671fc614ad00025e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00025f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00025a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00025e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iTunes Store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iTunes Store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iTunes Store", "_id"=>BSON::ObjectId('50ab897b671fc614ad000260')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000261'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00025a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000260')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"AC/DC Is Finally Available on iTunes", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/2y_Rhvchos4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/2y_Rhvchos4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505695", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505563"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000263'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000262'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50ab897b671fc614ad000264')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000265'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000262'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000264')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Watercooler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Watercooler", "_id"=>BSON::ObjectId('50ab897b671fc614ad000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000267'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000262'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"storycorps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"storycorps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"storycorps", "_id"=>BSON::ObjectId('50ab897b671fc614ad000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000269'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000262'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50ab897b671fc614ad00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00026b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000262'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Tells Heartbreaking Story of Grandfather’s Lost Building [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5BBnKcJneYs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5BBnKcJneYs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505563", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000262')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503817"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00026d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00026c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"CEOs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"CEOs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"CEOs", "_id"=>BSON::ObjectId('50ab897b671fc614ad00026e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00026f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00026c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00026e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charts", "_id"=>BSON::ObjectId('50ab897b671fc614ad000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000271'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00026c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"intel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"intel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"intel", "_id"=>BSON::ObjectId('50ab897b671fc614ad000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000273'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00026c'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"These 3 Charts Tell the Story of Intel’s Otellini Era", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jQNLI4qMgQk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jQNLI4qMgQk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503817", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00026c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505535"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000275'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000274'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50ab897b671fc614ad000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000277'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000274'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ufc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ufc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ufc", "_id"=>BSON::ObjectId('50ab897b671fc614ad000278')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000279'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000274'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000278')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"CBS Analyst Apologizes for ‘Homoerotic’ UFC Tweets", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qw0srOLkfR8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qw0srOLkfR8/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505535", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000274')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505281"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00027b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00027c'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"time-lapse"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"time-lapse"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"time-lapse", "_id"=>BSON::ObjectId('50ab897b671fc614ad00027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00027e'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027a'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Get Your Kicks With Time-Lapse of Route 66", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/rcp2wfBCCAE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/rcp2wfBCCAE/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505281", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00027a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504825"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000280'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027f'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"NBA"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"NBA"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"NBA", "_id"=>BSON::ObjectId('50ab897b671fc614ad000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000282'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027f'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000283'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00027f'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How an NBA Star’s YouTube Series Gives Fans Inside Access [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/6U33Ff5KPoY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/6U33Ff5KPoY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504825", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00027f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505131"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000285'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000284'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"U.S. government"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"U.S. government"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"U.S. government", "_id"=>BSON::ObjectId('50ab897b671fc614ad000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000287'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000284'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"online petitions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"online petitions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"online petitions", "_id"=>BSON::ObjectId('50ab897b671fc614ad000288')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000289'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000284'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000288')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the white house"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the white house"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the white house", "_id"=>BSON::ObjectId('50ab897b671fc614ad00028a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00028b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000284'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00028a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"we the people"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"we the people"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"we the people", "_id"=>BSON::ObjectId('50ab897b671fc614ad00028c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00028d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000284'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00028c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Non-Secession White House Petitions Surge", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uGiX27dIfZY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uGiX27dIfZY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505131", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505411"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00028f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00028e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Good"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Good"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Good", "_id"=>BSON::ObjectId('50ab897b671fc614ad000290')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000291'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00028e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000290')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"World"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"World", "_id"=>BSON::ObjectId('50ab897b671fc614ad000292')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000293'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00028e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000292')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"africa"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"africa"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"africa", "_id"=>BSON::ObjectId('50ab897b671fc614ad000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000295'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00028e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mit", "_id"=>BSON::ObjectId('50ab897b671fc614ad000296')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000297'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad00028e'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000296')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Self-Taught Teen Prodigy From Sierra Leone Wows MIT Engineers [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WRw_FlQD-JQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WRw_FlQD-JQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505411", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad00028e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503733"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000299'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000298'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Facebook"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Facebook", "_id"=>BSON::ObjectId('50ab897b671fc614ad00029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00029b'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000298'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Media"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Media", "_id"=>BSON::ObjectId('50ab897b671fc614ad00029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00029d'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000298'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"india"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"india"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"india", "_id"=>BSON::ObjectId('50ab897b671fc614ad00029e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00029f'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad000298'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00029e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mumbai Women Arrested for Political Facebook Comment", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7gj3dCs6frQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7gj3dCs6frQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503733", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad000298')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504219"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002a1'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"biking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"biking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"biking", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002a3'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"exercise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"exercise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"exercise", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002a5'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002a7'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iPhone-Syncing Bike Mount Makes Your Apps More Accessible", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/tW2JaIvb80A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/tW2JaIvb80A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504219", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505129"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002a9'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a8'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002aa'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a8'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mac osx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mac osx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mac osx", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ac'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002a8'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How Should Apple Name the Next Mac OS Series? [POLL]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WVVGLXSINNs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WVVGLXSINNs/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505129", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504081"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ae'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cybercrime Series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cybercrime Series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cybercrime Series", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002af')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002b0'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002af')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mobile", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002b2'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cybercrime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cybercrime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cybercrime", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002b4'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002b6'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002b8'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Are You Safe From Cybercrime?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ypOUOA5N9r4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ypOUOA5N9r4/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504081", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002ad')}])
MONGODB (16ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504073"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ba'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002b9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002bc'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002b9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002bd'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002b9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000292')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"middle east"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"middle east"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"middle east", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002bf'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002b9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"25 Must-Follow Twitter Accounts for Gaza-Israel Conflict Updates", "deck"=>"<br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>", "story"=>"      <br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/VzsZNAX-D2g\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/VzsZNAX-D2g/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504073", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504153"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002c1'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"music monday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"music monday"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"music monday", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002c3'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002c4'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c0'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Music Monday: Celebrating What We’re Thankful For", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/thanksgiving-music-monday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/thanksgiving-music-monday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/thanksgiving-music-monday/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-nicole-westbrook-640.png\" alt=\"Nicole Westbrook Thanksgiving\" title=\"thanksgiving-nicole-westbrook-640\" width=\"639\" height=\"400\" class=\"alignnone size-full wp-image-1504267\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/thanksgiving/\" target=\"_blank\">Thanksgiving </a> is only a few days away, which means your preparations are probably already well underway. Whether this means hours of grocery shopping or house cleaning, Thanksgiving isn't always the most relaxing holiday.</p>\n<p>But, if there's one thing we've learned from every television special out there, it's that Thanksgiving gives us the chance to reflect on the things we're grateful for. Through the hazy fog of tryptophan, we get a chance to enjoy a slice of pumpkin pie and enjoy the company of family and friends. Even if it's just for small portion of the year, this day gives us a chance to appreciate the people and things that are meaningful in life.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/09/thanksgiving-song-new-friday/\" target=\"_blank\">Watch Out Rebecca B</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/thanksgiving-music-monday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/music-monday/\">music monday</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/thanksgiving-music-monday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/thanksgiving-music-monday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/thanksgiving-music-monday/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-nicole-westbrook-640.png\" alt=\"Nicole Westbrook Thanksgiving\" title=\"thanksgiving-nicole-westbrook-640\" width=\"639\" height=\"400\" class=\"alignnone size-full wp-image-1504267\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/thanksgiving/\" target=\"_blank\">Thanksgiving </a> is only a few days away, which means your preparations are probably already well underway. Whether this means hours of grocery shopping or house cleaning, Thanksgiving isn't always the most relaxing holiday.</p>\n<p>But, if there's one thing we've learned from every television special out there, it's that Thanksgiving gives us the chance to reflect on the things we're grateful for. Through the hazy fog of tryptophan, we get a chance to enjoy a slice of pumpkin pie and enjoy the company of family and friends. Even if it's just for small portion of the year, this day gives us a chance to appreciate the people and things that are meaningful in life.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/09/thanksgiving-song-new-friday/\" target=\"_blank\">Watch Out Rebecca B</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/thanksgiving-music-monday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/music-monday/\">music monday</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/d20RQZ3nTn5n8ZFfoUqEyqIGVHc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/d20RQZ3nTn5n8ZFfoUqEyqIGVHc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/d20RQZ3nTn5n8ZFfoUqEyqIGVHc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/d20RQZ3nTn5n8ZFfoUqEyqIGVHc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LcjsxMM3OXU:ogkH4pnIOTQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LcjsxMM3OXU:ogkH4pnIOTQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LcjsxMM3OXU:ogkH4pnIOTQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LcjsxMM3OXU:ogkH4pnIOTQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LcjsxMM3OXU:ogkH4pnIOTQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LcjsxMM3OXU:ogkH4pnIOTQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/LcjsxMM3OXU\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/LcjsxMM3OXU/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504153", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504437"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002c6'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"animals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"animals"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"animals", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002c8'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cute animals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cute animals"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cute animals", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ca'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dogs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"dogs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"dogs", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002cc'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002c5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Killer Whale Plays With Dog [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/killer-whale-dog-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/killer-whale-dog-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/killer-whale-dog-video/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Whale-Dog.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A cute Labrador has a playful close encounter with a killer whale on Matheson Bay in the Auckland Region of New Zealand.</p>\n<p>More About: <a href=\"http://mashable.com/tag/animals/\">animals</a>, <a href=\"http://mashable.com/tag/cute-animals/\">cute animals</a>, <a href=\"http://mashable.com/tag/dogs/\">dogs</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/killer-whale-dog-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/killer-whale-dog-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/killer-whale-dog-video/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Whale-Dog.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A cute Labrador has a playful close encounter with a killer whale on Matheson Bay in the Auckland Region of New Zealand.</p>\n<p>More About: <a href=\"http://mashable.com/tag/animals/\">animals</a>, <a href=\"http://mashable.com/tag/cute-animals/\">cute animals</a>, <a href=\"http://mashable.com/tag/dogs/\">dogs</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/BJyJJisrGHD2-2rBQmcAK3ymld8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/BJyJJisrGHD2-2rBQmcAK3ymld8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/BJyJJisrGHD2-2rBQmcAK3ymld8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/BJyJJisrGHD2-2rBQmcAK3ymld8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uoHIajkIzcE:Dwvu-2fAmRQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uoHIajkIzcE:Dwvu-2fAmRQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uoHIajkIzcE:Dwvu-2fAmRQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uoHIajkIzcE:Dwvu-2fAmRQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uoHIajkIzcE:Dwvu-2fAmRQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uoHIajkIzcE:Dwvu-2fAmRQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uoHIajkIzcE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uoHIajkIzcE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504437", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504653"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ce'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002cf'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Microsoft Surface"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Microsoft Surface"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Microsoft Surface", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002d1'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002d2'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"celebrities"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"celebrities"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"celebrities", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002d4'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ipad"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ipad", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002d6'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"microsoft"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"microsoft"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"microsoft", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002d8'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"oprah"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"oprah"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"oprah", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002da'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surface"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"surface"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"surface", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002db')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002dc'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"So What if Oprah Used an iPad to Tweet About Microsoft Surface?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Oprah-Surface-Tweet.jpg\" alt=\"\" title=\"Oprah Surface Tweet\" width=\"640\" height=\"432\" class=\"aligncenter size-full wp-image-1504743\" /></a><br />\nOprah Winfrey recently gave Microsoft's Surface her <a href=\"http://mashable.com/2012/11/01/oprah-endorses-surface/\" target=\"_blank\">seal of approval</a> when the gadget made her annual \"Favorite Things\" list. <a href=\"http://mashable.com/follow/topics/oprah/\" target=\"_blank\">Oprah</a> has been using Twitter and hashtag #FavoriteThings to endorse the <a href=\"http://mashable.com/follow/topics/microsoft-surface/\" target=\"_blank\">Surface</a>. </p>\n<p>On Monday, however, criticism began bubbling up on <a href=\"http://thenextweb.com/shareables/2012/11/19/oprah-plugs-the-surface-on-twitter-uses-an-ipad-to-do-so/\" target=\"_blank\">blogs</a> and social sites because it appears Oprah is typing her tweets on Apple's <a href=\"http://mashable.com/follow/topics/ipad/\" target=\"_blank\">iPad</a> (see screenshot above). </p>\n<p>But, we have to ask, does that <em>really</em> matter? </p>\n<p>Technology users own more than one gadget -- often made from different companies -- and as my colleagues point out, people use an iPad differently than a Surface. And for <a href=\"http://mashable.com/follow/topics/oprah/\">Oprah</a>, that's no different. She <em>did</em> put the iPad on her \"<a href=\"http://www.oprah.com/packages/oprahs-ultimate-favorite-things.html\" target=\"_blank\">Ultimate Favorite Things</a>\" list in 2010, saying&#8230; <br /><a href=\"http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/microsoft-surface/\">Microsoft Surface</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/celebrities/\">celebrities</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/microsoft/\">microsoft</a>, <a href=\"http://mashable.com/tag/oprah/\">oprah</a>, <a href=\"http://mashable.com/tag/surface/\">surface</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Oprah-Surface-Tweet.jpg\" alt=\"\" title=\"Oprah Surface Tweet\" width=\"640\" height=\"432\" class=\"aligncenter size-full wp-image-1504743\" /></a><br />\nOprah Winfrey recently gave Microsoft's Surface her <a href=\"http://mashable.com/2012/11/01/oprah-endorses-surface/\" target=\"_blank\">seal of approval</a> when the gadget made her annual \"Favorite Things\" list. <a href=\"http://mashable.com/follow/topics/oprah/\" target=\"_blank\">Oprah</a> has been using Twitter and hashtag #FavoriteThings to endorse the <a href=\"http://mashable.com/follow/topics/microsoft-surface/\" target=\"_blank\">Surface</a>. </p>\n<p>On Monday, however, criticism began bubbling up on <a href=\"http://thenextweb.com/shareables/2012/11/19/oprah-plugs-the-surface-on-twitter-uses-an-ipad-to-do-so/\" target=\"_blank\">blogs</a> and social sites because it appears Oprah is typing her tweets on Apple's <a href=\"http://mashable.com/follow/topics/ipad/\" target=\"_blank\">iPad</a> (see screenshot above). </p>\n<p>But, we have to ask, does that <em>really</em> matter? </p>\n<p>Technology users own more than one gadget -- often made from different companies -- and as my colleagues point out, people use an iPad differently than a Surface. And for <a href=\"http://mashable.com/follow/topics/oprah/\">Oprah</a>, that's no different. She <em>did</em> put the iPad on her \"<a href=\"http://www.oprah.com/packages/oprahs-ultimate-favorite-things.html\" target=\"_blank\">Ultimate Favorite Things</a>\" list in 2010, saying&#8230; <br /><a href=\"http://mashable.com/2012/11/19/oprah-surface-tweets-ipad/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/microsoft-surface/\">Microsoft Surface</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/celebrities/\">celebrities</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/microsoft/\">microsoft</a>, <a href=\"http://mashable.com/tag/oprah/\">oprah</a>, <a href=\"http://mashable.com/tag/surface/\">surface</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/uXE172fOvBqFEVHklXzkuEMpcm8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/uXE172fOvBqFEVHklXzkuEMpcm8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/uXE172fOvBqFEVHklXzkuEMpcm8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/uXE172fOvBqFEVHklXzkuEMpcm8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LhcMCzzN0Ko:yzfam7dYyeo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LhcMCzzN0Ko:yzfam7dYyeo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LhcMCzzN0Ko:yzfam7dYyeo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LhcMCzzN0Ko:yzfam7dYyeo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=LhcMCzzN0Ko:yzfam7dYyeo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=LhcMCzzN0Ko:yzfam7dYyeo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/LhcMCzzN0Ko\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/LhcMCzzN0Ko/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504653", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504139"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002de'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"developing world"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"developing world"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"developing world", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002df')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e0'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002df')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"europe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"europe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"europe", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e2'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"opera"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"opera"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"opera", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e4'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"web browser"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"web browser"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"web browser", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e6'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Opera Web Browser Thrives in Europe’s Last Dictatorship", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/opera-web-browser-belarus/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/opera-web-browser-belarus/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/opera-web-browser-belarus/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Opera-Web-Browser-Phone.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Opera lives on in Belarus. Not musical drama, but the fifth most popular web browser. Why is the former Soviet republic a ruby of web browsing rarity?</p>\n<p>More About: <a href=\"http://mashable.com/tag/developing-world/\">developing world</a>, <a href=\"http://mashable.com/tag/europe/\">europe</a>, <a href=\"http://mashable.com/tag/opera/\">opera</a>, <a href=\"http://mashable.com/tag/web-browser/\">web browser</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/opera-web-browser-belarus/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/opera-web-browser-belarus/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/opera-web-browser-belarus/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Opera-Web-Browser-Phone.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Opera lives on in Belarus. Not musical drama, but the fifth most popular web browser. Why is the former Soviet republic a ruby of web browsing rarity?</p>\n<p>More About: <a href=\"http://mashable.com/tag/developing-world/\">developing world</a>, <a href=\"http://mashable.com/tag/europe/\">europe</a>, <a href=\"http://mashable.com/tag/opera/\">opera</a>, <a href=\"http://mashable.com/tag/web-browser/\">web browser</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/hwPVHxNdutSIsSyR3ED3BTBCU0o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/hwPVHxNdutSIsSyR3ED3BTBCU0o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/hwPVHxNdutSIsSyR3ED3BTBCU0o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/hwPVHxNdutSIsSyR3ED3BTBCU0o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ie0y0azDaX4:sKcbvJCFc0A:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ie0y0azDaX4:sKcbvJCFc0A:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ie0y0azDaX4:sKcbvJCFc0A:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ie0y0azDaX4:sKcbvJCFc0A:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ie0y0azDaX4:sKcbvJCFc0A:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ie0y0azDaX4:sKcbvJCFc0A:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ie0y0azDaX4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ie0y0azDaX4/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504139", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504339"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e8'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002e9'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ea'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"TV"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"TV"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"TV", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ec'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Trendrr"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Trendrr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Trendrr", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002ee'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"infographics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"infographics", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f0'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"social tv"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"social tv"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"social tv", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f2'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"social tv charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"social tv charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"social tv charts", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f4'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"20 TV Shows With the Most Social Buzz This Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/social-media-tv-chart-11-19/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/social-media-tv-chart-11-19/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/social-media-tv-chart-11-19/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/03/social-tv-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>It should come as no surprise to anyone who follows the social TV rankings that <a href=\"http://mashable.com/follow/topics/the-x-factor/\"><em>The X Factor</em></a> has once again topped the chart this week. </p>\n<p>FOX's singing competition spurred more than 4.5 million mentions on social networks, rising 15% from last week's total as season two nears its conclusion. Season three has already been confirmed, though next year's judge lineup has not been announced. Whether or not judges <a href=\"http://www.mashable.com/follow/topics/britney-spears/\">Britney Spears</a> and <a href=\"http://www.mashable.com/follow/topics/demi-lovato/\">Demi Levato</a> will return alongside <a href=\"http://mashable.com/follow/topics/simon-cowell/\">Simon Cowell</a> and L.A. Reid remains to be seen. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/major-league-gaming-numbers/\">Competitive Gaming Seeing TV-Levels of Viewership in 2012</a></strong></p>\n<p><em>The X Factor</em> season two premiere <a href=\"http://mashable.com/2012/09/13/x-factor-premiere-breaks-social-tv-record/\">broke records</a> to become the most talked about premiere for a series ever back&#8230; <br /><a href=\"http://mashable.com/2012/11/19/social-media-tv-chart-11-19/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/tv/\">TV</a>, <a href=\"http://mashable.com/tag/trendrr/\">Trendrr</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/social-tv/\">social tv</a>, <a href=\"http://mashable.com/tag/social-tv-charts/\">social tv charts</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/social-media-tv-chart-11-19/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/social-media-tv-chart-11-19/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/social-media-tv-chart-11-19/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/03/social-tv-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>It should come as no surprise to anyone who follows the social TV rankings that <a href=\"http://mashable.com/follow/topics/the-x-factor/\"><em>The X Factor</em></a> has once again topped the chart this week. </p>\n<p>FOX's singing competition spurred more than 4.5 million mentions on social networks, rising 15% from last week's total as season two nears its conclusion. Season three has already been confirmed, though next year's judge lineup has not been announced. Whether or not judges <a href=\"http://www.mashable.com/follow/topics/britney-spears/\">Britney Spears</a> and <a href=\"http://www.mashable.com/follow/topics/demi-lovato/\">Demi Levato</a> will return alongside <a href=\"http://mashable.com/follow/topics/simon-cowell/\">Simon Cowell</a> and L.A. Reid remains to be seen. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/major-league-gaming-numbers/\">Competitive Gaming Seeing TV-Levels of Viewership in 2012</a></strong></p>\n<p><em>The X Factor</em> season two premiere <a href=\"http://mashable.com/2012/09/13/x-factor-premiere-breaks-social-tv-record/\">broke records</a> to become the most talked about premiere for a series ever back&#8230; <br /><a href=\"http://mashable.com/2012/11/19/social-media-tv-chart-11-19/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/tv/\">TV</a>, <a href=\"http://mashable.com/tag/trendrr/\">Trendrr</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/social-tv/\">social tv</a>, <a href=\"http://mashable.com/tag/social-tv-charts/\">social tv charts</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9oBtnRD8IaRH5nV7SCQpa3WLOnQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9oBtnRD8IaRH5nV7SCQpa3WLOnQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9oBtnRD8IaRH5nV7SCQpa3WLOnQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9oBtnRD8IaRH5nV7SCQpa3WLOnQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4J7iTZod7Ok:V32pyOTY43c:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4J7iTZod7Ok:V32pyOTY43c:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4J7iTZod7Ok:V32pyOTY43c:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4J7iTZod7Ok:V32pyOTY43c:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4J7iTZod7Ok:V32pyOTY43c:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4J7iTZod7Ok:V32pyOTY43c:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/4J7iTZod7Ok\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/4J7iTZod7Ok/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504339", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504451"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f6'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f7'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002f8'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f5'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Handball Player Drops Shorts in Extreme Meltdown [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/handball-player-meltdown/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/handball-player-meltdown/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/handball-player-meltdown/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/HandballMeltdown.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Talk about taking the bait. A sarcastic kiss by a handball player sends his foe into a frenzied freak-out that includes...well, you gotta see for yourself. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/handball-player-meltdown/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/handball-player-meltdown/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/handball-player-meltdown/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/HandballMeltdown.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Talk about taking the bait. A sarcastic kiss by a handball player sends his foe into a frenzied freak-out that includes...well, you gotta see for yourself. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JKw9UCifLdactdY1q1HOO0Kdb1E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JKw9UCifLdactdY1q1HOO0Kdb1E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JKw9UCifLdactdY1q1HOO0Kdb1E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JKw9UCifLdactdY1q1HOO0Kdb1E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TxscFRqx-JE:YnKqgL4ZYmc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TxscFRqx-JE:YnKqgL4ZYmc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TxscFRqx-JE:YnKqgL4ZYmc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TxscFRqx-JE:YnKqgL4ZYmc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TxscFRqx-JE:YnKqgL4ZYmc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TxscFRqx-JE:YnKqgL4ZYmc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/TxscFRqx-JE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/TxscFRqx-JE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504451", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504847"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002fa'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002fb'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"stocks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"stocks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"stocks", "_id"=>BSON::ObjectId('50ab897b671fc614ad0002fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad0002fd'), "article_id"=>BSON::ObjectId('50ab897b671fc614ad0002f9'), "category_id"=>BSON::ObjectId('50ab897b671fc614ad0002fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Apple Stock Jumps More Than 7% After Falling to 6-Month Low", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-stock-jumps/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-stock-jumps/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-stock-jumps/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/10/Apple-iPad-Mini-Event-Logo.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Apple's stock may have finally hit its bottom, as the stock rebounded by more than 7% in trading Monday. </p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/stocks/\">stocks</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-stock-jumps/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-stock-jumps/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-stock-jumps/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/10/Apple-iPad-Mini-Event-Logo.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Apple's stock may have finally hit its bottom, as the stock rebounded by more than 7% in trading Monday. </p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/stocks/\">stocks</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/NV7cYLazxEKgz2LwnMvpPLcIsF4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/NV7cYLazxEKgz2LwnMvpPLcIsF4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/NV7cYLazxEKgz2LwnMvpPLcIsF4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/NV7cYLazxEKgz2LwnMvpPLcIsF4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=fCYFiG0Tpjs:fPK0OxePZT0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=fCYFiG0Tpjs:fPK0OxePZT0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=fCYFiG0Tpjs:fPK0OxePZT0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=fCYFiG0Tpjs:fPK0OxePZT0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=fCYFiG0Tpjs:fPK0OxePZT0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=fCYFiG0Tpjs:fPK0OxePZT0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/fCYFiG0Tpjs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/fCYFiG0Tpjs/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504847", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab897b671fc614ad0002f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8970671fc614ad0000ba')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab8970671fc614ad0000bb')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab897b671fc614ad000302'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (43ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000302')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50ab897b671fc614ad000305')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000305')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000307'), "name"=>"user33", "email"=>"user10@example.com", "role"=>5, "password_salt"=>"$2a$10$nTmJbvRUziUQR7kZ7D3PG.", "password_hash"=>"$2a$10$nTmJbvRUziUQR7kZ7D3PG.bHZnxXBiliaAu9bAudRSPADz2n1vvWa"}])
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000308'), "name"=>"user34", "email"=>"user_admin23@example.com", "role"=>1, "password_salt"=>"$2a$10$3YWKiWnoMCEmaVQs93wicu", "password_hash"=>"$2a$10$3YWKiWnoMCEmaVQs93wicuFUUa.LrdZ/yvWhU1r9m9Vb8Xyu5G1W2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:31 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:31 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:31 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin23@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin23@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:31 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897b671fc614ad000308')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 16ms (Views: 6.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad000309'), "name"=>"user35", "email"=>"user11@example.com", "role"=>5, "password_salt"=>"$2a$10$/ix.ybXdEfuYuwKkyFsPlu", "password_hash"=>"$2a$10$/ix.ybXdEfuYuwKkyFsPlu69xyJj6qqNV4hBIOz0pGKZVxvBIwgp2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:31 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:31 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897b671fc614ad00030a'), "name"=>"user36", "email"=>"user12@example.com", "role"=>5, "password_salt"=>"$2a$10$RBDBqG83ZorbuKde/JYF6u", "password_hash"=>"$2a$10$RBDBqG83ZorbuKde/JYF6uRKTiBDN4FbWSD4ZWPL1gyYxwf5SmItW"}])


Started GET "/" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad00030c'), "name"=>"user37", "email"=>"user13@example.com", "role"=>5, "password_salt"=>"$2a$10$Jr/nkQul.knjbuoAb9mtyO", "password_hash"=>"$2a$10$Jr/nkQul.knjbuoAb9mtyOTo97kvT4Du5oxic0i2gUupIXchA78PW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user13@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user13@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad00030d'), "name"=>"user38", "email"=>"user14@example.com", "role"=>5, "password_salt"=>"$2a$10$Sgm3vKDiljLhW0kQKGDyVO", "password_hash"=>"$2a$10$Sgm3vKDiljLhW0kQKGDyVOfYss.pWEEiqU3e..2f83cYmsPSuXO1S"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user14@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user14@example.com"}).limit(-1)
Completed 200 OK in 72ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad00030e'), "name"=>"user39", "email"=>"user15@example.com", "role"=>5, "password_salt"=>"$2a$10$Q0YcAX9YJQHqO9zU/ou8.u", "password_hash"=>"$2a$10$Q0YcAX9YJQHqO9zU/ou8.uyIKlgOQQwhga65xYW/vJPTHD77AIy8S"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897c671fc614ad00030e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad00030f'), "name"=>"user40", "email"=>"user16@example.com", "role"=>5, "password_salt"=>"$2a$10$FsTdpzDE1eZbA1xoOZ0nj.", "password_hash"=>"$2a$10$FsTdpzDE1eZbA1xoOZ0nj.cvAYSxJwkvIrGkiL8eCICl01UDxXuYO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897c671fc614ad00030f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 4.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad000310'), "name"=>"user41", "email"=>"user17@example.com", "role"=>5, "password_salt"=>"$2a$10$quDG3kKIIoQxMVs5BEv3de", "password_hash"=>"$2a$10$quDG3kKIIoQxMVs5BEv3degQp.m9V/QwWgz/3cgMCWO0mOUQiV28i"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad000311'), "name"=>"user42", "email"=>"user18@example.com", "role"=>5, "password_salt"=>"$2a$10$rXiz7nfXir7tGdgXNgyVC.", "password_hash"=>"$2a$10$rXiz7nfXir7tGdgXNgyVC.HrgK5UOhICrWMr5VDVjJHevb0Fkdim."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#new as HTML
MONGODB (60ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
Completed 200 OK in 65ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:32 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897c671fc614ad000311')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897c671fc614ad000312'), "name"=>"user43", "email"=>"user19@example.com", "role"=>5, "password_salt"=>"$2a$10$mmNFfP3V3g004.WG7iZFJe", "password_hash"=>"$2a$10$mmNFfP3V3g004.WG7iZFJeMKozwKP2wsahCZvDolhHXZl5xkyOBhm"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000314'), "name"=>"user44", "email"=>"user20@example.com", "role"=>5, "password_salt"=>"$2a$10$B7zdU1xIbbCTspb96XD1pO", "password_hash"=>"$2a$10$B7zdU1xIbbCTspb96XD1pObUOu.7hdFlrVJ6fTVou5iJE7MM.mFqa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 78ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897d671fc614ad000314')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (41ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 54ms (Views: 45.5ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000319'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000319')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00031d'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00031e'), "name"=>"user45", "email"=>"user21@example.com", "role"=>5, "password_salt"=>"$2a$10$TITcA/T2YjtPnx1dGrVUIe", "password_hash"=>"$2a$10$TITcA/T2YjtPnx1dGrVUIeyjFQy34A.EZjG7.KodsA2oOAhIGkiY."}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00031f'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000320'), "user_id"=>BSON::ObjectId('50ab897d671fc614ad00031e'), "category_id"=>BSON::ObjectId('50ab897d671fc614ad00031f')}])
MONGODB (16ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000321'), "name"=>"user46", "email"=>"user22@example.com", "role"=>5, "password_salt"=>"$2a$10$MOBHQAuGoxrozviX0AZfF.", "password_hash"=>"$2a$10$MOBHQAuGoxrozviX0AZfF.TP7bNln1qJuNqNKHr7nu6bqBNttLTNi"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000322'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50ab897d671fc614ad000321"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50ab897d671fc614ad000321"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50ab897d671fc614ad000321", "_id"=>BSON::ObjectId('50ab897d671fc614ad000323')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000324'), "user_id"=>BSON::ObjectId('50ab897d671fc614ad000321'), "category_id"=>BSON::ObjectId('50ab897d671fc614ad000323')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000325'), "name"=>"user47", "email"=>"user23@example.com", "role"=>5, "password_salt"=>"$2a$10$VmznGkhj5Vv3D4mYSVwQLe", "password_hash"=>"$2a$10$VmznGkhj5Vv3D4mYSVwQLenTNk1Cxcg2dG35hCnwqRIScFETxSOuO"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000326'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000328'), "user_id"=>BSON::ObjectId('50ab897d671fc614ad000327'), "category_id"=>BSON::ObjectId('50ab897d671fc614ad000326')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000329'), "name"=>"user49", "email"=>"user25@example.com", "role"=>5, "password_salt"=>"$2a$10$F/qyQ3DlRhePyh8EZEXQk.", "password_hash"=>"$2a$10$F/qyQ3DlRhePyh8EZEXQk.LDvo9XHCEqfDO6lVBm7KbrbtxbTNzSO"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00032a'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00032b'), "name"=>"user50", "email"=>"user26@example.com", "role"=>5, "password_salt"=>"$2a$10$ThPK9oyDT3NTS/XhrmQSGe", "password_hash"=>"$2a$10$ThPK9oyDT3NTS/XhrmQSGe37itrtUNz.k9bLocCQL4lePLz48.Uyy"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00032c'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50ab897d671fc614ad00032b"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50ab897d671fc614ad00032b"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50ab897d671fc614ad00032b", "_id"=>BSON::ObjectId('50ab897d671fc614ad00032d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00032e'), "name"=>"user51", "email"=>"user27@example.com", "role"=>5, "password_salt"=>"$2a$10$m88KwFW2BNU4bdKSp.c7r.", "password_hash"=>"$2a$10$m88KwFW2BNU4bdKSp.c7r.Visg1n2xQ5Q2UxV/bOW6FLAmFyd2P/q"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00032f'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00007c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00007f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000084')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad000088')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad00008a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad00008f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896a671fc614ad000095')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad000098')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad00009c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad0000a8')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896b671fc614ad0000ae')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b0')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab896c671fc614ad0000b2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000307')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000308')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000309')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00030a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad00030c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad00030d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad00030e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad00030f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad000310')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad000311')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897c671fc614ad000312')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000314')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00031e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000321')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000325')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000329')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000334'), "name"=>"user52", "email"=>"user28@example.com", "role"=>5, "password_salt"=>"$2a$10$MLpI9myQ/NwBjqAKQ1Q9ku", "password_hash"=>"$2a$10$MLpI9myQ/NwBjqAKQ1Q9kud0n5VBByNXjLHhdDAXnmhJeKc5XUBrW"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000335'), "name"=>"user53", "email"=>"asf.as@fac.cs", "role"=>1, "password_salt"=>"$2a$10$k5kpJIMSftibpxCiGPAnEe", "password_hash"=>"$2a$10$k5kpJIMSftibpxCiGPAnEeNhPrWGulQoMxxhmi/nIse37KIFtzNSe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000334')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000335')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad000339'), "name"=>"user54", "email"=>"user29@example.com", "role"=>5, "password_salt"=>"$2a$10$gneQF7v0WjMwP7znhKcU.u", "password_hash"=>"$2a$10$gneQF7v0WjMwP7znhKcU.uR8hH/dhjPvnvSEisZ5wkvTCCV04s8Qa"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 10:45:33 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 13:44:33 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab897d671fc614ad00033a'), "name"=>"user55", "email"=>"user_admin25@example.com", "role"=>1, "password_salt"=>"$2a$10$/kBTfZSzrQl/rnmM86gfmO", "password_hash"=>"$2a$10$/kBTfZSzrQl/rnmM86gfmObPL8H1sRAKI3p.T4hUo7dqLLgauz7iO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin25@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin25@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897d671fc614ad00033a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 4.8ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897d671fc614ad00033a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab897d671fc614ad00033a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 4.6ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 10:45:34 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 13:44:34 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (19ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aae3671d44b612a4000059')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00033e'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00033e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000340')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000340')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000341'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000341')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000343'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000343')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000344'), "slave"=>"Esclavo2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002a6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002ab')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002b1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002b3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002b5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002b7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002bb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002be')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002c7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002d3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002d5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000264')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000266')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000268')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00026a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00026e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000270')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000272')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000276')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000278')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00027d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000281')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000290')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000292')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000294')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000296')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00029a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00029e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002a2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002a4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00006c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad00006e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab8969671fc614ad000070')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00020e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000210')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000214')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000218')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00021e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000220')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000222')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000226')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000228')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00022a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00022e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000230')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000234')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000236')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00023a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00023c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000240')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000242')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000244')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000248')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00024a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00024c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00024e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000250')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000254')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000256')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000258')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00025c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00025e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000260')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000286')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000288')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00028a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00028c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00029c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002af')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002c2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002c9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002d0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002d7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002d9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002db')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002df')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002e1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002e3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002e5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002eb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002ed')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002ef')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002f1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002f3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00031f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000322')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000323')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000326')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00032f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000345'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000345')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000347'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000347')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00034a'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00034c'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad00034c')}, {"$set"=>{"guid"=>"50ab897e671fc614ad00034c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00034d'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00034e'), "article_id"=>BSON::ObjectId('50ab897e671fc614ad00034c'), "category_id"=>BSON::ObjectId('50ab897e671fc614ad00034d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00034f'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad00034f')}, {"$set"=>{"guid"=>"50ab897e671fc614ad00034f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000350'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50ab897e671fc614ad00034f"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50ab897e671fc614ad00034f"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50ab897e671fc614ad00034f", "_id"=>BSON::ObjectId('50ab897e671fc614ad000351')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000352'), "article_id"=>BSON::ObjectId('50ab897e671fc614ad00034f'), "category_id"=>BSON::ObjectId('50ab897e671fc614ad000351')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000353'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad000353')}, {"$set"=>{"guid"=>"50ab897e671fc614ad000353"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000354'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000356'), "article_id"=>BSON::ObjectId('50ab897e671fc614ad000355'), "category_id"=>BSON::ObjectId('50ab897e671fc614ad000354')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000357'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad000357')}, {"$set"=>{"guid"=>"50ab897e671fc614ad000357"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000358'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad000359'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad000359')}, {"$set"=>{"guid"=>"50ab897e671fc614ad000359"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00035a'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50ab897e671fc614ad000359"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50ab897e671fc614ad000359"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50ab897e671fc614ad000359", "_id"=>BSON::ObjectId('50ab897e671fc614ad00035b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00035c'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab897e671fc614ad00035c')}, {"$set"=>{"guid"=>"50ab897e671fc614ad00035c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab897e671fc614ad00035d'), "name"=>"category12"}])
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000344')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d7000003'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d7000003')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d7000004')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d7000004')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d7000005'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d7000005')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d7000007'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d7000007')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d7000009'), "slave"=>"Esclavo2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00031d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d700000b'), "name"=>"user1", "email"=>"user_admin1@example.com", "role"=>1, "password_salt"=>"$2a$10$pKea0dWOT9QYmwrC5bFrje", "password_hash"=>"$2a$10$pKea0dWOT9QYmwrC5bFrjegV85OERGWE6namIEJq20yAo6FBj4xO2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
  Rendered sessions/new.html.erb within layouts/application (3.0ms)
Completed 200 OK in 68ms (Views: 65.7ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000b')}).limit(-1)
MONGODB [DEBUG] Cursor#close 6359186406405149454
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (46.3ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (86.1ms)
Completed 200 OK in 100ms (Views: 89.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96ed671fc614d700000a'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
  Rendered areas/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 15ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50ab96ed671fc614d700000a" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50ab96ed671fc614d700000a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d700000a')})
Redirected to http://www.example.com/areas
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ed671fc614d700000b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
  Rendered areas/index.html.erb within layouts/application (0.7ms)
Completed 200 OK in 11ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ee671fc614d700000d'), "name"=>"user2", "email"=>"user_admin2@example.com", "role"=>1, "password_salt"=>"$2a$10$T7UcijQDtZv7HaXs349leu", "password_hash"=>"$2a$10$T7UcijQDtZv7HaXs349leuHkZxy4gz7lBOgim6IoM680oeDypoS/S"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin2@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin2@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000d')}).limit(-1)
MONGODB [DEBUG] Cursor#close 8565143130742297654
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 55ms (Views: 46.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96ee671fc614d700000c'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab96ee671fc614d700000c/edit" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50ab96ee671fc614d700000c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000c')}).limit(-1)
  Rendered areas/_form.html.erb (2.1ms)
Completed 200 OK in 13ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96ee671fc614d700000c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ee671fc614d700000f'), "name"=>"user3", "email"=>"user_admin3@example.com", "role"=>1, "password_salt"=>"$2a$10$LRc52B7gFRfVZcFThlADje", "password_hash"=>"$2a$10$LRc52B7gFRfVZcFThlADjeJn/Tc6rPbYZI8X4PzuArBIUwEKh8Hb."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin3@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin3@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000f')}).limit(-1)
MONGODB [DEBUG] Cursor#close 4989435672588031271
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96ee671fc614d700000e'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab96ee671fc614d700000e" for 127.0.0.1 at 2012-11-20 11:42:54 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab96ee671fc614d700000e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:41:54 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d700000e')}).limit(-1)
Completed 200 OK in 11ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96ee671fc614d700000e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ee671fc614d7000011'), "name"=>"user4", "email"=>"user_admin4@example.com", "role"=>1, "password_salt"=>"$2a$10$MT9dYnZvwetLTi8tcToQE.", "password_hash"=>"$2a$10$MT9dYnZvwetLTi8tcToQE.2xiNF/8gS1TMtBUUug4ViYqxrFHiXnO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin4@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin4@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d7000011')}).limit(-1)
MONGODB [DEBUG] Cursor#close 1023019360253744664
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 56ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d7000011')}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 13ms (Views: 4.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d7000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50ab96ef671fc614d7000015')}])
Redirected to http://www.example.com/areas/50ab96ef671fc614d7000015
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/areas/50ab96ef671fc614d7000015" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab96ef671fc614d7000015"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000015')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ee671fc614d7000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000015')}).limit(-1)
Completed 200 OK in 9ms (Views: 2.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d7000015')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ef671fc614d7000017'), "name"=>"user5", "email"=>"user_admin5@example.com", "role"=>1, "password_salt"=>"$2a$10$tqInFhdmHkG9EPaTIN3j0u", "password_hash"=>"$2a$10$tqInFhdmHkG9EPaTIN3j0uwOGi/yoWMdJZ59fgMw0GShzlGIsOIi2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin5@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000017')}).limit(-1)
MONGODB [DEBUG] Cursor#close 4602867218420963054
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96ef671fc614d7000016'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000017')}).limit(-1)
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 11ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000017')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 51ms (Views: 43.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d7000016')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ef671fc614d700001d'), "name"=>"user6", "email"=>"user_admin6@example.com", "role"=>1, "password_salt"=>"$2a$10$o.rzvPJu7mfwFIrj33AfQ.", "password_hash"=>"$2a$10$o.rzvPJu7mfwFIrj33AfQ.WD3nl7ocyHC9n6VGiaqzRUsG1FW9aKq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin6@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin6@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d700001d')}).limit(-1)
MONGODB [DEBUG] Cursor#close 5345037313766692832
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d700001d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d700001d')}).limit(-1)
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 11ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ef671fc614d7000021'), "name"=>"user7", "email"=>"user_admin7@example.com", "role"=>1, "password_salt"=>"$2a$10$8m6.1DdtKODJWmaeFfOU6e", "password_hash"=>"$2a$10$8m6.1DdtKODJWmaeFfOU6elMMPViq1PqOQ4dB.i72NXN.sXWJb8p6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin7@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin7@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000021')}).limit(-1)
MONGODB [DEBUG] Cursor#close 9116876545141872805
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000021')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 11ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 51ms (Views: 4.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96ef671fc614d7000027'), "name"=>"user8", "email"=>"user_admin8@example.com", "role"=>1, "password_salt"=>"$2a$10$.R.6MwXpwITtr63heSanAu", "password_hash"=>"$2a$10$.R.6MwXpwITtr63heSanAudJEgyY.LtWuPUUjVNYmIuGf5iVlBkZG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:42:55 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin8@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:41:55 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin8@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96ef671fc614d7000027')}).limit(-1)
MONGODB [DEBUG] Cursor#close 1764070882906839443
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad000339')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab897d671fc614ad00033a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d700000b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ee671fc614d700000d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ee671fc614d700000f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ee671fc614d7000011')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d7000017')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d700001d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d7000021')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96ef671fc614d7000027')})


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 15ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user9", "email"=>"user1@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 15ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 11ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user10", "email"=>"user2@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user10", "email"=>"user2@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50ab96f0671fc614d700003a'), "password_salt"=>"$2a$10$xeUi.ECVpKRlMdVF0PAMzO", "password_hash"=>"$2a$10$xeUi.ECVpKRlMdVF0PAMzOLj8whzUbPUFGtfmRZK9Ejb/ul2fwBQC"}])
Redirected to http://www.example.com/users/50ab96f0671fc614d700003a
Completed 302 Found in 79ms (ActiveRecord: 0.0ms)


Started GET "/users/50ab96f0671fc614d700003a" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab96f0671fc614d700003a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d700003a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d700003a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d700003a')}).limit(-1)
Completed 200 OK in 10ms (Views: 2.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d700003a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d700003c'), "name"=>"user11", "email"=>"mi_random@mail.co", "role"=>15, "password_salt"=>"$2a$10$Q8CRgdgdbwxe4x1WX6wcGe", "password_hash"=>"$2a$10$Q8CRgdgdbwxe4x1WX6wcGeMJVRK0suasOvXtCS79ufzH0BpnJhTVm"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 51ms (Views: 44.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user11", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d700003c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d7000044'), "name"=>"user12", "email"=>"user3@example.com", "role"=>5, "password_salt"=>"$2a$10$HGH1tb2uAGJewqyP58Ak3.", "password_hash"=>"$2a$10$HGH1tb2uAGJewqyP58Ak3.zSA8b0ILFBOPPBZsMlYtTYHV1kvMUem"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 11ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50ab96f0671fc614d7000044" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50ab96f0671fc614d7000044"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d7000044')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy"})
Redirected to http://www.example.com/
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB [DEBUG] Cursor#close 5921278447212403578
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 16ms (Views: 7.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d7000044')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d7000050'), "name"=>"user13", "email"=>"user4@example.com", "role"=>5, "password_salt"=>"$2a$10$11ZYg4gv5Dj8JQcG7.FCIu", "password_hash"=>"$2a$10$11ZYg4gv5Dj8JQcG7.FCIu4QXR7psWYbZIHVfZ4n2aFXwOBrs/ePW"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 11ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started GET "/users/50ab96f0671fc614d7000050" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab96f0671fc614d7000050"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d7000050')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d7000050')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d7000050')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d7000054'), "name"=>"user14", "email"=>"user5@example.com", "role"=>5, "password_salt"=>"$2a$10$LbNp7vDXWCcyLQukCRIGZ.", "password_hash"=>"$2a$10$LbNp7vDXWCcyLQukCRIGZ.TrSV356Gt9ea.S9pOTcxoJgo0YqVRe."}])


Started GET "/users/50ab96f0671fc614d7000054?method=delete" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50ab96f0671fc614d7000054"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d7000054')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f0671fc614d7000054')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d7000054')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user15", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 52ms (Views: 44.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:42:56 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user16", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:41:56 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00034a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00034d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000350')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000351')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000354')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000358')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00035a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00035b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00035d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d7000067'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d7000067')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d700006a'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d700006a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d700006b'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d700006b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d700006f'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d700006f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab96f0671fc614d7000071'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab96f0671fc614d7000071')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8975671fc614ad0000d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0000ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000100')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000101')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000102')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000103')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000104')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000105')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000106')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000107')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000108')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000109')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00010f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000110')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000111')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000112')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000113')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000114')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000115')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000116')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000117')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000118')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000119')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00011f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000120')})
MONGODB [DEBUG] cursor.refresh() for cursor 1156389085615856903
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000121')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000122')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000123')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000124')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000125')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000126')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000127')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000128')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000129')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00012f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000130')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000131')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000132')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000133')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000134')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000135')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000136')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000137')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000138')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000139')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00013f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000140')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000141')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000142')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000143')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000144')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000145')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000146')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000147')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000148')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000149')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00014f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000150')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000151')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000152')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000153')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000154')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000155')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000156')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000157')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000158')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000159')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00015f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000160')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000161')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000162')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000163')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000164')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000165')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000166')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000167')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000168')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000169')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00016f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000170')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000171')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000172')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000173')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000174')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000175')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000176')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000177')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000178')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000179')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00017f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000180')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000181')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000182')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000183')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000184')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000185')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000186')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000187')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000188')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000189')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00018f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000190')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000191')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000192')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000193')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000194')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000195')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000196')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000197')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000198')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000199')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00019f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad0001ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000200')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000201')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000202')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000203')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000204')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000205')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000206')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000207')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000208')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad000209')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00020a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00020b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab8976671fc614ad00020c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000224')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00022c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000232')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000238')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000246')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000262')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00026c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000274')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00027a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00027f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000284')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00028e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000298')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00034c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00034f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000353')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000357')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad000359')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897e671fc614ad00035c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00020d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000216')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00021c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00023e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad000252')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad00025a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab897b671fc614ad0002cd')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab96f1671fc614d7000075')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab96f1671fc614d7000076')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"turbolinks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000077')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cache-digests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000078')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exploring-rubygems"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000079')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tagging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fnordmetric"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jruby-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"image-manipulation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bullet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ransack"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700007f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"miniprofiler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000080')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sidekiq"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000081')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-reputation-system"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000082')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exporting-csv-and-excel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000083')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"facebook-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000084')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"brakeman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000085')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-session-hijacking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000086')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"squeel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000087')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"securing-an-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000088')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rest-api-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000089')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-rails-api-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rubber-and-amazon-ec2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"wizard-forms-with-wicked"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"queue-classic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrating-to-postgresql"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"datatables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700008f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"globalize3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000090')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"copycopter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000091')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"compass-css-sprites"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000092')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refinery-cms-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000093')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"better-sass-with-bourbon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000094')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"twitter-bootstrap-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000095')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeattr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000096')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passing-data-to-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000097')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rabl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000098')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jbuilder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000099')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"private-pub"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-urls-with-friendlyid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-html-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"oh-my-zsh"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700009f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"elasticsearch-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-identity"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-place-editing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-open-source"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-spree"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mercury-editor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"playing-with-pjax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-machines-with-vagrant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"soap-with-savon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"billing-with-stripe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"spork"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-admin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-with-sorcery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"foreman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pry-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"understanding-the-asset-pipeline"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-with-sunspot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mountable-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-time-web-requests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-i-test"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"remember-me-reset-password"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"geocoder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markdown-with-redcarpet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"resque"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-in-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"template-inheritance"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sass-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"coffeescript-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-streaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-1-overview"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"guard"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"client-side-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"trees-with-ancestry"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-javascript-with-jasmine"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"messaging-with-faye"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"decent-exposure"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"token-fields"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-specs-and-capybara"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n-backends"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"undo-with-paper-trail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-kaminari"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"carrierwave-file-uploads"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metrics-metrics-metrics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metawhere-metasearch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-from-scratch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"notifications-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-state"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"new-gem-with-bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gravatar"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beanstalkd-and-stalker"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-omniauth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-sort-paginate-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activerecord-relation-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongoid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-attr-accessible"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"engage-with-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"inherited-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polling-for-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-table-columns"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"controllers-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfkit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multistep-forms"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"a-b-testing-with-a-bingo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"calendars"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-dynamic-delegator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"validations-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customizing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"introducing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"erb-blocks-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"syntax-highlighting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-mailer-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"unobtrusive-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"xss-protection-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-beta-and-rvm"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mobile-devices"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple-individually"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"my-favorite-web-apps-in-2009"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongodb-and-mongomapper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tableless-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authorization-with-cancan"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mechanize"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-nokogiri"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"embedded-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"declarative-authorization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010c')}])
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pickle-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gemcutter-jeweler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cropping-images"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"include-vs-joins"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"finding-unused-css"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seed-data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seven-security-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"searchlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-and-bookmarks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-scrapi"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"touch-and-cache"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"delayed-job"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-with-authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"feed-parsing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metric-fu"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cron-in-ruby"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"self-referential-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tree-based-navigation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000126')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"three-profiling-tools"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"factories-not-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rspec-matchers-macros"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"webrat"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beginning-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polymorphic-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfs-with-prawn"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-3-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-middleware"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-metal"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"app-templates-in-rails-2-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-lists"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-express-checkout"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"integrating-active-merchant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-merchant-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-security"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-2-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"memoization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jquery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paperclip"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"capistrano-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"helpers-outside-views"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"going-back"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"monitoring-with-god"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-daemon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"starling-and-workling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rake-in-background"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"populating-a-database"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beta-invitations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passenger-in-development"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"non-active-record-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thinking-sphinx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"session-based-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"liquid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"semi-static-pages"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"selenium"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"endless-page"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails-with-git"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"anonymous-scopes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gem-dependencies"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tracking-attribute-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-zones-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gitting-rails-2-1-rc1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exception-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"site-wide-announcements"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"auto-complete-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-out-helper-object"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"5-view-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-partials"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-profiling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"analyzing-the-production-log"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"git-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-activeresource"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeresource-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"make-resourceful"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-long-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fragment-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-select-menus"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-rss-feeds"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"logging-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"yaml-configuration-file"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cookie-based-session-store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-basic-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fixtures-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simplify-views-with-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generate-named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-pdf-documents"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"destroy-without-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"scope-out"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"adding-an-environment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-controllers-with-rspec"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markaby-in-helper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restful-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rake-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"stopping-spam-with-akismet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-helper-modules"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-name-in-url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hacking-activerecord"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-without-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"optimistic-locking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-to-make-a-generator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"create-model-through-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-logger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cleaning-up-the-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-with-ruby-debug"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"handling-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"update-through-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"will-paginate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"reading-the-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"console-tricks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"two-many-to-many"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d7000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"catch-all-route"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rjs-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-with-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"with-options"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"conditional-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d700019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"blocks-in-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customize-field-error"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multibutton-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subversion-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rest-actions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-plugin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-in-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formatting-time"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-page-title"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"group-by-month"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-groups-of"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cross-site-scripting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hackers-love-mass-assignment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sql-injection"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-stack-trace"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"counter-cache-column"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"eager-loading"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"super-simple-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restricting-access"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"where-administration-goes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"looping-through-flash"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"habtm-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b7')}])
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fun-with-find-conditions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"performing-calculations-on-models"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-model-in-session"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"filtering-sensitive-logs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"layouts-and-content-for"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"all-about-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"shortcut-blocks-with-symbol-to-proc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"using-with-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"move-find-into-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"find-through-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-find-by-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-with-instance-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f2671fc614d70001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ca'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001c8'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mashable is Hiring in Editorial, Ad Operations and Sales", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>\n\n<p><a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QUJjgFYntEk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QUJjgFYntEk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001cc'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Facebook"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Facebook", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ce'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facebook mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facebook mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facebook mobile", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001d0'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001d2'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"share"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"share"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"share", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001d4'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001d6'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"tablets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"tablets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"tablets", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001d8'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Share on Facebook Mobile", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wxmdTmw-9ao\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wxmdTmw-9ao/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497885"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001da'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001d9'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexis ohanian"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexis ohanian"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexis ohanian", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001dc'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001d9'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"reddit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"reddit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"reddit", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001de'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001d9'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e0'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001d9'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexis Ohanian: 10 Great TEDTalks About the Promise of the Internet", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/RJMYfUK8P9A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/RJMYfUK8P9A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497885", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497771"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e2'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e1'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (1ms) rails3_mongoid_devise_test['categories'].find({:name=>"philippe starck"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"philippe starck"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"philippe starck", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e4'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e1'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e5'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e1'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Philippe Starck: 11 Truly Thrilling Talks", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QX78P8L9r9w\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QX78P8L9r9w/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497771", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1502465"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e7'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e6'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"jesse draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"jesse draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"jesse draper", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001e9'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e6'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ea'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001e6'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Jesse Draper: 7 Inspiring TEDTalks That Will Pull You In", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ngq8LrQvSQw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ngq8LrQvSQw/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502465", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ec'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001eb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"daryl hannah"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"daryl hannah"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"daryl hannah", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ee'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001eb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ef'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001eb'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Daryl Hannah: 11 TEDTalks That Inspired Me to Activism", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/TRKjzEhT5fs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/TRKjzEhT5fs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1506023"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001f1'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f0'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Benetton"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Benetton"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Benetton", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001f3'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f0'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"privacy"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"privacy"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"privacy", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001f5'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f0'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001f7'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f0'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Benetton’s Mannequins Spy on You While You Shop", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XTyt3MSyw-o\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XTyt3MSyw-o/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1506023", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505721"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001f9'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f8'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"John McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"John McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"John McAfee", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001fb'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f8'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"McAfee", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001fd'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f8'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"police"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"police"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"police", "_id"=>BSON::ObjectId('50ab96f4671fc614d70001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d70001ff'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d70001f8'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Murder Suspect McAfee Blogs While on the Run From Police", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/vD6ACy--fTg\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/vD6ACy--fTg/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505721", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d70001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505977"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000201'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000200'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000203'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000200'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000202')}])
MONGODB (19ms) rails3_mongoid_devise_test['categories'].find({:name=>"htc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"htc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"htc", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000205'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000200'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"HTC’s Peter Chou: We Don’t Pay Apple $6-$8 per Android Phone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cpL08S4Ur8k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cpL08S4Ur8k/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505977", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d7000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000207'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000206'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Science"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Science"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Science", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000209'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000206'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charger", "_id"=>BSON::ObjectId('50ab96f4671fc614d700020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700020b'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000206'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d700020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"wireless charging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"wireless charging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"wireless charging", "_id"=>BSON::ObjectId('50ab96f4671fc614d700020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700020d'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000206'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d700020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Friction May Someday Charge Your Cellphone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/hosSQiGVu44\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/hosSQiGVu44/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d7000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504677"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700020f'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700020e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"e-textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"e-textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"e-textbooks", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000211'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700020e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"education"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"education"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"education", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000213'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700020e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"textbooks", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000215'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700020e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"New E-Textbooks Report Student Study Habits", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1E39Q2oobHc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1E39Q2oobHc/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504677", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d700020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505897"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000217'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000216'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Google Maps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Google Maps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Google Maps", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000219'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000216'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"asia"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"asia"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"asia", "_id"=>BSON::ObjectId('50ab96f4671fc614d700021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700021b'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d7000216'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d700021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Google Maps Helps Man Walk 5,000 Miles Across Asia [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jRNYy92fxE0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jRNYy92fxE0/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505897", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d7000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505833"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700021d'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700021c'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Windows Phone 7.8"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Windows Phone 7.8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Windows Phone 7.8", "_id"=>BSON::ObjectId('50ab96f4671fc614d700021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d700021f'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700021c'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d700021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"windows phone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"windows phone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"windows phone", "_id"=>BSON::ObjectId('50ab96f4671fc614d7000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f4671fc614d7000221'), "article_id"=>BSON::ObjectId('50ab96f4671fc614d700021c'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Windows Phone 7 Handsets Will Be Updated Past 7.8 [REPORT]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/X-VavXrE0L4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/X-VavXrE0L4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f4671fc614d700021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505901"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000223'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000222'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cherokee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cherokee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cherokee", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000225'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000222'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"gmail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"gmail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"gmail", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000227'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000222'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Gmail Gets Support for Cherokee, Raises Language Count to 57", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Pn5bt4Vo8ek\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Pn5bt4Vo8ek/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505901", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505869"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000229'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000228'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Seqinetic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Seqinetic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Seqinetic", "_id"=>BSON::ObjectId('50ab96f5671fc614d700022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700022b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000228'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"glasses"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"glasses"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"glasses", "_id"=>BSON::ObjectId('50ab96f5671fc614d700022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700022d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000228'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sun"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sun"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sun", "_id"=>BSON::ObjectId('50ab96f5671fc614d700022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700022f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000228'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Seqinetic ‘Sun’ Glasses Lets You Wear Daylight to Fight Winter Blues [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/0-jmnwG0f9Y\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/0-jmnwG0f9Y/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505869", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504489"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000231'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"android applications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"android applications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"android applications", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000233'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000235'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food apps", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000237'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone apps", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000238')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000239'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000238')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50ab96f5671fc614d700023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700023b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000230'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"6 Tech Fixes for Your Thanksgiving", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5IjFJznntVo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5IjFJznntVo/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504489", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504453"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700023d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700023c'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50ab96f5671fc614d700023e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700023f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700023c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700023e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000241'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700023c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000243'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700023c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Nintendo’s Wii U: First Impressions", "deck"=>"<br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"      <br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ea-21714_ko\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ea-21714_ko/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504453", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d700023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505695"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000245'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000244'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000247'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000244'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000249'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000244'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iTunes Store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iTunes Store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iTunes Store", "_id"=>BSON::ObjectId('50ab96f5671fc614d700024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700024b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000244'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"AC/DC Is Finally Available on iTunes", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/2y_Rhvchos4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/2y_Rhvchos4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505695", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000244')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505563"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700024d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700024c'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50ab96f5671fc614d700024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700024f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700024c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Watercooler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Watercooler", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000251'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700024c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"storycorps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"storycorps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"storycorps", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000252')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000253'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700024c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000252')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000255'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700024c'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Tells Heartbreaking Story of Grandfather’s Lost Building [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5BBnKcJneYs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5BBnKcJneYs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505563", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d700024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503817"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000257'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000256'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"CEOs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"CEOs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"CEOs", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000259'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000256'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charts", "_id"=>BSON::ObjectId('50ab96f5671fc614d700025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700025b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000256'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"intel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"intel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"intel", "_id"=>BSON::ObjectId('50ab96f5671fc614d700025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700025d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000256'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"These 3 Charts Tell the Story of Intel’s Otellini Era", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jQNLI4qMgQk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jQNLI4qMgQk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503817", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505535"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700025f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700025e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000260')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000261'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700025e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000260')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ufc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ufc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ufc", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000262')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000263'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700025e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000262')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"CBS Analyst Apologizes for ‘Homoerotic’ UFC Tweets", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qw0srOLkfR8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qw0srOLkfR8/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505535", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d700025e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505281"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000265'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000264'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000266'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000264'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"time-lapse"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"time-lapse"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"time-lapse", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000268'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000264'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Get Your Kicks With Time-Lapse of Route 66", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/rcp2wfBCCAE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/rcp2wfBCCAE/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505281", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000264')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504825"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700026a'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000269'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"NBA"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"NBA"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"NBA", "_id"=>BSON::ObjectId('50ab96f5671fc614d700026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700026c'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000269'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700026d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000269'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000260')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How an NBA Star’s YouTube Series Gives Fans Inside Access [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/6U33Ff5KPoY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/6U33Ff5KPoY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504825", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505131"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700026f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700026e'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"U.S. government"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"U.S. government"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"U.S. government", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000271'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700026e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"online petitions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"online petitions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"online petitions", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000273'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700026e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the white house"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the white house"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the white house", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000274')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000275'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700026e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000274')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"we the people"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"we the people"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"we the people", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000277'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d700026e'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000276')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Non-Secession White House Petitions Surge", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uGiX27dIfZY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uGiX27dIfZY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505131", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d700026e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505411"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000279'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000278'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Good"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Good"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Good", "_id"=>BSON::ObjectId('50ab96f5671fc614d700027a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700027b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000278'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700027a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"World"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"World", "_id"=>BSON::ObjectId('50ab96f5671fc614d700027c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700027d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000278'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700027c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"africa"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"africa"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"africa", "_id"=>BSON::ObjectId('50ab96f5671fc614d700027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700027f'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000278'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mit", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000280')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000281'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000278'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000280')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Self-Taught Teen Prodigy From Sierra Leone Wows MIT Engineers [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WRw_FlQD-JQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WRw_FlQD-JQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505411", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000278')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503733"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000283'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000282'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000284'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000282'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Media"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Media", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000286'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000282'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"india"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"india"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"india", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000288'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000282'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mumbai Women Arrested for Political Facebook Comment", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7gj3dCs6frQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7gj3dCs6frQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503733", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504219"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700028a'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000289'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"biking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"biking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"biking", "_id"=>BSON::ObjectId('50ab96f5671fc614d700028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700028c'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000289'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"exercise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"exercise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"exercise", "_id"=>BSON::ObjectId('50ab96f5671fc614d700028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700028e'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000289'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50ab96f5671fc614d700028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000290'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000289'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iPhone-Syncing Bike Mount Makes Your Apps More Accessible", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/tW2JaIvb80A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/tW2JaIvb80A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504219", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505129"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000292'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000291'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000293'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000291'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d7000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mac osx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mac osx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mac osx", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000295'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000291'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How Should Apple Name the Next Mac OS Series? [POLL]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WVVGLXSINNs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WVVGLXSINNs/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505129", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504081"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000297'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cybercrime Series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cybercrime Series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cybercrime Series", "_id"=>BSON::ObjectId('50ab96f5671fc614d7000298')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d7000299'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d7000298')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mobile", "_id"=>BSON::ObjectId('50ab96f5671fc614d700029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700029b'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cybercrime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cybercrime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cybercrime", "_id"=>BSON::ObjectId('50ab96f5671fc614d700029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700029d'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d700029e'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50ab96f5671fc614d700029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002a0'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d7000296'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Are You Safe From Cybercrime?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ypOUOA5N9r4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ypOUOA5N9r4/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504081", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d7000296')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504073"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002a2'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d70002a1'), "category_id"=>BSON::ObjectId('50ab96f4671fc614d70001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002a4'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d70002a1'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d70002a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002a5'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d70002a1'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d700027c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"middle east"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"middle east"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"middle east", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002a7'), "article_id"=>BSON::ObjectId('50ab96f5671fc614d70002a1'), "category_id"=>BSON::ObjectId('50ab96f5671fc614d70002a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"25 Must-Follow Twitter Accounts for Gaza-Israel Conflict Updates", "deck"=>"<br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>", "story"=>"      <br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/VzsZNAX-D2g\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/VzsZNAX-D2g/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504073", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab96f5671fc614d70002a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f1671fc614d7000075')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f1671fc614d7000076')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000077')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000078')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000079')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700007f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000080')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000081')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000082')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000083')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000084')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000085')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000086')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000087')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000088')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000089')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700008f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000090')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000091')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000092')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000093')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000094')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000095')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000096')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000097')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000098')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000099')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700009f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000db')})
MONGODB [DEBUG] cursor.refresh() for cursor 1644622267537534433
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70000ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000100')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000101')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000102')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000103')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000104')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000105')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000106')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000107')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000108')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000109')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700010f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000110')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000111')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000112')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000113')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000114')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000115')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000116')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000117')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000118')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000119')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700011f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000120')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000121')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000122')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000123')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000124')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000125')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000126')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000127')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000128')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000129')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700012f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000130')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000131')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000132')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000133')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000134')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000135')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000136')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000137')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000138')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000139')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700013f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000140')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000141')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000142')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000143')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000144')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000145')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000146')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000147')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000148')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000149')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700014f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000150')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000151')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000152')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000153')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000154')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000155')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000156')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000157')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000158')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000159')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700015f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000160')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000161')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000162')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000163')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000164')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000165')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000166')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000167')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000168')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000169')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700016f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000170')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000171')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000172')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000173')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000174')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000175')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000176')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000177')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000178')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000179')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700017f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000180')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000181')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000182')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000183')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000184')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000185')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000186')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000187')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000188')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000189')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700018f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000190')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000191')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000192')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000193')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000194')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000195')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000196')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000197')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000198')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d7000199')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d700019f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f2671fc614d70001c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000200')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000206')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700020e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000216')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700021c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000222')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000228')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000230')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700023c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000244')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700024c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000256')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700025e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000269')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000278')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000282')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000289')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000291')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000264')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700026e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000296')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002a1')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002a8')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002a9')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002aa')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002ab')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002ac')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002ad')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50ab96f5671fc614d70002b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002b0')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f5671fc614d70002b3'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002b3')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002b7'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f5671fc614d70002b7')}, {"$set"=>{"guid"=>"50ab96f5671fc614d70002b7"}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002b8'), "name"=>"user17", "email"=>"user_admin9@example.com", "role"=>1, "password_salt"=>"$2a$10$gYMCifycxaybfJXuPK/rEu", "password_hash"=>"$2a$10$gYMCifycxaybfJXuPK/rEudaK/7yFw29fbp13NaM6jbjwC/tP0R/y"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f5671fc614d70002b8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 57ms (Views: 47.6ms | ActiveRecord: 0.0ms)


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002ba'), "name"=>"user18", "email"=>"user_admin10@example.com", "role"=>1, "password_salt"=>"$2a$10$G4hL4dtDcJHyI/NSsvyBG.", "password_hash"=>"$2a$10$G4hL4dtDcJHyI/NSsvyBG.swx9V.M7upeYwGs9hn6mHzQq9KIqzku"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 69ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f5671fc614d70002ba')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bb'), "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bb')}, {"$set"=>{"guid"=>"50ab96f5671fc614d70002bb"}})
MONGODB (32ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bc'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bc')}, {"$set"=>{"guid"=>"50ab96f5671fc614d70002bc"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 16ms (Views: 4.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bf'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f5671fc614d70002bf')}, {"$set"=>{"guid"=>"50ab96f5671fc614d70002bf"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.7ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f5671fc614d70002c1'), "name"=>"user19", "email"=>"user_admin11@example.com", "role"=>1, "password_salt"=>"$2a$10$xZZJnEcFTxoftvP4PvuVNu", "password_hash"=>"$2a$10$xZZJnEcFTxoftvP4PvuVNu7TgTPeMp0P32a2o2.GJr5cuQQFW7d7m"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f5671fc614d70002c1')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:43:01 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:42:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f5671fc614d70002c1')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab96f5671fc614d70002c3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab96f5671fc614d70002c3')})
Completed 200 OK in 65ms (Views: 57.3ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f5671fc614d70002c1')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab96f6671fc614d70002c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab96f6671fc614d70002c5')})
Completed 200 OK in 22ms (Views: 12.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002c6'), "name"=>"user20", "email"=>"user_admin12@example.com", "role"=>1, "password_salt"=>"$2a$10$44p65KHvIeZY9lNoTJR4fe", "password_hash"=>"$2a$10$44p65KHvIeZY9lNoTJR4fejDnhpzbjox/ALiHXqB.R8Be5wPuaEca"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002c6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002c6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab96f6671fc614d70002c8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab96f6671fc614d70002c8')})
Completed 200 OK in 20ms (Views: 12.4ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002c6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-20 00:00:00 UTC, "_id"=>BSON::ObjectId('50ab96f6671fc614d70002ca'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f6671fc614d70002ca')}, {"$set"=>{"guid"=>"50ab96f6671fc614d70002ca"}})
Redirected to http://www.example.com/articles/50ab96f6671fc614d70002ca
Completed 302 Found in 9ms (ActiveRecord: 0.0ms)


Started GET "/articles/50ab96f6671fc614d70002ca" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50ab96f6671fc614d70002ca"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002ca')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002c6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002ca')}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab96f6671fc614d70002ca')})
Completed 200 OK in 13ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002cb'), "name"=>"user21", "email"=>"user_admin13@example.com", "role"=>1, "password_salt"=>"$2a$10$7cW32twnUHmKOWaAzcBsF.", "password_hash"=>"$2a$10$7cW32twnUHmKOWaAzcBsF.Zp2v40b/DxmB0ZvoVyPW9aP326tkIQi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#new as HTML
MONGODB (27ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
Completed 200 OK in 30ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin13@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f6671fc614d70002cb')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50ab96f6671fc614d70002cc'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f6671fc614d70002cc')}, {"$set"=>{"guid"=>"50ab96f6671fc614d70002cc"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002b8')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002ba')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002c1')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002c6')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002cf'), "name"=>"user22", "email"=>"user8@example.com", "role"=>5, "password_salt"=>"$2a$10$UyGJiRfyCyxPa5SerfLc8e", "password_hash"=>"$2a$10$UyGJiRfyCyxPa5SerfLc8eMSZJYGnI5H4UqhSw8rWJJ2gadc3p8G."}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002cf')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002d1'), "name"=>"user23", "email"=>"user9@example.com", "role"=>5, "password_salt"=>"$2a$10$yY8go9jycH1/xvxHrdZuNO", "password_hash"=>"$2a$10$yY8go9jycH1/xvxHrdZuNOFGYXAcwNpZ0tYzIDR0tbFICF1l78z.y"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002d2'), "name"=>"user24", "email"=>"asf.as@fac.cs", "role"=>1, "password_salt"=>"$2a$10$jbc/f97D1wREeUoYz5/atu", "password_hash"=>"$2a$10$jbc/f97D1wREeUoYz5/atucsbLWtoY7Ov1zPMHhKoEjPh/NPXSHTe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002d1')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002d2')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002d7'), "name"=>"user25", "email"=>"user10@example.com", "role"=>5, "password_salt"=>"$2a$10$7HX/uhXVW9HnBt3/DjjJHO", "password_hash"=>"$2a$10$7HX/uhXVW9HnBt3/DjjJHOsnHI0HjD2EOY609kZi5n2aecj/PqnoG"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002d8'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002da'), "user_id"=>BSON::ObjectId('50ab96f6671fc614d70002d9'), "category_id"=>BSON::ObjectId('50ab96f6671fc614d70002d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002db'), "name"=>"user27", "email"=>"user12@example.com", "role"=>5, "password_salt"=>"$2a$10$wFSxHz4fCBqlNcVvh3MCHe", "password_hash"=>"$2a$10$wFSxHz4fCBqlNcVvh3MCHeySEcukzg5WzUQko2Vjc2rSDHR4BN.JO"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002dc'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50ab96f6671fc614d70002db"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50ab96f6671fc614d70002db"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50ab96f6671fc614d70002db", "_id"=>BSON::ObjectId('50ab96f6671fc614d70002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002de'), "user_id"=>BSON::ObjectId('50ab96f6671fc614d70002db'), "category_id"=>BSON::ObjectId('50ab96f6671fc614d70002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f6671fc614d70002df'), "name"=>"user28", "email"=>"user13@example.com", "role"=>5, "password_salt"=>"$2a$10$emETUWOUzcF4pz49BKgMn.", "password_hash"=>"$2a$10$emETUWOUzcF4pz49BKgMn.0auXgZHtLDD0UZIr3ucB/pYGpr2divO"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e0'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e1'), "user_id"=>BSON::ObjectId('50ab96f6671fc614d70002df'), "category_id"=>BSON::ObjectId('50ab96f7671fc614d70002e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e2'), "name"=>"user29", "email"=>"user14@example.com", "role"=>5, "password_salt"=>"$2a$10$2/WDxIt1gXbY9dMXOVOLm.", "password_hash"=>"$2a$10$2/WDxIt1gXbY9dMXOVOLm.A/hqEbdCF/CR6OU777ijC4FhGFVNmky"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e3'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e4'), "name"=>"user30", "email"=>"user15@example.com", "role"=>5, "password_salt"=>"$2a$10$EJyopXymPGWapSZRRwv.9u", "password_hash"=>"$2a$10$EJyopXymPGWapSZRRwv.9usZHByX9LjxiAM0qGPaKTmKRO5dGfXiC"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e5'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50ab96f7671fc614d70002e4"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50ab96f7671fc614d70002e4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50ab96f7671fc614d70002e4", "_id"=>BSON::ObjectId('50ab96f7671fc614d70002e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e7'), "name"=>"user31", "email"=>"user16@example.com", "role"=>5, "password_salt"=>"$2a$10$H99he2qSRSxrYPhwz88W/e", "password_hash"=>"$2a$10$H99he2qSRSxrYPhwz88W/eWjtO8IkOo7q6bwv2rmWRAwBLy9dQBx2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002e8'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002ea'), "name"=>"user32", "email"=>"user_admin15@example.com", "role"=>1, "password_salt"=>"$2a$10$BVMeIgMQkpZz0qvK1cvqg.", "password_hash"=>"$2a$10$BVMeIgMQkpZz0qvK1cvqg.LwtkrUYYVN0yB/537PZYzRi4hYcAjWm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ea')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f7671fc614d70002e9'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ea')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.3ms)
Completed 200 OK in 14ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50ab96f7671fc614d70002e9" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50ab96f7671fc614d70002e9"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ea')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e9')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 7ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ea')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 9ms (Views: 2.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002ec'), "name"=>"user33", "email"=>"user_admin16@example.com", "role"=>1, "password_salt"=>"$2a$10$ChQFTclQB7hhqus.BAobx.", "password_hash"=>"$2a$10$ChQFTclQB7hhqus.BAobx.qgC02BlGB.24ua3sLfV/cX7P1Pt1bbu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ec')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f7671fc614d70002eb'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ec')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 11ms (Views: 3.7ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab96f7671fc614d70002eb/edit" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50ab96f7671fc614d70002eb"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002eb')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ec')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002eb')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f7671fc614d70002eb')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 16ms (Views: 9.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002eb')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002ee'), "name"=>"user34", "email"=>"user_admin17@example.com", "role"=>1, "password_salt"=>"$2a$10$KxgSTQr7/jYntysoewwmrO", "password_hash"=>"$2a$10$KxgSTQr7/jYntysoewwmrODFhD8JW.gjltQxMemrGz8Lz2vtgph6."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f7671fc614d70002ed'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab96f7671fc614d70002ed" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab96f7671fc614d70002ed"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ed')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ed')}).limit(-1)
Completed 200 OK in 10ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ed')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f7671fc614d70002f0'), "name"=>"user35", "email"=>"user_admin18@example.com", "role"=>1, "password_salt"=>"$2a$10$UXnJHFLHzuhPPCRqdsFNRe", "password_hash"=>"$2a$10$UXnJHFLHzuhPPCRqdsFNRevDiFcx4WL3Ixtj5B5XzNSWfmUZ4nIq2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:03 UTC}})
Completed 200 OK in 44ms (Views: 42.5ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002f0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002f0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d70002f2')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 15ms (Views: 7.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002f0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50ab96f8671fc614d70002f4')}])
Redirected to http://www.example.com/news_agencies/50ab96f8671fc614d70002f4
Completed 302 Found in 9ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab96f8671fc614d70002f4" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab96f8671fc614d70002f4"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f4')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f7671fc614d70002f0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f4')}).limit(-1)
Completed 200 OK in 9ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f4')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f8671fc614d70002f6'), "name"=>"user36", "email"=>"user_admin19@example.com", "role"=>1, "password_salt"=>"$2a$10$OPs3NspA3007R9.nwrrGGO", "password_hash"=>"$2a$10$OPs3NspA3007R9.nwrrGGOjYN0CbfFcdxS65XwZ6HmYf.CrZcyBkK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 69ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d70002f8')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 14ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d70002fa')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 55ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f8671fc614d70002fc'), "name"=>"user37", "email"=>"user_admin20@example.com", "role"=>1, "password_salt"=>"$2a$10$Z8x9JJr3.q5cdnxdjUMtQe", "password_hash"=>"$2a$10$Z8x9JJr3.q5cdnxdjUMtQeQGgWrTnE5q0bBQHHkoxrbRO3FP2/sq."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002fc')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f8671fc614d70002fb'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002fc')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d70002fe')})
  Rendered news_agencies/_form.html.erb (4.3ms)
Completed 200 OK in 13ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d70002fc')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d7000300')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 15ms (Views: 6.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d70002fb')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f8671fc614d7000302'), "name"=>"user38", "email"=>"user_admin21@example.com", "role"=>1, "password_salt"=>"$2a$10$3AqbMe7pZv/a1v66T0Or9e", "password_hash"=>"$2a$10$3AqbMe7pZv/a1v66T0Or9eWrjTYu5dxeadT/dTBe8QQP8J87wPScC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000302')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 54ms (Views: 45.3ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000302')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 10ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000302')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f8671fc614d7000304')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 13ms (Views: 6.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f8671fc614d7000306'), "name"=>"user39", "email"=>"user_admin22@example.com", "role"=>1, "password_salt"=>"$2a$10$aCCLZL4P8JEPVnwPTuzGmu", "password_hash"=>"$2a$10$aCCLZL4P8JEPVnwPTuzGmuWjB05d3jc3P9jZx3cDYrGrZsTaqiTSG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin22@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin22@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000306')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000306')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f9671fc614d7000308')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 14ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f8671fc614d7000306')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab96f9671fc614d700030a')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 15ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700030c'), "name"=>"user40", "email"=>"user_admin23@example.com", "role"=>1, "password_salt"=>"$2a$10$0RWqFiYfVBiIKaZWPVr7e.", "password_hash"=>"$2a$10$0RWqFiYfVBiIKaZWPVr7e.G5Wu7zkqOsuTpG7jKJoGP5ooO.bdXem"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin23@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin23@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d700030c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab96f9671fc614d700030b'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex"})
Redirected to http://www.example.com/
Completed 302 Found in 9ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700030e'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d700030e')}, {"$set"=>{"guid"=>"50ab96f9671fc614d700030e"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700030f'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000311'), "article_id"=>BSON::ObjectId('50ab96f9671fc614d7000310'), "category_id"=>BSON::ObjectId('50ab96f9671fc614d700030f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000312'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d7000312')}, {"$set"=>{"guid"=>"50ab96f9671fc614d7000312"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000313'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50ab96f9671fc614d7000312"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50ab96f9671fc614d7000312"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50ab96f9671fc614d7000312", "_id"=>BSON::ObjectId('50ab96f9671fc614d7000314')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000315'), "article_id"=>BSON::ObjectId('50ab96f9671fc614d7000312'), "category_id"=>BSON::ObjectId('50ab96f9671fc614d7000314')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000316'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d7000316')}, {"$set"=>{"guid"=>"50ab96f9671fc614d7000316"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000317'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000318'), "article_id"=>BSON::ObjectId('50ab96f9671fc614d7000316'), "category_id"=>BSON::ObjectId('50ab96f9671fc614d7000317')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000319'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d7000319')}, {"$set"=>{"guid"=>"50ab96f9671fc614d7000319"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700031a'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700031b'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d700031b')}, {"$set"=>{"guid"=>"50ab96f9671fc614d700031b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700031c'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50ab96f9671fc614d700031b"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50ab96f9671fc614d700031b"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50ab96f9671fc614d700031b", "_id"=>BSON::ObjectId('50ab96f9671fc614d700031d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700031e'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96f9671fc614d700031e')}, {"$set"=>{"guid"=>"50ab96f9671fc614d700031e"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d700031f'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000320'), "name"=>"user41", "email"=>"user17@example.com", "role"=>5, "password_salt"=>"$2a$10$8RJtruz.EPVenzfcb0jMdO", "password_hash"=>"$2a$10$8RJtruz.EPVenzfcb0jMdOt/3KG32TzTc9hHurmnqvJsI.ce/wKee"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d7000320')}).limit(-1)
MONGODB [DEBUG] Cursor#close 5420937572094688907
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB [DEBUG] Cursor#close 967926826905484960
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 7.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000322'), "name"=>"user42", "email"=>"user18@example.com", "role"=>5, "password_salt"=>"$2a$10$mKV30Mi0ooNIHH.Gmf1mCu", "password_hash"=>"$2a$10$mKV30Mi0ooNIHH.Gmf1mCuYZzT6uK2G2f7kMY8juSy6gxW5tY6ZKG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d7000322')}).limit(-1)
MONGODB [DEBUG] Cursor#close 8218108785383030600
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 59ms (Views: 49.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000323'), "name"=>"user43", "email"=>"user19@example.com", "role"=>5, "password_salt"=>"$2a$10$cauJ9YrAfvTq.tPF6A9jse", "password_hash"=>"$2a$10$cauJ9YrAfvTq.tPF6A9jse5POYZkP1HHqql0H.aXHqUNsfrA/wQoO"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000324'), "name"=>"user44", "email"=>"user20@example.com", "role"=>5, "password_salt"=>"$2a$10$X3gy4xQfK3HtMgZjF2w6Ve", "password_hash"=>"$2a$10$X3gy4xQfK3HtMgZjF2w6VevaHTzTiWPI/.RxUoDz7flXPGKdH9Qb."}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#destroy as HTML
MONGODB (28ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 31ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:05 UTC}})
MONGODB [DEBUG] Cursor#close 2585715379515277376
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 19ms (Views: 7.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96f9671fc614d7000326'), "name"=>"user45", "email"=>"user21@example.com", "role"=>5, "password_salt"=>"$2a$10$Jg1.rXNpkJ5cb4UAHx/bzu", "password_hash"=>"$2a$10$Jg1.rXNpkJ5cb4UAHx/bzu7afGa.EOeaZpXMNA6UStQAt8zxWQGXS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:05 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d7000326')}).limit(-1)
MONGODB [DEBUG] Cursor#close 6336913058195423464
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 17ms (Views: 8.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d7000327'), "name"=>"user46", "email"=>"user22@example.com", "role"=>5, "password_salt"=>"$2a$10$Ck84fs6Xifj5s/l8o8.e5O", "password_hash"=>"$2a$10$Ck84fs6Xifj5s/l8o8.e5OgpWySrC0j8Hcu/aE1J7CjSPeHtCNVr."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user22@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user22@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d7000328'), "name"=>"user47", "email"=>"user23@example.com", "role"=>5, "password_salt"=>"$2a$10$8TSppgyGLY.FlZDvYvOrk.", "password_hash"=>"$2a$10$8TSppgyGLY.FlZDvYvOrk.rtMKyfalnoPf070kKCYepa00uG9fA9O"}])


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by ArticlesController#index as HTML
MONGODB (2ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB [DEBUG] Cursor#close 5021915778648490396
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 60ms (Views: 49.3ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d700032a'), "name"=>"user48", "email"=>"user24@example.com", "role"=>5, "password_salt"=>"$2a$10$uSL4zq2vJAHQ/U9p7/UYxO", "password_hash"=>"$2a$10$uSL4zq2vJAHQ/U9p7/UYxO39nUR6Kvqfmn.2XS/9S71CG0g.nD1HS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user24@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user24@example.com"}).limit(-1)
Completed 200 OK in 72ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d700032b'), "name"=>"user49", "email"=>"user25@example.com", "role"=>5, "password_salt"=>"$2a$10$ESIvZYaDzhXOa4ETbWl7NO", "password_hash"=>"$2a$10$ESIvZYaDzhXOa4ETbWl7NOI5i6oGfeP5Xm/dnUkQT/PhMv9xCaNbq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d700032c'), "name"=>"user50", "email"=>"user26@example.com", "role"=>5, "password_salt"=>"$2a$10$ntETpPplwizpf4F3xQ0ogu", "password_hash"=>"$2a$10$ntETpPplwizpf4F3xQ0oguUa.9239xZCiYgdn5hBHkYZM73AWGLjm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user26@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user26@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96fa671fc614d700032c')}).limit(-1)
MONGODB [DEBUG] Cursor#close 2405316870363530072
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 18ms (Views: 8.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d700032d'), "name"=>"user51", "email"=>"user27@example.com", "role"=>5, "password_salt"=>"$2a$10$vxlM9b.jUrQHhK6RiSj6ke", "password_hash"=>"$2a$10$vxlM9b.jUrQHhK6RiSj6keWGEQ3nbjEYOK9lCdY2wmtu7B7hB8ANG"}])
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fa671fc614d700032e'), "name"=>"user52", "email"=>"user_admin24@example.com", "role"=>1, "password_salt"=>"$2a$10$qxa1i44TvK3qIz10VX.y7.", "password_hash"=>"$2a$10$qxa1i44TvK3qIz10VX.y7.rZfDcSkS8yFGCWJ1z5CQGVps4ILbTNi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin24@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin24@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 69ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:06 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96fa671fc614d700032e')}).limit(-1)
MONGODB [DEBUG] Cursor#close 7654577370699252807
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 59ms (Views: 49.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700030e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000312')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000316')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000319')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002d7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002db')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002df')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e4')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ea')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ec')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002ee')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002f0')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d70002f6')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d70002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d7000302')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f8671fc614d7000306')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700030c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000320')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000322')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000323')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000324')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000326')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d7000327')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d7000328')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d700032a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d700032b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d700032c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d700032d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fa671fc614d700032e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000330'), "name"=>"user53", "email"=>"user28@example.com", "role"=>5, "password_salt"=>"$2a$10$.zdEK3B8qiZAp2UelzGnU.", "password_hash"=>"$2a$10$.zdEK3B8qiZAp2UelzGnU.trVLBwCPcGZc1RYPsMNgtwu7J2Xji8e"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000331'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50ab96fb671fc614d7000330'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000331')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000331"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000331')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000330')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000333'), "name"=>"user54", "email"=>"user29@example.com", "role"=>5, "password_salt"=>"$2a$10$ZvbxmBHaGVzHHGSbdQ.CJ.", "password_hash"=>"$2a$10$ZvbxmBHaGVzHHGSbdQ.CJ.8kZR.AMKdIJnHdlA.4rq/yU6BxGThLe"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000334'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50ab96fb671fc614d7000333'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000334')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000334"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000334')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000333')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000336'), "headline"=>"no_user_article1", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000336')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000336"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000336')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000337'), "headline"=>"un1que", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000337')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000337"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000337')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000337')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700027e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000280')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000287')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700028b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700028d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700028f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000294')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700029a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700029c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700029f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002a3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d70002a6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000236')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000238')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700023e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000240')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000242')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000248')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700024e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000250')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000252')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000254')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000258')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700025a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700025c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000260')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000262')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000267')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700026b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700027a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700027c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001c9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001cd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001d1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001d3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001d5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001d7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001db')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001df')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001e3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001e8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001ed')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001f2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001f4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001f6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001fa')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d70001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000202')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000204')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000208')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700020a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700020c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000210')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000214')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000218')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d700021e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f4671fc614d7000220')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000224')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000226')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700022a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700022c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700022e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000232')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000234')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700023a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000246')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d700024a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000270')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000272')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000274')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000276')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000285')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f5671fc614d7000298')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002d8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002dc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f6671fc614d70002dd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f7671fc614d70002e8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700030f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000313')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000314')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d7000317')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700031f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50ab96fb671fc614d7000339')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d700033a'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d7000339')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50ab96fb671fc614d700033b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d700033c'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d700033b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50ab96fb671fc614d700033d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d700033e'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d700033d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "headline"=>"asdfqwer", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d700033f'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d7000339')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000340'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d700033b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000341'), "article_id"=>BSON::ObjectId('50ab96fb671fc614d7000338'), "category_id"=>BSON::ObjectId('50ab96fb671fc614d700033d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000338')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000338"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000338')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000342'), "headline"=>"new_article_1", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000342')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000342"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000342')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000342')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000342')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000342')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000343'), "headline"=>"asdf", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000343')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000343"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000343')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000344'), "headline"=>"unique", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000344')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000344"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000344')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000344')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000345'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000345')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000345"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000345')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000346'), "headline"=>"un1q", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000346')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000346"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000346')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d7000348'), "headline"=>"uniq", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab96fb671fc614d7000348')}, {"$set"=>{"guid"=>"50ab96fb671fc614d7000348"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000348')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:07 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:07 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab96fb671fc614d700034a'), "name"=>"user55", "email"=>"user_admin25@example.com", "role"=>1, "password_salt"=>"$2a$10$FVxWXUAjXXWkX5hTxWtRhu", "password_hash"=>"$2a$10$FVxWXUAjXXWkX5hTxWtRhuAWWbY2QD1PDd4hjNqR4IjqPhZZTrcma"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:07 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:07 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:07 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin25@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin25@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96fb671fc614d700034a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-20 11:43:07 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-20 14:42:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96fb671fc614d700034a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 3716ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab96fb671fc614d700034a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 3.7ms | ActiveRecord: 0.0ms)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (1ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000001'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9718671fc614d9000001')}, {"$set"=>{"guid"=>"50ab9718671fc614d9000001"}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000002'), "name"=>"user1", "email"=>"user_admin1@example.com", "role"=>1, "password_salt"=>"$2a$10$WZpvz8.wZg1qG959uYPV8e", "password_hash"=>"$2a$10$WZpvz8.wZg1qG959uYPV8eeqBPSp0vFF6tOBBoixKf765fKHMyue6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
  Rendered sessions/new.html.erb within layouts/application (3.1ms)
Completed 200 OK in 16ms (Views: 14.4ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d9000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (6.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (14.1ms)
Completed 200 OK in 27ms (Views: 17.7ms | ActiveRecord: 0.0ms)


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Redirected to http://www.example.com/
Completed 302 Found in 14ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000004'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9718671fc614d9000004')}, {"$set"=>{"guid"=>"50ab9718671fc614d9000004"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000006'), "name"=>"user2", "email"=>"user_admin2@example.com", "role"=>1, "password_salt"=>"$2a$10$k/TDEmSHp1XsvY1lusfHN.", "password_hash"=>"$2a$10$k/TDEmSHp1XsvY1lusfHN..uumjNb9ESoDi0BT3rpn1JjAvhE5P5G"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin2@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin2@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 109ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d9000006')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000007'), "headline"=>"Article 3", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9718671fc614d9000007')}, {"$set"=>{"guid"=>"50ab9718671fc614d9000007"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d9000008'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9718671fc614d9000008')}, {"$set"=>{"guid"=>"50ab9718671fc614d9000008"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d900000b'), "name"=>"user3", "email"=>"user_admin3@example.com", "role"=>1, "password_salt"=>"$2a$10$wgiMFWlc5y7Qvkl0BvJDwu", "password_hash"=>"$2a$10$wgiMFWlc5y7Qvkl0BvJDwuM8HBQMEHjqOAF5mR5OfASUge5WRF.pS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin3@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin3@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d900000b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50ab9718671fc614d900000c'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9718671fc614d900000c')}, {"$set"=>{"guid"=>"50ab9718671fc614d900000c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:36 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:36 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9718671fc614d900000d'), "name"=>"user4", "email"=>"user_admin4@example.com", "role"=>1, "password_salt"=>"$2a$10$dtZPOspEcwq/HKyeS/lyM.", "password_hash"=>"$2a$10$dtZPOspEcwq/HKyeS/lyM.u7gFGaGlNkKHkleZ2KGE..f19LyEUaq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin4@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin4@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d900000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d900000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d900000f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d900000f')})
Completed 200 OK in 25ms (Views: 16.7ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>"50ab96f9671fc614d700030b"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d900000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>BSON::ObjectId('50ab96f9671fc614d700030b'), "published_on"=>2012-11-20 00:00:00 UTC, "_id"=>BSON::ObjectId('50ab9719671fc614d9000011'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab9719671fc614d9000011')}, {"$set"=>{"guid"=>"50ab9719671fc614d9000011"}})
Redirected to http://www.example.com/articles/50ab9719671fc614d9000011
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/articles/50ab9719671fc614d9000011" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50ab9719671fc614d9000011"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9718671fc614d900000d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d700030b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d9000011')})
Completed 200 OK in 14ms (Views: 5.9ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9719671fc614d9000012'), "name"=>"user5", "email"=>"user_admin5@example.com", "role"=>1, "password_salt"=>"$2a$10$KTJy9g4t9ufaEfZe8lRCx.", "password_hash"=>"$2a$10$KTJy9g4t9ufaEfZe8lRCx.afcsrj86Ea9NyM8hDj.tjhaHzDavGgy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
Completed 200 OK in 42ms (Views: 41.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin5@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000012')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.8ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000012')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d9000014')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d9000014')})
Completed 200 OK in 22ms (Views: 13.3ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"", "deck"=>"", "story"=>"ice", "news_agency_id"=>"50ab96f9671fc614d700030b"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000012')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab96f9671fc614d700030b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d9000016')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab9719671fc614d9000016')})
Completed 200 OK in 62ms (Views: 53.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab96f9671fc614d700030b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9719671fc614d9000018'), "name"=>"user6", "email"=>"user_admin6@example.com", "role"=>1, "password_salt"=>"$2a$10$4qIRzQTVxFywqOQhir76RO", "password_hash"=>"$2a$10$4qIRzQTVxFywqOQhir76ROZJbcNM/CkOSosVg6eJ.hl39dMMm9/Zy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin6@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin6@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000018')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab9719671fc614d9000017'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d9000017')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9719671fc614d900001b'), "name"=>"user7", "email"=>"user_admin7@example.com", "role"=>1, "password_salt"=>"$2a$10$Hv1DrprfUJF0zsNE.SlaaO", "password_hash"=>"$2a$10$Hv1DrprfUJF0zsNE.SlaaOMuWgwi6iyLMiKTH7DjzzdBg0T.ny1lS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#new as HTML
MONGODB (3ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
Completed 200 OK in 20ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin7@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin7@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.5ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab9719671fc614d900001d')})
  Rendered news_agencies/_form.html.erb (6.1ms)
Completed 200 OK in 17ms (Views: 10.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50ab9719671fc614d900001f')}])
Redirected to http://www.example.com/news_agencies/50ab9719671fc614d900001f
Completed 302 Found in 9ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab9719671fc614d900001f" for 127.0.0.1 at 2012-11-20 11:43:37 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab9719671fc614d900001f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:42:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab9719671fc614d900001f')}).limit(-1)
Completed 200 OK in 10ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d900001f')})
MONGODB (1ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9719671fc614d9000021'), "name"=>"user8", "email"=>"user_admin8@example.com", "role"=>1, "password_salt"=>"$2a$10$j8hR/REm5RBGMQqDIsJY4.", "password_hash"=>"$2a$10$j8hR/REm5RBGMQqDIsJY4.3g2kSjhldtvrKpuQRNTOvlPGkz4Zjoa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin8@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin8@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d9000023')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 14ms (Views: 6.8ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9719671fc614d9000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d9000025')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 15ms (Views: 7.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971a671fc614d9000027'), "name"=>"user9", "email"=>"user_admin9@example.com", "role"=>1, "password_salt"=>"$2a$10$kL6/mAmMxAPK5gSOjIbKQe", "password_hash"=>"$2a$10$kL6/mAmMxAPK5gSOjIbKQeSTKEx40N.7dQfKctiZdFk5gdYDr8Ega"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000027')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000027')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d9000029')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 14ms (Views: 7.1ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000027')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d900002b')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 14ms (Views: 7.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971a671fc614d900002d'), "name"=>"user10", "email"=>"user_admin10@example.com", "role"=>1, "password_salt"=>"$2a$10$YVAP9ODSZvbDEZmjgHmEVe", "password_hash"=>"$2a$10$YVAP9ODSZvbDEZmjgHmEVecqc3lZU.h.SWSz5Sw0LmhRONLLD/o1i"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d900002d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab971a671fc614d900002c'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d900002d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d900002f')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 14ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d900002d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d9000031')})
  Rendered news_agencies/_form.html.erb (47.2ms)
Completed 200 OK in 58ms (Views: 49.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d900002c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971a671fc614d9000033'), "name"=>"user11", "email"=>"user_admin11@example.com", "role"=>1, "password_salt"=>"$2a$10$9rq1cJdwYPAsQUeQ0OV70O", "password_hash"=>"$2a$10$9rq1cJdwYPAsQUeQ0OV70OG.h.EqWVQGoprrRbt/F2V6LEEJuZ6Ku"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000033')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000033')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 12ms (Views: 3.8ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000033')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971a671fc614d9000035')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 13ms (Views: 6.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971a671fc614d9000037'), "name"=>"user12", "email"=>"user_admin12@example.com", "role"=>1, "password_salt"=>"$2a$10$V/l3B3lFvlRsj/fKDF3ibO", "password_hash"=>"$2a$10$V/l3B3lFvlRsj/fKDF3ibOlxTH5o9TUlf50Au0/8JE37oO43BdWsq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:38 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000037')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 19ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab971a671fc614d9000036'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (22ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000037')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.4ms)
Completed 200 OK in 36ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab971a671fc614d9000036" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab971a671fc614d9000036"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000036')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000037')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971a671fc614d9000036')}).limit(-1)
Completed 200 OK in 11ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d9000036')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000039'), "name"=>"user13", "email"=>"user_admin13@example.com", "role"=>1, "password_salt"=>"$2a$10$u0b4oZx8KNMvRwVh61mgSu", "password_hash"=>"$2a$10$u0b4oZx8KNMvRwVh61mgSutEUZODQNHndDANS15Zs/kEOi/FmIvDG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#new as HTML
MONGODB (31ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
Completed 200 OK in 35ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin13@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000039')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 6.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab971b671fc614d9000038'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000039')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 12ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab971b671fc614d9000038/edit" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50ab971b671fc614d9000038"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000038')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000039')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000038')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab971b671fc614d9000038')})
  Rendered news_agencies/_form.html.erb (6.8ms)
Completed 200 OK in 20ms (Views: 11.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000038')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900003b'), "name"=>"user14", "email"=>"user_admin14@example.com", "role"=>1, "password_salt"=>"$2a$10$3qyXADMdojVhmXGmH4d5Qu", "password_hash"=>"$2a$10$3qyXADMdojVhmXGmH4d5QuKFwgsfIHU./jY7KgbHAyvO3KenoT2gm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin14@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin14@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab971b671fc614d900003a'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 52ms (Views: 44.6ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50ab971b671fc614d900003a" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50ab971b671fc614d900003a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900003a')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d900003b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 10ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900003c'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900003c')}, {"$set"=>{"guid"=>"50ab971b671fc614d900003c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900003d'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900003e'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900003c'), "category_id"=>BSON::ObjectId('50ab971b671fc614d900003d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900003f'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900003f')}, {"$set"=>{"guid"=>"50ab971b671fc614d900003f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000040'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50ab971b671fc614d900003f"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50ab971b671fc614d900003f"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50ab971b671fc614d900003f", "_id"=>BSON::ObjectId('50ab971b671fc614d9000041')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000042'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900003f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000041')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000043'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000043')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000043"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000044'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000046'), "article_id"=>BSON::ObjectId('50ab971b671fc614d9000045'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000044')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000047'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000047')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000047"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000048'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000049'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000049')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000049"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900004a'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50ab971b671fc614d9000049"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50ab971b671fc614d9000049"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50ab971b671fc614d9000049", "_id"=>BSON::ObjectId('50ab971b671fc614d900004b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900004c'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900004c')}, {"$set"=>{"guid"=>"50ab971b671fc614d900004c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900004d'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000001')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000004')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000007')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000008')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d900000c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d9000011')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900003c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900003f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000043')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000047')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000049')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900004c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d700034a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000002')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d9000006')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d900000b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9718671fc614d900000d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d9000012')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d9000018')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d900001b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9719671fc614d9000021')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d9000027')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d900002d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d9000033')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971a671fc614d9000037')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000039')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900003b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000050'), "headline"=>"un1q", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000050')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000050"}})
MONGODB (21ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000050')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000051'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000051')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000051"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000051')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000052'), "headline"=>"uniq", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000052')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000052"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000052')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000053'), "headline"=>"un1que", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000053')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000053"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000053')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000053')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000055'), "name"=>"user15", "email"=>"user1@example.com", "role"=>5, "password_salt"=>"$2a$10$oHGzXShz4zsbmEpPaVcJWO", "password_hash"=>"$2a$10$oHGzXShz4zsbmEpPaVcJWO6A0RUU0qxdYIvcJXeSebrcMN8bq/KPm"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000056'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50ab971b671fc614d9000055'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000056')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000056"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000056')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000055')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000057'), "headline"=>"new_article_1", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000057')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000057"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000057')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000057')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000057')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000057')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000058'), "headline"=>"unique", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000058')}, {"$set"=>{"guid"=>"50ab971b671fc614d9000058"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d9000058')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000058')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900005a'), "name"=>"user16", "email"=>"user2@example.com", "role"=>5, "password_salt"=>"$2a$10$WmCcIdya0yNp/qik4tlZB.", "password_hash"=>"$2a$10$WmCcIdya0yNp/qik4tlZB.CMiZu8vw4hlS1U0LxQTNQzCf8Lyyvzi"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900005b'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50ab971b671fc614d900005a'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900005b')}, {"$set"=>{"guid"=>"50ab971b671fc614d900005b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900005b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900005a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900005d'), "headline"=>"no_user_article1", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900005d')}, {"$set"=>{"guid"=>"50ab971b671fc614d900005d"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900005d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900005e'), "headline"=>"asdf", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900005e')}, {"$set"=>{"guid"=>"50ab971b671fc614d900005e"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900005e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d7000339')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d700033b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab96fb671fc614d700033d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900003d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000040')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000041')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000044')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000048')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900004a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900004b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900004d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50ab971b671fc614d9000060')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000061'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000060')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50ab971b671fc614d9000062')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000063'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000062')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50ab971b671fc614d9000064')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000065'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000064')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "headline"=>"asdfqwer", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000066'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000060')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000067'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000062')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000068'), "article_id"=>BSON::ObjectId('50ab971b671fc614d900005f'), "category_id"=>BSON::ObjectId('50ab971b671fc614d9000064')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab971b671fc614d900005f')}, {"$set"=>{"guid"=>"50ab971b671fc614d900005f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d900006c'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900006c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000070'), "name"=>"Area Nueva"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971b671fc614d9000071'), "name"=>"user17", "email"=>"user_admin15@example.com", "role"=>1, "password_salt"=>"$2a$10$lo3jtGMQ8o4TPve4GGOcte", "password_hash"=>"$2a$10$lo3jtGMQ8o4TPve4GGOctekewaJIlK5TGiFhHRkWn61MdWGldWGQ."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:39 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:39 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000071')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000071')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 55ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971b671fc614d9000071')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 3.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000073'), "name"=>"user18", "email"=>"user3@example.com", "role"=>5, "password_salt"=>"$2a$10$vdCsyCPK6FIWMmq5zTxXJ.", "password_hash"=>"$2a$10$vdCsyCPK6FIWMmq5zTxXJ.L06wzpVaOYDj8GIykcu7Twar8qxun7m"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000074'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000075'), "user_id"=>BSON::ObjectId('50ab971c671fc614d9000073'), "category_id"=>BSON::ObjectId('50ab971c671fc614d9000074')}])
MONGODB (123ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000076'), "name"=>"user19", "email"=>"user4@example.com", "role"=>5, "password_salt"=>"$2a$10$Cyz5I.ReUJQ8eEW8/JJqDe", "password_hash"=>"$2a$10$Cyz5I.ReUJQ8eEW8/JJqDexFDxWBCGEUlVyUAWqsoRAdxdSjnAXFa"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000077'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50ab971c671fc614d9000076"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50ab971c671fc614d9000076"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50ab971c671fc614d9000076", "_id"=>BSON::ObjectId('50ab971c671fc614d9000078')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000079'), "user_id"=>BSON::ObjectId('50ab971c671fc614d9000076'), "category_id"=>BSON::ObjectId('50ab971c671fc614d9000078')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900007a'), "name"=>"user20", "email"=>"user5@example.com", "role"=>5, "password_salt"=>"$2a$10$Yya5v80PZXYfJQXtrOTzF.", "password_hash"=>"$2a$10$Yya5v80PZXYfJQXtrOTzF.sqzCTweo/bXOjzRAF4it23roEhUw/FG"}])
MONGODB (45ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900007b'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900007d'), "user_id"=>BSON::ObjectId('50ab971c671fc614d900007c'), "category_id"=>BSON::ObjectId('50ab971c671fc614d900007b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900007e'), "name"=>"user22", "email"=>"user7@example.com", "role"=>5, "password_salt"=>"$2a$10$lVEl8Bf.BgGuY6xhnqR5UO", "password_hash"=>"$2a$10$lVEl8Bf.BgGuY6xhnqR5UO2nmqR3JyzaVJBo3ZQgZimJ5SKhikg8."}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900007f'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000080'), "name"=>"user23", "email"=>"user8@example.com", "role"=>5, "password_salt"=>"$2a$10$YWZRWZH37sTVBAubm95klu", "password_hash"=>"$2a$10$YWZRWZH37sTVBAubm95kluOhOXlVzb6X/SZBdTRa7gBQhWMSGmWUq"}])
MONGODB (38ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000081'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50ab971c671fc614d9000080"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50ab971c671fc614d9000080"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50ab971c671fc614d9000080", "_id"=>BSON::ObjectId('50ab971c671fc614d9000082')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000083'), "name"=>"user24", "email"=>"user9@example.com", "role"=>5, "password_salt"=>"$2a$10$qrFauzyuRk4Nv.oYHhkoSe", "password_hash"=>"$2a$10$qrFauzyuRk4Nv.oYHhkoSeRNgP.0EYixH8H7smg9OJx4Uq0kSQuTu"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000084'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab96ed671fc614d7000009')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000087'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000087')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000088'), "slave"=>"Esclavo2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000088')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d9000089')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000089')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900008a'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900008a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900008c'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000070')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971c671fc614d900008f'), "name"=>"user25", "email"=>"user_admin16@example.com", "role"=>1, "password_salt"=>"$2a$10$YIw8/gzSX3DhkIe5vJNhb.", "password_hash"=>"$2a$10$YIw8/gzSX3DhkIe5vJNhb.Fy23CBDYdmyCmM8Ke0Iz9IP4IKWUiEu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:40 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 69ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971c671fc614d900008f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d9000092'), "name"=>"user26", "email"=>"user_admin17@example.com", "role"=>1, "password_salt"=>"$2a$10$S/sPDMPXuODb9Y0cAUCDsO", "password_hash"=>"$2a$10$S/sPDMPXuODb9Y0cAUCDsOgh9r1JjTpYmN4xXK4xvTMFzW5jakdYO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
Completed 200 OK in 4ms (Views: 2.5ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000092')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000092')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 56ms (Views: 46.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000092')}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 13ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d9000096'), "name"=>"user27", "email"=>"user_admin18@example.com", "role"=>1, "password_salt"=>"$2a$10$7a8M/v1L8bZeiEFlVmmNku", "password_hash"=>"$2a$10$7a8M/v1L8bZeiEFlVmmNku5SYmv053sIfApHTGqWEb/1c2MX/Zpg."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000096')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d9000095'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000096')}).limit(-1)
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 11ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d9000096')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d9000095')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d900009c'), "name"=>"user28", "email"=>"user_admin19@example.com", "role"=>1, "password_salt"=>"$2a$10$ACSjXclEjta7cR/HtxwNWe", "password_hash"=>"$2a$10$ACSjXclEjta7cR/HtxwNWepOpd2ieAaUj2pu1diCzVHI7hzFdAZiO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d900009c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 4.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d900009c')}).limit(-1)
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d900009c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50ab971d671fc614d90000a0')}])
Redirected to http://www.example.com/areas/50ab971d671fc614d90000a0
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas/50ab971d671fc614d90000a0" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab971d671fc614d90000a0"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d900009c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a0')}).limit(-1)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d90000a0')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d90000a2'), "name"=>"user29", "email"=>"user_admin20@example.com", "role"=>1, "password_salt"=>"$2a$10$fHmz4LyCgBM2ZWUQNE9SB.", "password_hash"=>"$2a$10$fHmz4LyCgBM2ZWUQNE9SB.FYk72kcqQlPKsDlMFw8WOnx1tzCOD8i"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a2')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 12ms (Views: 3.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d90000a8'), "name"=>"user30", "email"=>"user_admin21@example.com", "role"=>1, "password_salt"=>"$2a$10$hqorbBvHyO1CRibLD2eAuO", "password_hash"=>"$2a$10$hqorbBvHyO1CRibLD2eAuOuAORJl8esce5YMhiADfg8s0OR1TxFKS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:41 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:41 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971d671fc614d90000a7'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab971d671fc614d90000a7" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab971d671fc614d90000a7"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a7')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971d671fc614d90000a7')}).limit(-1)
Completed 200 OK in 9ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d90000a7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971e671fc614d90000aa'), "name"=>"user31", "email"=>"user_admin22@example.com", "role"=>1, "password_salt"=>"$2a$10$9Hqgp0ZC9eIR0aZbL12Ceu", "password_hash"=>"$2a$10$9Hqgp0ZC9eIR0aZbL12CeuxeNOBPV3DmPUX5dEeXdtRHvDOO8MOxu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin22@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin22@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000aa')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971e671fc614d90000a9'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000aa')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab971e671fc614d90000a9/edit" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50ab971e671fc614d90000a9"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000a9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000aa')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000a9')}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 12ms (Views: 4.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000a9')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab971e671fc614d90000ac'), "name"=>"user32", "email"=>"user_admin23@example.com", "role"=>1, "password_salt"=>"$2a$10$oNaaqzFRREg/Vly2d8Hezu", "password_hash"=>"$2a$10$oNaaqzFRREg/Vly2d8HezuxKQVENevlt20ahG0TT/bkmwZ0G0MZ/q"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin23@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin23@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ac')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 53ms (Views: 4.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab971e671fc614d90000ab'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ac')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.5ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50ab971e671fc614d90000ab" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50ab971e671fc614d90000ab"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ab')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ac')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ab')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000ab')})
Redirected to http://www.example.com/areas
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:43:42 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:42:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab971e671fc614d90000ac')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 10ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50ab971e671fc614d90000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000af')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab971e671fc614d90000b3'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000b3')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d900005f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab971e671fc614d90000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab971e671fc614d90000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000b6')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000b7')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab971e671fc614d90000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab971e671fc614d90000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000b8')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000b9')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab971e671fc614d90000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab971e671fc614d90000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"turbolinks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cache-digests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exploring-rubygems"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tagging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fnordmetric"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jruby-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"image-manipulation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bullet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ransack"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"miniprofiler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sidekiq"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-reputation-system"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exporting-csv-and-excel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"facebook-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"brakeman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ca')}])
MONGODB (41ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-session-hijacking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"squeel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"securing-an-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rest-api-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-rails-api-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rubber-and-amazon-ec2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"wizard-forms-with-wicked"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"queue-classic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrating-to-postgresql"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"datatables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"globalize3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"copycopter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"compass-css-sprites"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refinery-cms-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"better-sass-with-bourbon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"twitter-bootstrap-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeattr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passing-data-to-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rabl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jbuilder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"private-pub"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-urls-with-friendlyid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-html-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"oh-my-zsh"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"elasticsearch-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-identity"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-place-editing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-open-source"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-spree"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mercury-editor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"playing-with-pjax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-machines-with-vagrant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"soap-with-savon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"billing-with-stripe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"spork"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-admin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-with-sorcery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"foreman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pry-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"understanding-the-asset-pipeline"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-with-sunspot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mountable-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-time-web-requests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-i-test"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"remember-me-reset-password"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"geocoder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markdown-with-redcarpet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"resque"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-in-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"template-inheritance"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sass-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"coffeescript-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-streaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-1-overview"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"guard"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"client-side-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"trees-with-ancestry"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-javascript-with-jasmine"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"messaging-with-faye"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"decent-exposure"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"token-fields"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-specs-and-capybara"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n-backends"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"undo-with-paper-trail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-kaminari"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"carrierwave-file-uploads"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metrics-metrics-metrics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metawhere-metasearch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-from-scratch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"notifications-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-state"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"new-gem-with-bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gravatar"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beanstalkd-and-stalker"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-omniauth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-sort-paginate-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activerecord-relation-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongoid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-attr-accessible"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"engage-with-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000126')}])
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"inherited-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polling-for-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-table-columns"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"controllers-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfkit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multistep-forms"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"a-b-testing-with-a-bingo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"calendars"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-dynamic-delegator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"validations-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customizing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"introducing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"erb-blocks-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"syntax-highlighting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-mailer-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"unobtrusive-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"xss-protection-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-beta-and-rvm"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mobile-devices"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple-individually"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"my-favorite-web-apps-in-2009"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongodb-and-mongomapper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tableless-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authorization-with-cancan"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mechanize"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-nokogiri"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"embedded-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"declarative-authorization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pickle-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gemcutter-jeweler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cropping-images"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"include-vs-joins"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"finding-unused-css"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seed-data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seven-security-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"searchlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-and-bookmarks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-scrapi"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"touch-and-cache"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"delayed-job"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-with-authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"feed-parsing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metric-fu"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cron-in-ruby"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"self-referential-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tree-based-navigation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"three-profiling-tools"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"factories-not-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rspec-matchers-macros"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"webrat"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beginning-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polymorphic-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfs-with-prawn"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-3-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-middleware"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-metal"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"app-templates-in-rails-2-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-lists"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-express-checkout"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"integrating-active-merchant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-merchant-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-security"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-2-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"memoization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jquery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paperclip"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"capistrano-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"helpers-outside-views"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"going-back"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"monitoring-with-god"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-daemon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"starling-and-workling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rake-in-background"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"populating-a-database"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beta-invitations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passenger-in-development"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"non-active-record-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thinking-sphinx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"session-based-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"liquid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"semi-static-pages"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"selenium"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"endless-page"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails-with-git"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"anonymous-scopes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gem-dependencies"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tracking-attribute-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-zones-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gitting-rails-2-1-rc1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exception-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"site-wide-announcements"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"auto-complete-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-out-helper-object"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"5-view-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-partials"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-profiling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"analyzing-the-production-log"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"git-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-activeresource"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeresource-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"make-resourceful"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-long-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fragment-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-select-menus"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-rss-feeds"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"logging-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"yaml-configuration-file"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cookie-based-session-store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-basic-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fixtures-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simplify-views-with-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generate-named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-pdf-documents"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"destroy-without-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"scope-out"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"adding-an-environment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-controllers-with-rspec"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markaby-in-helper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restful-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rake-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"stopping-spam-with-akismet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-helper-modules"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-name-in-url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hacking-activerecord"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-without-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"optimistic-locking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-to-make-a-generator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"create-model-through-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-logger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cleaning-up-the-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-with-ruby-debug"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"handling-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"update-through-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"will-paginate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"reading-the-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"console-tricks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"two-many-to-many"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"catch-all-route"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rjs-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-with-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"with-options"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"conditional-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"blocks-in-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customize-field-error"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multibutton-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subversion-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rest-actions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-plugin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-in-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formatting-time"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-page-title"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"group-by-month"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-groups-of"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cross-site-scripting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hackers-love-mass-assignment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sql-injection"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-stack-trace"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"counter-cache-column"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"eager-loading"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"super-simple-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restricting-access"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"where-administration-goes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001fa')}])
MONGODB (2ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"looping-through-flash"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"habtm-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fun-with-find-conditions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"performing-calculations-on-models"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d90001ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-model-in-session"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000201')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000203')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"filtering-sensitive-logs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"layouts-and-content-for"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"all-about-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"shortcut-blocks-with-symbol-to-proc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000207')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"using-with-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"move-find-into-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d9000209')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"find-through-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-find-by-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900020b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-with-instance-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab971f671fc614d900020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900020f'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900020d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mashable is Hiring in Editorial, Ad Operations and Sales", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>\n\n<p><a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QUJjgFYntEk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QUJjgFYntEk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900020d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000211'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Facebook"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Facebook", "_id"=>BSON::ObjectId('50ab9721671fc614d9000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000213'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facebook mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facebook mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facebook mobile", "_id"=>BSON::ObjectId('50ab9721671fc614d9000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000215'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50ab9721671fc614d9000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000217'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"share"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"share"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"share", "_id"=>BSON::ObjectId('50ab9721671fc614d9000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000219'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50ab9721671fc614d900021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900021b'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"tablets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"tablets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"tablets", "_id"=>BSON::ObjectId('50ab9721671fc614d900021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900021d'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000210'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Share on Facebook Mobile", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/bCVN5O3R1sdUj8Nz8_VSKYR81PQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wxmdTmw-9ao\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wxmdTmw-9ao/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497885"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900021f'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900021e'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexis ohanian"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexis ohanian"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexis ohanian", "_id"=>BSON::ObjectId('50ab9721671fc614d9000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000221'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900021e'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"reddit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"reddit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"reddit", "_id"=>BSON::ObjectId('50ab9721671fc614d9000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000223'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900021e'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50ab9721671fc614d9000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000225'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900021e'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexis Ohanian: 10 Great TEDTalks About the Promise of the Internet", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/RJMYfUK8P9A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/RJMYfUK8P9A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497885", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497771"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000227'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000226'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"philippe starck"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"philippe starck"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"philippe starck", "_id"=>BSON::ObjectId('50ab9721671fc614d9000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000229'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000226'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900022a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000226'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Philippe Starck: 11 Truly Thrilling Talks", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QX78P8L9r9w\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QX78P8L9r9w/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497771", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1502465"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900022c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900022b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"jesse draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"jesse draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"jesse draper", "_id"=>BSON::ObjectId('50ab9721671fc614d900022d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900022e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900022b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900022d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900022f'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900022b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Jesse Draper: 7 Inspiring TEDTalks That Will Pull You In", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ngq8LrQvSQw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ngq8LrQvSQw/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502465", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900022b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000231'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000230'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"daryl hannah"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"daryl hannah"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"daryl hannah", "_id"=>BSON::ObjectId('50ab9721671fc614d9000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000233'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000230'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000234'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000230'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Daryl Hannah: 11 TEDTalks That Inspired Me to Activism", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/TRKjzEhT5fs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/TRKjzEhT5fs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1506023"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000236'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000235'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Benetton"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Benetton"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Benetton", "_id"=>BSON::ObjectId('50ab9721671fc614d9000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000238'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000235'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"privacy"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"privacy"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"privacy", "_id"=>BSON::ObjectId('50ab9721671fc614d9000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900023a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000235'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50ab9721671fc614d900023b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900023c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000235'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900023b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Benetton’s Mannequins Spy on You While You Shop", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mdWyZKJScQz6OwpbBkqib1rhmhw/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XTyt3MSyw-o\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XTyt3MSyw-o/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1506023", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505721"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900023e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900023d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (48ms) rails3_mongoid_devise_test['categories'].find({:name=>"John McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"John McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"John McAfee", "_id"=>BSON::ObjectId('50ab9721671fc614d900023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000240'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900023d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"McAfee", "_id"=>BSON::ObjectId('50ab9721671fc614d9000241')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000242'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900023d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000241')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"police"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"police"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"police", "_id"=>BSON::ObjectId('50ab9721671fc614d9000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000244'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900023d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Murder Suspect McAfee Blogs While on the Run From Police", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/1y7l3OA35KoWMnDVa5kYt7R08Wg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/vD6ACy--fTg\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/vD6ACy--fTg/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505721", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505977"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000246'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000245'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50ab9721671fc614d9000247')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000248'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000245'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000247')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"htc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"htc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"htc", "_id"=>BSON::ObjectId('50ab9721671fc614d9000249')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900024a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000245'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000249')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"HTC’s Peter Chou: We Don’t Pay Apple $6-$8 per Android Phone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cpL08S4Ur8k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cpL08S4Ur8k/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505977", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000245')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900024c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900024b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Science"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Science"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Science", "_id"=>BSON::ObjectId('50ab9721671fc614d900024d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900024e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900024b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900024d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charger", "_id"=>BSON::ObjectId('50ab9721671fc614d900024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000250'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900024b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"wireless charging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"wireless charging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"wireless charging", "_id"=>BSON::ObjectId('50ab9721671fc614d9000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000252'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900024b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Friction May Someday Charge Your Cellphone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/hosSQiGVu44\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/hosSQiGVu44/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504677"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000254'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000253'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"e-textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"e-textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"e-textbooks", "_id"=>BSON::ObjectId('50ab9721671fc614d9000255')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000256'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000253'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000255')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"education"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"education"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"education", "_id"=>BSON::ObjectId('50ab9721671fc614d9000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000258'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000253'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"textbooks", "_id"=>BSON::ObjectId('50ab9721671fc614d9000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900025a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000253'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"New E-Textbooks Report Student Study Habits", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1E39Q2oobHc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1E39Q2oobHc/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504677", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505897"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900025c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900025b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Google Maps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Google Maps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Google Maps", "_id"=>BSON::ObjectId('50ab9721671fc614d900025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900025e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900025b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"asia"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"asia"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"asia", "_id"=>BSON::ObjectId('50ab9721671fc614d900025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000260'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900025b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Google Maps Helps Man Walk 5,000 Miles Across Asia [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jRNYy92fxE0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jRNYy92fxE0/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505897", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900025b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505833"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000262'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000261'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Windows Phone 7.8"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Windows Phone 7.8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Windows Phone 7.8", "_id"=>BSON::ObjectId('50ab9721671fc614d9000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000264'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000261'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"windows phone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"windows phone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"windows phone", "_id"=>BSON::ObjectId('50ab9721671fc614d9000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000266'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000261'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Windows Phone 7 Handsets Will Be Updated Past 7.8 [REPORT]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/X-VavXrE0L4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/X-VavXrE0L4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505901"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000268'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000267'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cherokee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cherokee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cherokee", "_id"=>BSON::ObjectId('50ab9721671fc614d9000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900026a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000267'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"gmail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"gmail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"gmail", "_id"=>BSON::ObjectId('50ab9721671fc614d900026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900026c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000267'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Gmail Gets Support for Cherokee, Raises Language Count to 57", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Pn5bt4Vo8ek\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Pn5bt4Vo8ek/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505901", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505869"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900026e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900026d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Seqinetic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Seqinetic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Seqinetic", "_id"=>BSON::ObjectId('50ab9721671fc614d900026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000270'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900026d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"glasses"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"glasses"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"glasses", "_id"=>BSON::ObjectId('50ab9721671fc614d9000271')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000272'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900026d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000271')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sun"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sun"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sun", "_id"=>BSON::ObjectId('50ab9721671fc614d9000273')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000274'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900026d'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000273')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Seqinetic ‘Sun’ Glasses Lets You Wear Daylight to Fight Winter Blues [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/0-jmnwG0f9Y\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/0-jmnwG0f9Y/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505869", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900026d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504489"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000276'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"android applications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"android applications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"android applications", "_id"=>BSON::ObjectId('50ab9721671fc614d9000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000278'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50ab9721671fc614d9000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900027a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food apps", "_id"=>BSON::ObjectId('50ab9721671fc614d900027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900027c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone apps", "_id"=>BSON::ObjectId('50ab9721671fc614d900027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900027e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50ab9721671fc614d900027f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000280'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000275'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900027f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"6 Tech Fixes for Your Thanksgiving", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5IjFJznntVo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5IjFJznntVo/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504489", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504453"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000282'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000281'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50ab9721671fc614d9000283')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000284'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000281'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000283')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50ab9721671fc614d9000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000286'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000281'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50ab9721671fc614d9000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000288'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000281'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Nintendo’s Wii U: First Impressions", "deck"=>"<br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"      <br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ea-21714_ko\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ea-21714_ko/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504453", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505695"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900028a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000289'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50ab9721671fc614d900028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900028c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000289'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50ab9721671fc614d900028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900028e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000289'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iTunes Store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iTunes Store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iTunes Store", "_id"=>BSON::ObjectId('50ab9721671fc614d900028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000290'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000289'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"AC/DC Is Finally Available on iTunes", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/2y_Rhvchos4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/2y_Rhvchos4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505695", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505563"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000292'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000291'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50ab9721671fc614d9000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000294'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000291'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Watercooler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Watercooler", "_id"=>BSON::ObjectId('50ab9721671fc614d9000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000296'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000291'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"storycorps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"storycorps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"storycorps", "_id"=>BSON::ObjectId('50ab9721671fc614d9000297')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d9000298'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000291'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000297')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50ab9721671fc614d9000299')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900029a'), "article_id"=>BSON::ObjectId('50ab9721671fc614d9000291'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000299')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Tells Heartbreaking Story of Grandfather’s Lost Building [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5BBnKcJneYs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5BBnKcJneYs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505563", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d9000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503817"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900029c'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900029b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"CEOs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"CEOs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"CEOs", "_id"=>BSON::ObjectId('50ab9721671fc614d900029d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d900029e'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900029b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900029d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charts", "_id"=>BSON::ObjectId('50ab9721671fc614d900029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002a0'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900029b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"intel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"intel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"intel", "_id"=>BSON::ObjectId('50ab9721671fc614d90002a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002a2'), "article_id"=>BSON::ObjectId('50ab9721671fc614d900029b'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"These 3 Charts Tell the Story of Intel’s Otellini Era", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jQNLI4qMgQk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jQNLI4qMgQk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503817", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d900029b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505535"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002a4'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50ab9721671fc614d90002a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002a6'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ufc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ufc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ufc", "_id"=>BSON::ObjectId('50ab9721671fc614d90002a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002a8'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"CBS Analyst Apologizes for ‘Homoerotic’ UFC Tweets", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qw0srOLkfR8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qw0srOLkfR8/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505535", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505281"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002aa'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a9'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ab'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a9'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"time-lapse"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"time-lapse"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"time-lapse", "_id"=>BSON::ObjectId('50ab9721671fc614d90002ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ad'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002a9'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Get Your Kicks With Time-Lapse of Route 66", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/rcp2wfBCCAE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/rcp2wfBCCAE/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505281", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504825"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002af'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ae'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"NBA"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"NBA"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"NBA", "_id"=>BSON::ObjectId('50ab9721671fc614d90002b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002b1'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ae'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002b2'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ae'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How an NBA Star’s YouTube Series Gives Fans Inside Access [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/6U33Ff5KPoY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/6U33Ff5KPoY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504825", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505131"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002b4'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002b3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"U.S. government"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"U.S. government"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"U.S. government", "_id"=>BSON::ObjectId('50ab9721671fc614d90002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002b6'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002b3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"online petitions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"online petitions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"online petitions", "_id"=>BSON::ObjectId('50ab9721671fc614d90002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002b8'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002b3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the white house"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the white house"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the white house", "_id"=>BSON::ObjectId('50ab9721671fc614d90002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ba'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002b3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"we the people"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"we the people"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"we the people", "_id"=>BSON::ObjectId('50ab9721671fc614d90002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002bc'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002b3'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Non-Secession White House Petitions Surge", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uGiX27dIfZY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uGiX27dIfZY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505131", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505411"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002be'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002bd'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Good"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Good"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Good", "_id"=>BSON::ObjectId('50ab9721671fc614d90002bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c0'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002bd'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"World"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"World", "_id"=>BSON::ObjectId('50ab9721671fc614d90002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c2'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002bd'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"africa"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"africa"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"africa", "_id"=>BSON::ObjectId('50ab9721671fc614d90002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c4'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002bd'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mit", "_id"=>BSON::ObjectId('50ab9721671fc614d90002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c6'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002bd'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Self-Taught Teen Prodigy From Sierra Leone Wows MIT Engineers [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WRw_FlQD-JQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WRw_FlQD-JQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505411", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503733"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c8'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002c7'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002c9'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002c7'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Media"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Media", "_id"=>BSON::ObjectId('50ab9721671fc614d90002ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002cb'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002c7'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"india"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"india"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"india", "_id"=>BSON::ObjectId('50ab9721671fc614d90002cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002cd'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002c7'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mumbai Women Arrested for Political Facebook Comment", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7gj3dCs6frQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7gj3dCs6frQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503733", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504219"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002cf'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ce'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"biking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"biking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"biking", "_id"=>BSON::ObjectId('50ab9721671fc614d90002d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002d1'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ce'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"exercise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"exercise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"exercise", "_id"=>BSON::ObjectId('50ab9721671fc614d90002d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002d3'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ce'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50ab9721671fc614d90002d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002d5'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002ce'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iPhone-Syncing Bike Mount Makes Your Apps More Accessible", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/tW2JaIvb80A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/tW2JaIvb80A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504219", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505129"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002d7'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002d6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002d8'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002d6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000247')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mac osx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mac osx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mac osx", "_id"=>BSON::ObjectId('50ab9721671fc614d90002d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002da'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002d6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How Should Apple Name the Next Mac OS Series? [POLL]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WVVGLXSINNs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WVVGLXSINNs/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505129", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504081"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002dc'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cybercrime Series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cybercrime Series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cybercrime Series", "_id"=>BSON::ObjectId('50ab9721671fc614d90002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002de'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mobile", "_id"=>BSON::ObjectId('50ab9721671fc614d90002df')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e0'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002df')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cybercrime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cybercrime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cybercrime", "_id"=>BSON::ObjectId('50ab9721671fc614d90002e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e2'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e3'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d9000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50ab9721671fc614d90002e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e5'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002db'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Are You Safe From Cybercrime?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ypOUOA5N9r4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ypOUOA5N9r4/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504081", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504073"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e7'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002e6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d900020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50ab9721671fc614d90002e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002e9'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002e6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ea'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002e6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"middle east"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"middle east"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"middle east", "_id"=>BSON::ObjectId('50ab9721671fc614d90002eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ec'), "article_id"=>BSON::ObjectId('50ab9721671fc614d90002e6'), "category_id"=>BSON::ObjectId('50ab9721671fc614d90002eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"25 Must-Follow Twitter Accounts for Gaza-Israel Conflict Updates", "deck"=>"<br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>", "story"=>"      <br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/VzsZNAX-D2g\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/VzsZNAX-D2g/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504073", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab9721671fc614d90002e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000ba')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000bb')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90000ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000100')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000101')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000102')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000103')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000104')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000105')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000106')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000107')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000108')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000109')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900010f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000110')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000111')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000112')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000113')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000114')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000115')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000116')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000117')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000118')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000119')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900011f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000120')})
MONGODB [DEBUG] cursor.refresh() for cursor 5670574574715427590
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000121')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000122')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000123')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000124')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000125')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000126')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000127')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000128')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000129')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900012f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000130')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000131')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000132')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000133')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000134')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000135')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000136')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000137')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000138')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000139')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900013f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000140')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000141')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000142')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000143')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000144')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000145')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000146')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000147')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000148')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000149')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900014f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000150')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000151')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000152')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000153')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000154')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000155')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000156')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000157')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000158')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000159')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900015f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000160')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000161')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000162')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000163')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000164')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000165')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000166')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000167')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000168')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000169')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900016f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000170')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000171')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000172')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000173')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000174')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000175')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000176')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000177')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000178')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000179')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900017f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000180')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000181')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000182')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000183')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000184')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000185')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000186')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000187')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000188')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000189')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900018f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000190')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000191')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000192')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000193')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000194')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000195')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000196')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000197')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000198')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000199')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900019f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d90001ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000200')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000201')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000202')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000203')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000204')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000205')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000206')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000207')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000208')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d9000209')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900020a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900020b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab971f671fc614d900020c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000226')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000230')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000235')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900023d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900024b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000253')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900025b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000261')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000267')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900026d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000275')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000289')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000291')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900029b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900020d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000210')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900021e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900022b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000245')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000281')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002e6')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab9721671fc614d90002ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab9721671fc614d90002ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002ef'), "name"=>"user33", "email"=>"user10@example.com", "role"=>5, "password_salt"=>"$2a$10$jV0uI8CkeUdOSjuIPRRGku", "password_hash"=>"$2a$10$jV0uI8CkeUdOSjuIPRRGkuLN3qajiLFM0dONWOWFqS9t4wcfyMbxS"}])
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002f0'), "name"=>"user34", "email"=>"user_admin24@example.com", "role"=>1, "password_salt"=>"$2a$10$BKydT7gJI7SMhSzB1OV0WO", "password_hash"=>"$2a$10$BKydT7gJI7SMhSzB1OV0WOI37dQDn8VjCtzJBMrHaNotZhUJ5y/tG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:45 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:45 UTC}})
Completed 200 OK in 45ms (Views: 44.4ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:45 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin24@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:45 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin24@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:45 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:45 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9721671fc614d90002f0')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002f1'), "name"=>"user35", "email"=>"user11@example.com", "role"=>5, "password_salt"=>"$2a$10$3uElnNRYvBy9JNwYHUQ.rO", "password_hash"=>"$2a$10$3uElnNRYvBy9JNwYHUQ.rOABD.dA2rPkCD2vGD7ui/.ID0jQywlZy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:45 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:45 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:45 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user11@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:45 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user11@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9721671fc614d90002f2'), "name"=>"user36", "email"=>"user12@example.com", "role"=>5, "password_salt"=>"$2a$10$c/VtNR4hR67pBS8s84BxQe", "password_hash"=>"$2a$10$c/VtNR4hR67pBS8s84BxQeA.AWO/40Tnku.vfV7TiL8dwE14cswo."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9721671fc614d90002f2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f3'), "name"=>"user37", "email"=>"user13@example.com", "role"=>5, "password_salt"=>"$2a$10$kVHZQeMcEF3aVLYQ/Jk5Uu", "password_hash"=>"$2a$10$kVHZQeMcEF3aVLYQ/Jk5UuuawaDfi1HVrbGaOiJKUNeTLvumMOxcy"}])


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f5'), "name"=>"user38", "email"=>"user14@example.com", "role"=>5, "password_salt"=>"$2a$10$mT0JyRf4rXhOncm7paBZd.", "password_hash"=>"$2a$10$mT0JyRf4rXhOncm7paBZd.4gGvjEyog2EUmTxGm9Q5Hw5xTsyM9sW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f6'), "name"=>"user39", "email"=>"user15@example.com", "role"=>5, "password_salt"=>"$2a$10$V55GygM9pISXzbyMZQQ/b.", "password_hash"=>"$2a$10$V55GygM9pISXzbyMZQQ/b.zbdzy6Q7b.rXS45T7TXt9tXH.c4F0Ay"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user15@example.com"}).limit(-1)
Completed 200 OK in 75ms (Views: 2.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f7'), "name"=>"user40", "email"=>"user16@example.com", "role"=>5, "password_salt"=>"$2a$10$1N.lQ20tivfZ1VOZpI9O3u", "password_hash"=>"$2a$10$1N.lQ20tivfZ1VOZpI9O3uZLgfm8ty7/xFjq8YXtbhRaw7xvy3a9m"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9722671fc614d90002f7')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f8'), "name"=>"user41", "email"=>"user17@example.com", "role"=>5, "password_salt"=>"$2a$10$3zVUP2OJwkIX.L1jlMGCb.", "password_hash"=>"$2a$10$3zVUP2OJwkIX.L1jlMGCb.tUPlb0hkpxLPfzfBbfgzgiHLORgPQFG"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002f9'), "name"=>"user42", "email"=>"user18@example.com", "role"=>5, "password_salt"=>"$2a$10$T0JX2GnOYallHe.A7zVLje", "password_hash"=>"$2a$10$T0JX2GnOYallHe.A7zVLje1Fn41sdEKtCUo7aNAo7oeEsuNcBVpcK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9722671fc614d90002f9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9722671fc614d90002fa'), "name"=>"user43", "email"=>"user19@example.com", "role"=>5, "password_salt"=>"$2a$10$cfQV4OPgh0UFx1ViKAzYd.", "password_hash"=>"$2a$10$cfQV4OPgh0UFx1ViKAzYd.sp0wFzVhAzlEXSjn4PL.sw.582cUdgm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:43:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:42:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9722671fc614d90002fa')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (41ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 53ms (Views: 44.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d90002fc'), "name"=>"user44", "email"=>"user20@example.com", "role"=>5, "password_salt"=>"$2a$10$ubQmzP.TkImpY6FWzRX02e", "password_hash"=>"$2a$10$ubQmzP.TkImpY6FWzRX02enDyLG8g/pVhSC0em4QUM9txzr/fXTUy"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000071')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000073')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000076')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900007a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900007e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000080')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000083')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900008f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d9000092')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d9000096')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d900009c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d90000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971d671fc614d90000a8')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000aa')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab971e671fc614d90000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ef')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002f0')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002f1')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002f2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f3')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f5')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f6')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f8')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002f9')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9722671fc614d90002fa')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d90002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d9000300'), "name"=>"user45", "email"=>"user21@example.com", "role"=>5, "password_salt"=>"$2a$10$IdskScZIvaEL9II2TxrOgu", "password_hash"=>"$2a$10$IdskScZIvaEL9II2TxrOguD7ELUmnHZhTZ9cazQm7vEh0IJ3ZKMLG"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d9000301'), "name"=>"user46", "email"=>"asf.as@fac.cs", "role"=>1, "password_salt"=>"$2a$10$lrG7KWIggN1owM4RSBw3RO", "password_hash"=>"$2a$10$lrG7KWIggN1owM4RSBw3ROSzbqyENNgYQaUXTwbuEow8ro9f1oBmC"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d9000300')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d9000301')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d9000307'), "name"=>"user47", "email"=>"user22@example.com", "role"=>5, "password_salt"=>"$2a$10$ymV14.baiiX7IM8fYJLhTO", "password_hash"=>"$2a$10$ymV14.baiiX7IM8fYJLhTOHCq1Dubc657WKrVA3goUeuUfTMw8mOi"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d9000307')})


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d900030b'), "name"=>"user48", "email"=>"user23@example.com", "role"=>5, "password_salt"=>"$2a$10$b4XMR5guVfZxN1nw4vNaCO", "password_hash"=>"$2a$10$b4XMR5guVfZxN1nw4vNaCOoeN4QOiveNzJjmEVfhKGRA3/LtNY5Gy"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 11ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started GET "/users/50ab9723671fc614d900030b" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab9723671fc614d900030b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9723671fc614d900030b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9723671fc614d900030b')}).limit(-1)
Completed 200 OK in 10ms (Views: 2.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d900030b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d900030f'), "name"=>"user49", "email"=>"user24@example.com", "role"=>5, "password_salt"=>"$2a$10$RwhtJa8qe.36ZE61obKMse", "password_hash"=>"$2a$10$RwhtJa8qe.36ZE61obKMseQm0Vpssea.6ZzhdWCROwHQ632ncmxaa"}])


Started GET "/users/50ab9723671fc614d900030f?method=delete" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50ab9723671fc614d900030f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9723671fc614d900030f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9723671fc614d900030f')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d900030f')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user50", "email"=>"user25@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 14ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d900031a'), "name"=>"user51", "email"=>"mi_random@mail.co", "role"=>15, "password_salt"=>"$2a$10$0UxBi.YCRJS7pRuyGDGVBO", "password_hash"=>"$2a$10$0UxBi.YCRJS7pRuyGDGVBORISZ2xRTX6MFRCCNUr7MePTxrkK2Hr6"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user51", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d900031a')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 52ms (Views: 45.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 14ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:47 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user52", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab9723671fc614d9000331'), "name"=>"user53", "email"=>"user27@example.com", "role"=>5, "password_salt"=>"$2a$10$Gv5x0PNQlMrSCHWGDeFIte", "password_hash"=>"$2a$10$Gv5x0PNQlMrSCHWGDeFIteI7N178uHtf6wuEH6J/Vu8l/5o.M2zkK"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 51ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50ab9723671fc614d9000331" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50ab9723671fc614d9000331"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9723671fc614d9000331')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy"})
Redirected to http://www.example.com/
Completed 302 Found in 9ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 11ms (Views: 3.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9723671fc614d9000331')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user54", "email"=>"user28@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user55", "email"=>"user29@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user55", "email"=>"user29@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50ab9724671fc614d9000344'), "password_salt"=>"$2a$10$BnbCASiLQB0re9z8hQokSu", "password_hash"=>"$2a$10$BnbCASiLQB0re9z8hQokSuLJ.zlld/H8nCf4buFMSRwB3Bbqk6fY."}])
Redirected to http://www.example.com/users/50ab9724671fc614d9000344
Completed 302 Found in 77ms (ActiveRecord: 0.0ms)


Started GET "/users/50ab9724671fc614d9000344" for 127.0.0.1 at 2012-11-20 11:43:48 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab9724671fc614d9000344"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:42:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9724671fc614d9000344')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9724671fc614d9000344')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab9724671fc614d9000344')}).limit(-1)
Completed 200 OK in 9ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900029d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900029f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002a1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002a5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002a7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ac')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002b0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002bf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002c1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002c3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002cc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000257')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000259')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900025d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900025f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000269')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900026b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900026f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000271')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000279')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900027b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900027d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000283')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000285')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000287')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900028d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000293')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000295')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000297')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000299')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000060')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000062')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971b671fc614d9000064')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000074')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000077')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000078')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900007b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900007f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000081')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000082')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d9000084')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900020e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000214')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000216')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000218')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900021c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000220')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000222')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000224')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000228')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900022d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000232')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000237')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000239')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900023b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900023f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000241')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000243')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000247')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000249')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900024d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900024f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000251')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000255')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000263')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000265')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000273')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d9000277')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900027f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900028b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d900028f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002b5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002b7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002b9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002bb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ca')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002d0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002d2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002d4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002d9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002dd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002df')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002e1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002e4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002e8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002eb')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab9724671fc614d9000345'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9724671fc614d9000345')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab9724671fc614d9000347'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9724671fc614d9000347')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab9724671fc614d9000349'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab9724671fc614d9000349')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ed')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab9721671fc614d90002ee')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97a9671fc614db000002'), "name"=>"user1", "email"=>"user_admin1@example.com", "role"=>1, "password_salt"=>"$2a$10$9zfrl1vlAfNF7swDcVNZ5.", "password_hash"=>"$2a$10$9zfrl1vlAfNF7swDcVNZ5.c7FgAp8a4cXUT6Wlqw4lc0fSUrWQwZW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:01 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:01 UTC}})
  Rendered sessions/new.html.erb within layouts/application (38.7ms)
Completed 200 OK in 52ms (Views: 49.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:01 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97a9671fc614db000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (6.4ms)
Completed 200 OK in 19ms (Views: 10.2ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97a9671fc614db000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db000004')})
  Rendered news_agencies/_form.html.erb (9.3ms)
  Rendered news_agencies/new.html.erb within layouts/application (10.3ms)
Completed 200 OK in 21ms (Views: 13.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97a9671fc614db000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50ab97aa671fc614db000006')}])
Redirected to http://www.example.com/news_agencies/50ab97aa671fc614db000006
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab97aa671fc614db000006" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab97aa671fc614db000006"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000006')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97a9671fc614db000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000006')}).limit(-1)
  Rendered news_agencies/show.html.erb within layouts/application (1.0ms)
Completed 200 OK in 50ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db000006')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97aa671fc614db000008'), "name"=>"user2", "email"=>"user_admin2@example.com", "role"=>1, "password_salt"=>"$2a$10$imy3dEMPRpqvFP7EqGoVY.", "password_hash"=>"$2a$10$imy3dEMPRpqvFP7EqGoVY.vc4MnR9iS/B7y9r0lxQvtn5UY2mWUUa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin2@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin2@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000008')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000008')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db00000a')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 13ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000008')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db00000c')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 15ms (Views: 6.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97aa671fc614db00000e'), "name"=>"user3", "email"=>"user_admin3@example.com", "role"=>1, "password_salt"=>"$2a$10$HpN2giT0eVnFZrxVw6svDe", "password_hash"=>"$2a$10$HpN2giT0eVnFZrxVw6svDeZD/grRxQb7.dtgAsdNI7GSo7wvtRjaa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin3@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin3@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00000e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 52ms (Views: 42.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00000e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db000010')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 13ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00000e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db000012')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 15ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97aa671fc614db000014'), "name"=>"user4", "email"=>"user_admin4@example.com", "role"=>1, "password_salt"=>"$2a$10$kPWADUJqUZfyqPp9Q.PRxO", "password_hash"=>"$2a$10$kPWADUJqUZfyqPp9Q.PRxOjnNCD7wmbsWwq6DQ4/zUmOBHs3lkHCu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin4@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin4@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000014')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97aa671fc614db000013'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000014')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db000016')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 52ms (Views: 44.8ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db000014')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97aa671fc614db000018')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 15ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db000013')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97aa671fc614db00001a'), "name"=>"user5", "email"=>"user_admin5@example.com", "role"=>1, "password_salt"=>"$2a$10$PBF/2QgINyqlUQDYcSSBlO", "password_hash"=>"$2a$10$PBF/2QgINyqlUQDYcSSBlOPULUfdE1JnlaLbfmXIav/n1ctChI8P."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin5@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00001a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00001a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 14ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-20 11:46:02 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-20 14:45:02 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97aa671fc614db00001a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97ab671fc614db00001c')})
  Rendered news_agencies/_form.html.erb (4.0ms)
Completed 200 OK in 13ms (Views: 6.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00001e'), "name"=>"user6", "email"=>"user_admin6@example.com", "role"=>1, "password_salt"=>"$2a$10$KZFG/ryM3j1xCO/eoC12/.", "password_hash"=>"$2a$10$KZFG/ryM3j1xCO/eoC12/.3V2XF/1R7vDcyScK7tI7/0JFmqBNyxS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin6@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin6@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db00001e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 53ms (Views: 44.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97ab671fc614db00001d'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex"})
Redirected to http://www.example.com/
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00001d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000021'), "name"=>"user7", "email"=>"user_admin7@example.com", "role"=>1, "password_salt"=>"$2a$10$oTAU78CZs9i5En8rTeuAIe", "password_hash"=>"$2a$10$oTAU78CZs9i5En8rTeuAIemUsqCVB8ILDzZOJ3FQwYF9Wccw3byu6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin7@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin7@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97ab671fc614db000020'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.3ms)
Completed 200 OK in 12ms (Views: 4.5ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab97ab671fc614db000020/edit" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50ab97ab671fc614db000020"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000020')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000020')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50ab97ab671fc614db000020')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 15ms (Views: 7.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000020')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000023'), "name"=>"user8", "email"=>"user_admin8@example.com", "role"=>1, "password_salt"=>"$2a$10$OQoxc3K/jKqVxQLp/qNsiO", "password_hash"=>"$2a$10$OQoxc3K/jKqVxQLp/qNsiOlErHlKOn83siTdYWag0Ojz3WIeyShdG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin8@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin8@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97ab671fc614db000022'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 52ms (Views: 44.5ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50ab97ab671fc614db000022" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50ab97ab671fc614db000022"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000022')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000023')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000022')}).limit(-1)
Completed 200 OK in 10ms (Views: 2.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000022')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000025'), "name"=>"user9", "email"=>"user_admin9@example.com", "role"=>1, "password_salt"=>"$2a$10$N.6jqHF5cg6rZutIGcGLnu", "password_hash"=>"$2a$10$N.6jqHF5cg6rZutIGcGLnuoBalx1tQ/M5DzXFxwt3FTeSy.jGP4w6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97ab671fc614db000024'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 11ms (Views: 3.7ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50ab97ab671fc614db000024" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50ab97ab671fc614db000024"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000024')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000024')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000024')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-20 11:46:03 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-20 14:45:03 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97ab671fc614db000025')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 10ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000026'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000026')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000026"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000027'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50ab97ab671fc614db000026"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50ab97ab671fc614db000026"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50ab97ab671fc614db000026", "_id"=>BSON::ObjectId('50ab97ab671fc614db000028')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000029'), "article_id"=>BSON::ObjectId('50ab97ab671fc614db000026'), "category_id"=>BSON::ObjectId('50ab97ab671fc614db000028')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00002a'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db00002a')}, {"$set"=>{"guid"=>"50ab97ab671fc614db00002a"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00002b'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00002c'), "article_id"=>BSON::ObjectId('50ab97ab671fc614db00002a'), "category_id"=>BSON::ObjectId('50ab97ab671fc614db00002b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00002d'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db00002d')}, {"$set"=>{"guid"=>"50ab97ab671fc614db00002d"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00002e'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000030'), "article_id"=>BSON::ObjectId('50ab97ab671fc614db00002f'), "category_id"=>BSON::ObjectId('50ab97ab671fc614db00002e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000031'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000031')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000031"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000032'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50ab97ab671fc614db000031"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50ab97ab671fc614db000031"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50ab97ab671fc614db000031", "_id"=>BSON::ObjectId('50ab97ab671fc614db000033')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000034'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000034')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000034"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000035'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000036'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000036')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000036"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000037'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000026')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00002a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00002d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000031')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000034')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000036')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab9724671fc614d9000344')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97a9671fc614db000002')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db000008')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db00000e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db000014')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97aa671fc614db00001a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00001e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000021')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000023')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000025')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000038'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000038')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000038"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000038')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00003a'), "headline"=>"uniq", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db00003a')}, {"$set"=>{"guid"=>"50ab97ab671fc614db00003a"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00003a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00003b'), "headline"=>"un1q", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db00003b')}, {"$set"=>{"guid"=>"50ab97ab671fc614db00003b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00003b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00003e'), "name"=>"user10", "email"=>"user1@example.com", "role"=>5, "password_salt"=>"$2a$10$qF71oaLShRRf8581/G0rp.", "password_hash"=>"$2a$10$qF71oaLShRRf8581/G0rp.26xHZwFKmzt21JcU3hv2bgE5fWfFXXu"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db00003f'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50ab97ab671fc614db00003e'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db00003f')}, {"$set"=>{"guid"=>"50ab97ab671fc614db00003f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00003f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00003e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000040'), "headline"=>"new_article_1", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000040')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000040"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000040')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000040')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000040')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000040')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ab671fc614db000041'), "headline"=>"un1que", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000041')}, {"$set"=>{"guid"=>"50ab97ab671fc614db000041"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ab671fc614db000041')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000041')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000042'), "headline"=>"asdf", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000042')}, {"$set"=>{"guid"=>"50ab97ac671fc614db000042"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000042')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000044'), "headline"=>"no_user_article1", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000044')}, {"$set"=>{"guid"=>"50ab97ac671fc614db000044"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000044')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000027')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000028')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00002b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db00002e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000032')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000033')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000035')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ab671fc614db000037')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50ab97ac671fc614db000046')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000047'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db000046')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50ab97ac671fc614db000048')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000049'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db000048')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50ab97ac671fc614db00004a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db00004b'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db00004a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "headline"=>"asdfqwer", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db00004c'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db000046')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db00004d'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db000048')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db00004e'), "article_id"=>BSON::ObjectId('50ab97ac671fc614db000045'), "category_id"=>BSON::ObjectId('50ab97ac671fc614db00004a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000045')}, {"$set"=>{"guid"=>"50ab97ac671fc614db000045"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000045')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000050'), "name"=>"user11", "email"=>"user2@example.com", "role"=>5, "password_salt"=>"$2a$10$j/ZITc4R8ZHcPVc1y6vrCO", "password_hash"=>"$2a$10$j/ZITc4R8ZHcPVc1y6vrCO9CDIfYLUA/nkhwd1d//TWMCTqfCRroK"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000051'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50ab97ac671fc614db000050'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000051')}, {"$set"=>{"guid"=>"50ab97ac671fc614db000051"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000051')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000050')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97ac671fc614db000052'), "headline"=>"unique", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000052')}, {"$set"=>{"guid"=>"50ab97ac671fc614db000052"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97ac671fc614db000052')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000052')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab97ac671fc614db000053')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab97ac671fc614db000054')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000053')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000054')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50ab97ac671fc614db000055')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50ab97ac671fc614db000056')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"turbolinks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000057')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cache-digests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000058')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exploring-rubygems"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000059')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tagging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fnordmetric"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jruby-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"image-manipulation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bullet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ransack"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00005f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"miniprofiler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000060')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sidekiq"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000061')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-reputation-system"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000062')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exporting-csv-and-excel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000063')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"facebook-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000064')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"brakeman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000065')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-session-hijacking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000066')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"squeel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000067')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"securing-an-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000068')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rest-api-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000069')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-rails-api-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rubber-and-amazon-ec2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"wizard-forms-with-wicked"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"queue-classic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrating-to-postgresql"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"datatables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00006f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"globalize3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000070')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"copycopter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000071')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"compass-css-sprites"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000072')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refinery-cms-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000073')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"better-sass-with-bourbon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000074')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"twitter-bootstrap-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000075')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeattr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000076')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passing-data-to-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000077')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rabl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000078')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jbuilder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000079')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"private-pub"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-urls-with-friendlyid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-html-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"oh-my-zsh"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00007f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"elasticsearch-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000080')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-identity"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000081')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-place-editing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000082')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-open-source"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000083')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-spree"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000084')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mercury-editor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000085')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"playing-with-pjax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000086')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-machines-with-vagrant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000087')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"soap-with-savon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000088')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"billing-with-stripe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000089')}])
MONGODB (45ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"spork"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-admin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-with-sorcery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"foreman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00008f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pry-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000090')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"understanding-the-asset-pipeline"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000091')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-with-sunspot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000092')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mountable-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000093')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-time-web-requests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000094')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-i-test"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000095')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"remember-me-reset-password"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000096')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"geocoder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000097')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markdown-with-redcarpet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000098')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"resque"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000099')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-in-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"template-inheritance"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sass-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"coffeescript-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-streaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-1-overview"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00009f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"guard"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"client-side-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"trees-with-ancestry"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-javascript-with-jasmine"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"messaging-with-faye"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"decent-exposure"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"token-fields"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-specs-and-capybara"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n-backends"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"undo-with-paper-trail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-kaminari"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"carrierwave-file-uploads"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metrics-metrics-metrics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metawhere-metasearch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-from-scratch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"notifications-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-state"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"new-gem-with-bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gravatar"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beanstalkd-and-stalker"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-omniauth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-sort-paginate-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activerecord-relation-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongoid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-attr-accessible"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"engage-with-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"inherited-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polling-for-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-table-columns"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"controllers-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfkit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multistep-forms"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"a-b-testing-with-a-bingo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"calendars"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-dynamic-delegator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"validations-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customizing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"introducing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"erb-blocks-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"syntax-highlighting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-mailer-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"unobtrusive-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"xss-protection-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-beta-and-rvm"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mobile-devices"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple-individually"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"my-favorite-web-apps-in-2009"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongodb-and-mongomapper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tableless-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authorization-with-cancan"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mechanize"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-nokogiri"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"embedded-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"declarative-authorization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pickle-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gemcutter-jeweler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cropping-images"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"include-vs-joins"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"finding-unused-css"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seed-data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seven-security-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"searchlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-and-bookmarks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-scrapi"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"touch-and-cache"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"delayed-job"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-with-authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db0000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"feed-parsing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metric-fu"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cron-in-ruby"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"self-referential-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tree-based-navigation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"three-profiling-tools"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"factories-not-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rspec-matchers-macros"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"webrat"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beginning-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polymorphic-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfs-with-prawn"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-3-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-middleware"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-metal"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"app-templates-in-rails-2-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-lists"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-express-checkout"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"integrating-active-merchant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-merchant-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-security"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-2-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"memoization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db00011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jquery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paperclip"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"capistrano-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ad671fc614db000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"helpers-outside-views"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"going-back"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"monitoring-with-god"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000126')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-daemon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"starling-and-workling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rake-in-background"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"populating-a-database"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beta-invitations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passenger-in-development"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"non-active-record-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thinking-sphinx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"session-based-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"liquid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"semi-static-pages"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"selenium"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"endless-page"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails-with-git"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"anonymous-scopes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gem-dependencies"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tracking-attribute-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-zones-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gitting-rails-2-1-rc1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exception-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"site-wide-announcements"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"auto-complete-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-out-helper-object"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"5-view-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-partials"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-profiling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"analyzing-the-production-log"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"git-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-activeresource"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeresource-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"make-resourceful"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-long-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fragment-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-select-menus"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-rss-feeds"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"logging-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"yaml-configuration-file"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cookie-based-session-store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-basic-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fixtures-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simplify-views-with-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generate-named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-pdf-documents"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"destroy-without-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"scope-out"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"adding-an-environment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-controllers-with-rspec"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markaby-in-helper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restful-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rake-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"stopping-spam-with-akismet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-helper-modules"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-name-in-url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hacking-activerecord"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-without-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"optimistic-locking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-to-make-a-generator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"create-model-through-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-logger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cleaning-up-the-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-with-ruby-debug"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"handling-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"update-through-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"will-paginate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"reading-the-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"console-tricks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"two-many-to-many"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"catch-all-route"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rjs-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-with-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"with-options"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"conditional-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"blocks-in-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customize-field-error"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multibutton-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subversion-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rest-actions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-plugin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-in-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formatting-time"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-page-title"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"group-by-month"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-groups-of"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cross-site-scripting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hackers-love-mass-assignment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sql-injection"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-stack-trace"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"counter-cache-column"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"eager-loading"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"super-simple-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restricting-access"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"where-administration-goes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"looping-through-flash"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"habtm-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fun-with-find-conditions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"performing-calculations-on-models"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-model-in-session"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"filtering-sensitive-logs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db00019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"layouts-and-content-for"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"all-about-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"shortcut-blocks-with-symbol-to-proc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"using-with-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"move-find-into-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"find-through-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-find-by-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-with-instance-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97ae671fc614db0001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001aa'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001a8'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mashable is Hiring in Editorial, Ad Operations and Sales", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mashable-is-hiring/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mashable-is-hiring/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/10/mashable-newsroom-640.jpg\" alt=\"\" /></a></p>\n<p><em>Mashable</em> is hiring! We’re recruiting candidates for full-time positions and internships based in our New York and San Francisco offices, as well as in London.</p>\n<p>Are you a part of the Connected Generation? Do you always have your eye on what’s next? Sounds like you belong on the <em>Mashable</em> team.<br />\nAd Operations<br />\n<strong><a href=\"http://mashable.theresumator.com/apply/Iz4Z8O/Billing-Analyst.html\" target=\"_blank\">Billing Analyst</a></strong></p>\n<p>Are you an experienced billing analyst with great attention to detail? <em>Mashable</em> is seeking a candidate who will work closely with sales and ad operation team members to lead the bill collection process, ensuring that accounts receivable meet deadlines and are reconciled in a timely and accurate manner.</p>\n<p><strong><a href=\"http://mashable.theresumator.com/apply/MuEf0o/Client-Services-Coordinator.html\" target=\"_blank\">Client Services Coordinator</a></strong></p>\n<p>We're seeking a New York&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mashable-is-hiring/\" >Continue reading...</a></p>\n\n<p><a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/GNRpSzBqKEc38OSIPS3S3eHM634/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QUJjgFYntEk:TZRsh8uqnBo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QUJjgFYntEk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QUJjgFYntEk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ac'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Facebook"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Facebook", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ae'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facebook mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facebook mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facebook mobile", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001b0'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001b2'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"share"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"share"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"share", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001b4'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001b6'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"tablets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"tablets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"tablets", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001b8'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ba'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Share on Facebook Mobile", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/share-facebook-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/share-facebook-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facebook-app-640.jpg\" title=\"Facebook App Image\" alt=\"Facebook App Image\"/></a></p>\n<p>Last week, <a href=\"http://mashable.com/2012/11/15/facebook-share-mobile/\">Facebook introduced a \"Share\" button</a> on its mobile site and apps.</p>\n<p>At long last, smartphone and tablet users can post links from their News Feed directly to their own pages with the touch of a button. It's taken the social media giant years to take this step and move mobile closer to the desktop <a href=\"http://www.mashable.com/follow/topics/facebook\">Facebook</a> experience. If you're (understandably) excited to start sharing but aren't sure exactly how, check out this step-by-step guide.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/14/no-straight-up-facebook-feed/\">Why Facebook Won't Give You a Straight-Up News Feed</a></strong></p>\n<p>(Note: Make sure your Facebook app is up-to-date before you get started, or you'll be very confused.)</p>\n<p><strong>1. Hit the share button as it appears under a post on your News Feed, ne</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/share-facebook-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/facebook-mobile/\">facebook mobile</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/share/\">share</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a>, <a href=\"http://mashable.com/tag/tablets/\">tablets</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/igBVqEZjWMc9UDvV-SFBXm74Dms/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/igBVqEZjWMc9UDvV-SFBXm74Dms/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/igBVqEZjWMc9UDvV-SFBXm74Dms/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/igBVqEZjWMc9UDvV-SFBXm74Dms/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wxmdTmw-9ao:EGOHW5JI0E8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wxmdTmw-9ao\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wxmdTmw-9ao/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505205", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497885"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001bc'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001bb'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexis ohanian"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexis ohanian"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexis ohanian", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001be'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001bb'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"reddit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"reddit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"reddit", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c0'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001bb'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c2'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001bb'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexis Ohanian: 10 Great TEDTalks About the Promise of the Internet", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/alexis-ohanian-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/alexis-ohanian-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/alexis-ohanian-640.jpg\" alt=\"\" title=\"Alexis Ohanian\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497985\" /></a></p>\n<p>Alexis Ohanian changed the shape of the Internet as a co-founder of <a href=\"http://mashable.com/follow/topics/reddit/\">Reddit</a>. Naturally, <a href=\"http://www.ted.com/talks/alexis_ohanian_how_to_make_a_splash_in_social_media.html\" target=\"_blank\">this TED speaker</a> is fascinated by talks about the global idea flow. </p>\n<p>Ohanian writes, “Throughout history, there have always been awesome people with great ideas who never had a chance to share them because of some bullshit reason — they were born in the wrong place at the wrong time or to the wrong gender or race. But finally, we have a platform that is a true level playing field. I fight for Internet freedom because on an open Internet, where all links are created equal, good ideas win. Anyone, anywhere can share an idea that can be seen by millions by the end of the day.</p>\n<p>\"Stories like Willi&#8230; <br /><a href=\"http://mashable.com/2012/11/20/alexis-ohanian-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexis-ohanian/\">alexis ohanian</a>, <a href=\"http://mashable.com/tag/reddit/\">reddit</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/7qh0fwyK8tBS5MVksmS5NtZSa28/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=RJMYfUK8P9A:v8GgWjjOqB4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/RJMYfUK8P9A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/RJMYfUK8P9A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497885", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497771"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c4'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c3'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"philippe starck"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"philippe starck"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"philippe starck", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c6'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c3'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c7'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c3'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Philippe Starck: 11 Truly Thrilling Talks", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/philippe-starck-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/philippe-starck-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/philippe-starck-640.jpg\" alt=\"\" title=\"Philippe Starck\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497867\" /></a></p>\n<p>Philippe Starck, who gave the TEDTalk \"<a href=\"http://www.ted.com/talks/philippe_starck_thinks_deep_on_design.html\" target=\"_blank\">On design and destiny</a>,\" is not your ordinary designer. His work ranges from the luxe interiors of boutique hotels to reinventing ordinary objects like the toothbrush. </p>\n<p>Here, he handpicks talks about science and design -- ideas that spur imagination and inspire creativity. </p>\n<p>Kevin Slavin: How algorithms shape our world</p>\n<p>Amber Case: We are all cyborgs now</p>\n<p>Neil Gershenfeld on Fab Labs</p>\n<p>Lucy McRae: How can technology transform the human body?</p>\n<p>Neil Harbisson: I listen to color</p>\n<p>Lee Cronin: Making matter come alive</p>\n<p>Juan Enriquez: The next species of human</p>\n<p>Brian Greene: Is our universe the only univer&#8230; <br /><a href=\"http://mashable.com/2012/11/20/philippe-starck-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/philippe-starck/\">philippe starck</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/jGrCzg4lHXOUKrBSNJMnltwkSJg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QX78P8L9r9w:8ZXdUfCDidg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QX78P8L9r9w\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QX78P8L9r9w/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497771", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1502465"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001c9'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c8'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"jesse draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"jesse draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"jesse draper", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001cb'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c8'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001cc'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001c8'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Jesse Draper: 7 Inspiring TEDTalks That Will Pull You In", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/jesse-draper-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/jesse-draper-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/jesse-draper-ted/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/jesse-draper-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>As the host and creator of The Valley Girl Show, Draper sits down with some of the most interesting people in Silicon Valley.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jesse-draper/\">jesse draper</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/fdLglE7jOqmWgZiAUIh00qcPGIE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ngq8LrQvSQw:woXaFnui2aM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ngq8LrQvSQw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ngq8LrQvSQw/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502465", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ce'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001cd'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"daryl hannah"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"daryl hannah"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"daryl hannah", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d0'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001cd'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d1'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001cd'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Daryl Hannah: 11 TEDTalks That Inspired Me to Activism", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/daryl-hannah-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/daryl-hannah-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/daryl-hannah-640.jpg\" alt=\"\" title=\"Daryl Hannah\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497749\" /></a></p>\n<p>Daryl Hannah, actress and strong-willed activist, has gathered together the TEDTalks she's found most motivating over the years. Spanning the globe -- from the Black Hills Mountains of the United States to the underwater crevices of Antarctica -- these talks are instructive and informative but, most of all, inspiring. </p>\n<p>Paul Nicklen: Tales of ice-bound wonderlands  </p>\n<p>Aaron Huey: America's native prisoners of war </p>\n<p>Garth Lenz: The true cost of oil</p>\n<p>Chris Jordan: Turning powerful stats into art</p>\n<p>Sylvia Earle's TED Prize wish to protect our oceans</p>\n<p>Paul Stamets: 6 ways mushrooms can save the world</p>\n<p>John Hardy: My green school dream</p>\n<p>Yann Arthus-Be&#8230; <br /><a href=\"http://mashable.com/2012/11/20/daryl-hannah-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/daryl-hannah/\">daryl hannah</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/A1cC2YIJb4CXqVDfGEjPBF4sx-c/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=TRKjzEhT5fs:q22dofiJMPs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/TRKjzEhT5fs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/TRKjzEhT5fs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1506023"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d3'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Benetton"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Benetton"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Benetton", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d5'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"privacy"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"privacy"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"privacy", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d7'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001d9'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001da'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Benetton’s Mannequins Spy on You While You Shop", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Dummies.jpg\" alt=\"\" title=\"Dummies\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1506029\" /></a></p>\n<p>The next time you shop, take a close look at the mannequins in the store. They may be taking a close look at you, too.</p>\n<p>So far, Benetton is one of the few places you'll see $5,000 bionic mannequins from Italy's Almax. The dummies, called EyeSee, has a camera installed with facial recognition software in its eye socket. The technology allows it to log the gender, age and race of passers-by, according to <a href=\"http://www.bloomberg.com/news/2012-11-19/bionic-mannequins-spy-on-shoppers-to-boost-luxury-sales.html\" target=\"_blank\">Bloomberg</a>. Uché Okonkwo, executive director of consultant Luxe Corp., told Bloomberg that the mannequins “could really enhance the shopping experience, the product assortment, and help brands better understand their customers.”</p>\n<p>Sure, you could do the same with in-store security c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/benettons-mannequins-spy-on-you-while-you-shop/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/benetton/\">Benetton</a>, <a href=\"http://mashable.com/tag/privacy/\">privacy</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/IsTniUAgoOhCoxknZlIbaUgqohA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/IsTniUAgoOhCoxknZlIbaUgqohA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/IsTniUAgoOhCoxknZlIbaUgqohA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/IsTniUAgoOhCoxknZlIbaUgqohA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XTyt3MSyw-o:by8h5YgfxPc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XTyt3MSyw-o\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XTyt3MSyw-o/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1506023", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505721"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001dc'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001db'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"John McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"John McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"John McAfee", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001de'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001db'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"McAfee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"McAfee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"McAfee", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e0'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001db'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"police"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"police"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"police", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e2'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001db'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e3'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001db'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Murder Suspect McAfee Blogs While on the Run From Police", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/mcafee-blogs/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/mcafee-blogs/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\"><img alt=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/McAfee.jpg\" class=\"aligncenter\" width=\"640\" height=\"400\" /></a></p>\n<p>Fugitives generally try to keep a low profile while running from the police, but <a href=\"http://mashable.com/2012/11/12/mcafee-murder/\">murder suspect and tech entrepreneur John McAfee</a> has done the opposite: He started a blog. </p>\n<p>McAfee, founder of the eponymous anti-virus software company <a href=\"http://mashable.com/follow/topics/mcafee/\">McAfee</a>, launched \"<a href=\"http://www.whoismcafee.com/\" target=\"_blank\">The Hinterland</a>,\" a blog detailing his experience hiding from authorities in Belize, on Saturday. He is the prime suspect in the murder of an American expat named Gregory Faull who was shot in his San Pedro Town home two weeks ago, <em><a href=\"http://gizmodo.com/5959812/john-mcafee-wanted-for-murder\" target=\"_blank\">Gizmodo</a></em> reported.</p>\n<p>Entitled \"Introduction,\" the first entry of McAfee's \"official blog\" begins as follows:</p>\n<p>\"With lots of time on my hands and very little to do with it, I've been reflecting on the recent d&#8230; <br /><a href=\"http://mashable.com/2012/11/20/mcafee-blogs/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/john-mcafee/\">John McAfee</a>, <a href=\"http://mashable.com/tag/mcafee/\">McAfee</a>, <a href=\"http://mashable.com/tag/police/\">police</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/a7Y6KxEQ8_GW5W0LEx-gIAMqrOw/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/a7Y6KxEQ8_GW5W0LEx-gIAMqrOw/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/a7Y6KxEQ8_GW5W0LEx-gIAMqrOw/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/a7Y6KxEQ8_GW5W0LEx-gIAMqrOw/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=vD6ACy--fTg:bUTqFrxfOpM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/vD6ACy--fTg\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/vD6ACy--fTg/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505721", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505977"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e5'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001e4'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e7'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001e4'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001e6')}])
MONGODB (1ms) rails3_mongoid_devise_test['categories'].find({:name=>"htc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"htc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"htc", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001e9'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001e4'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"HTC’s Peter Chou: We Don’t Pay Apple $6-$8 per Android Phone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\"><img class=\"alignnone size-full wp-image-1487765\" title=\"HTC Apple\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HTC-Apple.jpg\" alt=\"HTC Apple\" height=\"400\" width=\"640\"/></a></p>\n<p>HTC is happy with its recent patent dispute settlement with Apple, and the media <a href=\"http://mashable.com/2012/11/12/htc-apple-patent-settlement/\">estimates</a> the company is paying Apple $6 - $8 for every Android phone it sells are wrong, claims HTC CEO Peter Chou.</p>\n<p>\"I think that these estimates are baseless and very, very wrong. It is a outrageous number, but I'm not going to comment anything on a specific number. I believe we have a very, very happy settlement and a good ending,\" <a href=\"http://www.reuters.com/article/2012/11/20/us-htc-apple-idUSBRE8AJ0DZ20121120?feedType=RSS&#038;feedName=technologyNews&#038;utm_source=dlvr.it&#038;utm_medium=twitter&#038;dlvrit=56505\" target=\"_blank\">Chou said</a> at a KDDI Corp product launch in Tokyo.</p>\n<p>In November 2012, HTC has announced it has <a href=\"http://mashable.com/2012/11/11/apple-htc-patent/\">ended its patent dispute with Apple</a>, without giving away any specifics about the agreement. “HTC is pleased to have resolved its dispute with Apple, so HTC can focus on inno&#8230; <br /><a href=\"http://mashable.com/2012/11/20/htcs-peter-chou-we-dont-pay-apple-6-8-per-android-phone/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/htc/\">htc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HwhVulvMyJ5oOMue_z_GgRHoM-M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cpL08S4Ur8k:A8oCXgGc84U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cpL08S4Ur8k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cpL08S4Ur8k/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505977", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001eb'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ea'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Science"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Science"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Science", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ed'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ea'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charger", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ef'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ea'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"wireless charging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"wireless charging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"wireless charging", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001f1'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001ea'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Friction May Someday Charge Your Cellphone", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/friction-charge-cellphone/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/friction-charge-cellphone/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/friction-charge-cellphone/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/Phone-Charging.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>A nanogenerator made from inexpensive materials harvests mechanical energy and produces enough power to charge personal electronics.</p>\n<p>More About: <a href=\"http://mashable.com/tag/science/\">Science</a>, <a href=\"http://mashable.com/tag/charger-2/\">charger</a>, <a href=\"http://mashable.com/tag/wireless-charging/\">wireless charging</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VzneLvTXMim0cXxw28o3Kfkq5KI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=hosSQiGVu44:TziM6C0yjuk:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/hosSQiGVu44\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/hosSQiGVu44/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504609", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504677"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001f3'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001f2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"e-textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"e-textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"e-textbooks", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001f5'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001f2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"education"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"education"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"education", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001f7'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001f2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"textbooks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"textbooks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"textbooks", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001f9'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001f2'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"New E-Textbooks Report Student Study Habits", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/coursesmart-e-textbook/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/coursesmart-e-textbook/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/10/textbook-ipad.jpg\" alt=\"\" title=\"textbook-ipad\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1405729\" /></a></p>\n<p>Students may no longer enjoy the luxury of slacking off in privacy because of new electronic textbooks that report their study habits.</p>\n<p>Teachers can track the time spent <a href=\"http://textbooks-online-review.toptenreviews.com/advantages-and-disadvantages-of-e-textbooks-online.html\" target=\"_blank\">reading e-textbooks</a> and see the notes or highlights made by students through the new service offered by CourseSmart Analytics. Three U.S. universities and colleges have signed on to test the e-textbook service before it becomes widely available in 2013 -- a way to identify students who need help and gauge the e-textbooks that hold student interest.</p>\n<p>\"With the CourseSmart dashboard, professors will be better able to fine-tune lesson plans, critique student performance, and even tailor suggestions for specific students&#8230; <br /><a href=\"http://mashable.com/2012/11/20/coursesmart-e-textbook/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/e-textbooks/\">e-textbooks</a>, <a href=\"http://mashable.com/tag/education/\">education</a>, <a href=\"http://mashable.com/tag/textbooks/\">textbooks</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/HxqKhQSwomJNSKM5xJwkEvBJyYY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1E39Q2oobHc:JP-9A8q6FdI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1E39Q2oobHc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1E39Q2oobHc/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504677", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505897"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001fb'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001fa'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Google Maps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Google Maps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Google Maps", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001fd'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001fa'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"asia"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"asia"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"asia", "_id"=>BSON::ObjectId('50ab97b0671fc614db0001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0001ff'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db0001fa'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Google Maps Helps Man Walk 5,000 Miles Across Asia [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/google-maps-asia/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/google-maps-asia/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p>While most of us consult <a href=\"http://mashable.com/follow/topics/google-maps/\">Google Maps</a> to get directions to the mall, one man used the app to trek 5,000 miles across Asia.</p>\n<p>Equipped with an <a href=\"http://mashable.com/follow/topics/android/\">Android</a> phone running Maps, U.S. Marine Sgt. Winston Fiore set out on a journey to raise money and awareness for the <a href=\"http://www.icsfoundation.org/\" target=\"_blank\">International Children's Surgical Foundation</a>, a charity that provides free facial-reconstructive surgery for children with cleft palates in developing countries.</p>\n<p><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/google-maps.jpg\" alt=\"\" title=\"google maps\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1505903\" /></a></p>\n<p>Fiore walked across Brunei, <a href=\"http://mashable.com/follow/topics/china/\">China</a>, Laos, Malaysia, the Philippines, Singapore, Taiwan, Thailand and Vietnam in a mission he called \"<a href=\"http://www.smiletrek.org/\" target=\"_blank\">Smile Trek</a>,\" which began last October and ended Monday. Along with his Android, Biore also brought \"sturdy boots\" and \"a 20-pound vest c&#8230; <br /><a href=\"http://mashable.com/2012/11/20/google-maps-asia/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/google-maps/\">Google Maps</a>, <a href=\"http://mashable.com/tag/asia/\">asia</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/sh-JLK-iMFhfDreL-tIty7TYs0M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jRNYy92fxE0:3dkZV_UkCtE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jRNYy92fxE0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jRNYy92fxE0/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505897", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db0001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505833"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000201'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000200'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Windows Phone 7.8"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Windows Phone 7.8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Windows Phone 7.8", "_id"=>BSON::ObjectId('50ab97b0671fc614db000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000203'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000200'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"windows phone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"windows phone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"windows phone", "_id"=>BSON::ObjectId('50ab97b0671fc614db000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000205'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000200'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Windows Phone 7 Handsets Will Be Updated Past 7.8 [REPORT]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/windows-phone-7-x/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/windows-phone-7-x/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/WindowsPhoneSlide.jpg\" alt=\"\" title=\"WindowsPhoneSlide\" width=\"640\" height=\"338\" class=\"aligncenter size-full wp-image-1505837\" /></a></p>\n<p>If you purchased a <a href=\"http://mashable.com/follow/topics/windows-phone/\" target=\"_blank\">Windows Phone</a> last year, then you might continue seeing updates to the handsets for a little bit longer.</p>\n<p>A leaked Nokia slide references “Windows Phone 7.x, “ which is set to arrive after the Windows Phone 7.8 refresh. Obtained by <em>Phone Arena</em> by an anonymous tipster, <a href=\"http://www.phonearena.com/news/Leaked-Nokia-slide-shows-life-after-Windows-Phone-7.8_id36754\" target=\"_blank\">the slide</a> doesn’t provide any information on what the update may include.</p>\n<p>When Microsoft announced Windows Phone 8 earlier this year,  it also announced Windows Phone 7.8, an update for Windows Phone 7 handsets that brings the updated home screen to the phones.</p>\n<p>Due to hardware limitations, no Windows Phone 7 handsets can be updated to Windows Phone 8.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/29/microsoft-mobile-history/\" target=\"_blank\">Microsoft Mobile: From Pock</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/20/windows-phone-7-x/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/windows-phone-7-8/\">Windows Phone 7.8</a>, <a href=\"http://mashable.com/tag/windows-phone/\">windows phone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/UK3TkbObUf-Q6Zwe0iM0Unh1MVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=X-VavXrE0L4:dC76vRIKDOs:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/X-VavXrE0L4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/X-VavXrE0L4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505901"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000207'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000206'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cherokee"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cherokee"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cherokee", "_id"=>BSON::ObjectId('50ab97b0671fc614db000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000209'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000206'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"gmail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"gmail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"gmail", "_id"=>BSON::ObjectId('50ab97b0671fc614db00020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00020b'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000206'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Gmail Gets Support for Cherokee, Raises Language Count to 57", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/gmail-cherokee/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/gmail-cherokee/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/cherokee.jpg\" alt=\"cherokee\" title=\"cherokee\" width=\"604\" height=\"467\" class=\"aligncenter size-full wp-image-1505917\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/gmail/\">Gmail</a> is now available in 57 languages, and one of them is Cherokee, the only Southern Iroquoian language that's still spoken.</p>\n<p>While very few people speak Cherokee today, the update helps preserve the language, and encourages native speakers to use it in their everyday communication. </p>\n<p>To make this even easier, Google has added a Cherokee virtual keyboard to Gmail, just like it did with Google Web Search, which has supported Cherokee since <a href=\"http://mashable.com/2011/03/25/google-cherokee-language/\">last March</a>. </p>\n<p>Interestingly, <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>'s <a href=\"http://mashable.com/follow/topics/iphone/\">iPhone</a> and <a href=\"http://mashable.com/follow/topics/ipad/\">iPad</a> have supported Cherokee since <a href=\"http://www.engadget.com/2010/12/27/apple-bringing-cherokee-language-support-to-iphone-and-ipad/\" target=\"_blank\">December 2010</a>. At the time, Cherokee Chief Chad Smith persuaded Apple to include support for the language. Similarly, Gmail's latest update came about after V&#8230; <br /><a href=\"http://mashable.com/2012/11/20/gmail-cherokee/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cherokee/\">Cherokee</a>, <a href=\"http://mashable.com/tag/gmail/\">gmail</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dN35FFdd9oATPR2bBmTfzIij0lg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Pn5bt4Vo8ek:GhSYGLUHT1g:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Pn5bt4Vo8ek\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Pn5bt4Vo8ek/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505901", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505869"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00020d'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00020c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Seqinetic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Seqinetic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Seqinetic", "_id"=>BSON::ObjectId('50ab97b0671fc614db00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00020f'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00020c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"glasses"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"glasses"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"glasses", "_id"=>BSON::ObjectId('50ab97b0671fc614db000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000211'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00020c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sun"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sun"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sun", "_id"=>BSON::ObjectId('50ab97b0671fc614db000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000213'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00020c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Seqinetic ‘Sun’ Glasses Lets You Wear Daylight to Fight Winter Blues [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/seqinetic/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/seqinetic/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/seqinetic/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sun-glasses.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1978452552001&amp;autoStart=false\"></iframe></p>\n<p>While a quick getaway to sunny Mexico may cure your winter blues, one company has devised a cheaper and longer-term alternative to escape shorter, darker days. </p>\n<p>Seqinetic \"sun\" glasses, which includes six LEDs and a reflector, let users wear daylight. </p>\n<p>\"The reflector bounces soft white 'daylight' around your eyes, but not directly into them, improving your mood,\" according to the company's <a href=\"http://www.kickstarter.com/projects/37801615/seqinetic-wearable-light-to-fight-the-winter-blues\" target=\"_blank\">Kickstarter page</a> from last year.</p>\n<p>To re-energize during long winter months, <a href=\"http://www.seqinetic.com/\" target=\"_blank\">Seqinetic</a> recommends users wear the glasses for up to 30 minutes a day. It adds that the light is \"harmless\" and \"100% UV-free.\" Check out the video, above, for more. </p>\n<p>Would you we&#8230; <br /><a href=\"http://mashable.com/2012/11/20/seqinetic/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/seqinetic/\">Seqinetic</a>, <a href=\"http://mashable.com/tag/glasses/\">glasses</a>, <a href=\"http://mashable.com/tag/sun/\">sun</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k0r5EbbW-KOK4yOjlf1JuDfVQ4Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=0-jmnwG0f9Y:bzLdoeLta3I:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/0-jmnwG0f9Y\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/0-jmnwG0f9Y/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505869", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db00020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504489"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000215'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"android applications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"android applications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"android applications", "_id"=>BSON::ObjectId('50ab97b0671fc614db000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000217'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50ab97b0671fc614db000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000219'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food apps", "_id"=>BSON::ObjectId('50ab97b0671fc614db00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00021b'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone apps", "_id"=>BSON::ObjectId('50ab97b0671fc614db00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00021d'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50ab97b0671fc614db00021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00021f'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000214'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"6 Tech Fixes for Your Thanksgiving", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/tech-fixes-thanksgiving/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Thanksgiving-iPad.jpg\" alt=\"\" title=\"Thanksgiving Cooking With iPad via Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1504569\" /></a></p>\n<p>Starting with Thanksgiving, the holiday season is set to arrive, often with big helpings of stress — especially if you're still scrambling to get ready for Thursday. But there's no reason to face those Thanksgiving tasks alone: You've got technology on your side.</p>\n<p>From apps to gadgets, tech can make the holidays easier. These six essential tools will help you get through the season, from planning before the meal to burning off calories afterwards.</p>\n<p>1. <a href=\"https://itunes.apple.com/us/app/thanksgiving-menu-maker-from/id474820051?mt=8\" target=\"_blank\">Thanksgiving Menu Maker</a> (iOS)</p>\n<p>First things first: What to cook? This free app helps you pick out a menu, including starters, main dishes, sides and desserts. It offers recipes to go with the choices, generates a shopping list and h&#8230; <br /><a href=\"http://mashable.com/2012/11/20/tech-fixes-thanksgiving/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/android-applications/\">android applications</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/food-apps/\">food apps</a>, <a href=\"http://mashable.com/tag/iphone-apps/\">iphone apps</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5n1U9Rgcaxuar2YjFqUEA56-D1U/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5IjFJznntVo:Cf8DTfxPbX4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5IjFJznntVo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5IjFJznntVo/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504489", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504453"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000221'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000220'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50ab97b0671fc614db000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000223'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000220'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000222')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50ab97b0671fc614db000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000225'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000220'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000224')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50ab97b0671fc614db000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000227'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000220'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000226')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Nintendo’s Wii U: First Impressions", "deck"=>"<br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"      <br/>\n      <h4>GamePad</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad\"><img width=\"400\" style=\"border:none;\" title=\"GamePad\" src=\"http://7.mshcdn.com/wp-content/gallery/wii-u-hands-on/GamePad.jpg\" /></a><br/><br/>\n      <p>The Wii U GamePad has a 6.2-inch touchscreen.</p><p><a href='http://mashable.com/2012/11/20/first-day-with-the-wii-u/#102261GamePad'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/20/first-day-with-the-wii-u/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Wii-U-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Nintendo's newest console has only been available for one day, but that's still enough time for early-bird consumers to get their hands on the <a href=\"http://mashable.com/follow/topic/wii-u\">Wii U</a>, and test out its features and games.</p>\n<p>We spent the last 24 hours playing with the Wii U, and have organized our early thoughts on the system. Read on if you're on the fence about buying one. </p>\n<p>Out of the Box</p>\n<p>Setting up the Wii U is easy, but installing the software is more of a process. Nintendo issued a day-one patch to activate features such as MiiVerse, the company's social features; this means users will spend between one to three hours (depending on connection speed) downloading and installing a patch that bricks their system. Not a&#8230; <br /><a href=\"http://mashable.com/2012/11/20/first-day-with-the-wii-u/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/DMEtpteVhYIF1s95iTZA4laiwoc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Ea-21714_ko:doKYs1XwTkY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Ea-21714_ko\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Ea-21714_ko/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504453", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505695"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000229'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000228'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50ab97b0671fc614db00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00022b'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000228'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50ab97b0671fc614db00022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00022d'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000228'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iTunes Store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iTunes Store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iTunes Store", "_id"=>BSON::ObjectId('50ab97b0671fc614db00022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00022f'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000228'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"AC/DC Is Finally Available on iTunes", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/acdc-itunes/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/acdc-itunes/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/acdc-itunes/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Legendary hard rock band AC/DC has added a new way to deal the crunchy grooves you need: iTunes. </p>\n<p>More About: <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/itunes-store/\">iTunes Store</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/q050LWHOu0YGtUtoI59JK6hmpmQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=2y_Rhvchos4:QAXvcAJLcNc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/2y_Rhvchos4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/2y_Rhvchos4/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505695", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505563"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000231'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000230'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50ab97b0671fc614db000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000233'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000230'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000232')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Watercooler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Watercooler", "_id"=>BSON::ObjectId('50ab97b0671fc614db000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000235'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000230'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"storycorps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"storycorps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"storycorps", "_id"=>BSON::ObjectId('50ab97b0671fc614db000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000237'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000230'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000238'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000230'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Tells Heartbreaking Story of Grandfather’s Lost Building [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/storycorps-video-grandfather/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/storycorps-video-grandfather/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/storycorps-video-grandfather/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/Rocco.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest StoryCorps animated video tells the story of an Italian man, named Rocco, who loses his apartment after working in it for 18 years. </p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/storycorps/\">storycorps</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XXJiaevfLumcPu9NtBH0Qb9A9T0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=5BBnKcJneYs:Qh34Wp-E3Ps:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/5BBnKcJneYs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/5BBnKcJneYs/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505563", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503817"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00023a'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000239'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"CEOs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"CEOs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"CEOs", "_id"=>BSON::ObjectId('50ab97b0671fc614db00023b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00023c'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000239'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00023b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"charts", "_id"=>BSON::ObjectId('50ab97b0671fc614db00023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00023e'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000239'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"intel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"intel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"intel", "_id"=>BSON::ObjectId('50ab97b0671fc614db00023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000240'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000239'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"These 3 Charts Tell the Story of Intel’s Otellini Era", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/intel-otellini-charts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/intel-otellini-charts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/intel-otellini-charts/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/Paul-Otellini.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Three charts tell the story of Intel boss Paul Otellini, who will step down in May after eight years at the helm of the chip giant.</p>\n<p>More About: <a href=\"http://mashable.com/tag/ceos/\">CEOs</a>, <a href=\"http://mashable.com/tag/charts/\">charts</a>, <a href=\"http://mashable.com/tag/intel/\">intel</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VhB3xEJ4Jvc5oJCb9572ZL0kYVE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=jQNLI4qMgQk:iVWrLUqXLg0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/jQNLI4qMgQk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/jQNLI4qMgQk/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503817", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505535"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000242'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000241'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50ab97b0671fc614db000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000244'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000241'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ufc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ufc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ufc", "_id"=>BSON::ObjectId('50ab97b0671fc614db000245')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000246'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000241'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000245')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"CBS Analyst Apologizes for ‘Homoerotic’ UFC Tweets", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/ufc-homoerotic-cbs-seth-davis/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/UFC.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>CBS Sports analyst Seth Davis is on the defensive after calling the UFC a \"homoerotic\" sport he doesn't want his son to watch on Twitter. </p>\n<p>More About: <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/ufc/\">ufc</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QWvgSC-qnpsHWg_SSQaGemv-tO8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qw0srOLkfR8:NIz1Fr0tEEc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qw0srOLkfR8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qw0srOLkfR8/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505535", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000241')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505281"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000248'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000247'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Watercooler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000249'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000247'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000234')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"time-lapse"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"time-lapse"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"time-lapse", "_id"=>BSON::ObjectId('50ab97b0671fc614db00024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00024b'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000247'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Get Your Kicks With Time-Lapse of Route 66", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/route-66-video/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/route-66-video/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/route-66-video/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Route-66-nail.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Over the summer, Brian DeFrees drove from Chicago to L.A. on Route 66 and made a three-minute video-lapse of the entire journey. </p>\n<p>More About: <a href=\"http://mashable.com/tag/watercooler/\">Watercooler</a>, <a href=\"http://mashable.com/tag/time-lapse/\">time-lapse</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/22H-EYcLqdpDuAkgxxtHb8oQuRM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=rcp2wfBCCAE:s3jk06DDsnw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/rcp2wfBCCAE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/rcp2wfBCCAE/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505281", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000247')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504825"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00024d'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00024c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"NBA"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"NBA"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"NBA", "_id"=>BSON::ObjectId('50ab97b0671fc614db00024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00024f'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00024c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000250'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00024c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How an NBA Star’s YouTube Series Gives Fans Inside Access [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/nate-robinson-youtube/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/nate-robinson-youtube/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/NateRobinson.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>We recently wrote about how NBA fans are being introduced to budding star <a href=\"http://mashable.com/2012/10/25/how-social-media-is-introducing-nba-fans-to-a-budding-star/\">Damian Lillard</a> through his YouTube documentary series, as well as how a similar Adidas project called \"<a href=\"http://mashable.com/2012/09/28/derrick-rose-the-return/\">The Return of D.Rose</a>\" is giving fans a window into injured superstar Derrick Rose's comeback from injury. </p>\n<p>Fellow NBA guard Nate Robinson, however, has been in the <a href=\"http://mashable.com/category/youtube/\">YouTube</a> mini-documentary game longer than either of them. He's among the first players have made use of the genre's easy storytelling potential and his series, \"<a href=\"http://www.youtube.com/user/OfficialNateRobinson\" target=\"_blank\">State of Nate</a>,\" is now midway through its second season. </p>\n<p>Robinson says he initially wanted to make the mini docs as a way for his kids to be able to look back on their childhoods later, b&#8230; <br /><a href=\"http://mashable.com/2012/11/19/nate-robinson-youtube/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/nba/\">NBA</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9mQA5megVoGqlS3MxRLS9AGVv9w/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=6U33Ff5KPoY:TuKteTg4nWg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/6U33Ff5KPoY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/6U33Ff5KPoY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504825", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db00024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505131"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000252'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000251'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"U.S. government"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"U.S. government"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"U.S. government", "_id"=>BSON::ObjectId('50ab97b0671fc614db000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000254'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000251'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"online petitions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"online petitions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"online petitions", "_id"=>BSON::ObjectId('50ab97b0671fc614db000255')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000256'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000251'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000255')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the white house"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the white house"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the white house", "_id"=>BSON::ObjectId('50ab97b0671fc614db000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000258'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000251'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"we the people"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"we the people"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"we the people", "_id"=>BSON::ObjectId('50ab97b0671fc614db000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00025a'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000251'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Non-Secession White House Petitions Surge", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/white-house-petition-surge/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/white-house-petition-surge/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/American-Flag-Wave.jpg\" alt=\"\" title=\"American Flag Wave via U.S. Army on Flickr\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1505173\" /></a></p>\n<p>The White House's online petition site <a href=\"https://petitions.whitehouse.gov/\" target=\"_blank\">We the People</a> has been <a href=\"http://www.nextgov.com/emerging-tech/2012/11/residents-all-50-states-have-filed-secession-petitions/59556/\" target=\"_blank\">inundated</a> since president Obama's reelection with more petitions than at any time since its 2011 launch.</p>\n<p>About 37% of those 187 new petitions are from disenchanted Americans who want their state to secede from the union. Another 5% are from people criticizing or mocking the would-be secessionists.</p>\n<p>Nearly 58% of the new petitions are unrelated to secession, though. Those 108 petitions alone represent the second-largest crop of We the People petitions. The only larger batch came just after the site's September 2011 debut.</p>\n<p>Here's how those non-secession petitions are <a href=\"http://www.nextgov.com/media/galleries/111912jm1.htm\" target=\"_blank\">broken down</a> as of noon on Monday:</p>\n<p><strong>Weed Doesn't Lead</strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/white-house-petition-surge/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/u-s-government/\">U.S. government</a>, <a href=\"http://mashable.com/tag/online-petitions/\">online petitions</a>, <a href=\"http://mashable.com/tag/the-white-house/\">the white house</a>, <a href=\"http://mashable.com/tag/we-the-people/\">we the people</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/AsXk6ixrg9KfXLP0oR-gs75vmLo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uGiX27dIfZY:VrfRoI5lDSQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uGiX27dIfZY\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uGiX27dIfZY/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505131", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505411"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00025c'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00025b'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Good"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Good"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Good", "_id"=>BSON::ObjectId('50ab97b0671fc614db00025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00025e'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00025b'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"World"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"World", "_id"=>BSON::ObjectId('50ab97b0671fc614db00025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000260'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00025b'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"africa"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"africa"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"africa", "_id"=>BSON::ObjectId('50ab97b0671fc614db000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000262'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00025b'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mit", "_id"=>BSON::ObjectId('50ab97b0671fc614db000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000264'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00025b'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Self-Taught Teen Prodigy From Sierra Leone Wows MIT Engineers [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kelvin-doe.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The latest installment of the THNKR's Prodigies <a href=\"http://mashable.com/tag/youtube/\">YouTube</a> series highlights Sierra Leone teen Kelvin Doe, who is visiting the U.S. as a guest of MIT. </p>\n<p>The 15-year-old is a self-taught engineer, who has never taken an engineering or electronics class. Combining scrap metal, baking soda and acid, he created a battery to power his family's home. He also broadcasts news and music as DJ Focus on the radio, using an RF transmitter he created. </p>\n<p>Kelvin is the youngest invitee ever to MIT's Visiting Practitioner's Program for international development-- and watching THNKR's look into his trip you'll understand why. The teen scours trash bins for spare parts, which he uses to build batteries,&#8230; <br /><a href=\"http://mashable.com/2012/11/19/teen-prodigy-wows-engineers/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/social-good/\">Social Good</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/africa/\">africa</a>, <a href=\"http://mashable.com/tag/mit/\">mit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/Z_lp9AH33YL7adcUm2ktFmuunrs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WRw_FlQD-JQ:kkiIzmwCNic:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WRw_FlQD-JQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WRw_FlQD-JQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505411", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db00025b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503733"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000266'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000265'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Facebook"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000267'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000265'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Social Media"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Social Media"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Social Media", "_id"=>BSON::ObjectId('50ab97b0671fc614db000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000269'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000265'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"india"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"india"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"india", "_id"=>BSON::ObjectId('50ab97b0671fc614db00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00026b'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000265'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Mumbai Women Arrested for Political Facebook Comment", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/mumbai-facebook-arrest/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/Bal-Thackeray.jpg\" alt=\"Members of the Indian Hindu nationalist Shiv Sena party light candles as they pay tribute to chief of the Hindu nationalist Shiv Sena party, Bal Thackeray in Amritsar on November 18, 2012.\" title=\"Bal Thackeray\" width=\"640\" height=\"400\" class=\"alignnone size-full wp-image-1503885\" /></a></p>\n<p>Following the death of Bal Thackeray, leader and founder of the Shiv Sena political party, 21-year-old Shaheen Dhadha was arrested for a <a href=\"http://mashable.com/follow/topics/facebook\">Facebook</a> comment that didn't please many Indian citizens. </p>\n<p>“People like Thackeray are born and die daily and one should not observe a bandh for that,” Dhadha wrote on her Facebook wall.</p>\n<p><a href=\"http://www.ndtv.com/article/world/two-women-arrested-for-facebook-post-on-mumbai-shutdown-294239\" target=\"_blank\">NDTV reports</a> that the Facebook post also said, \"Respect is earned, not given and definitely not forced. Today Mumbai shuts down due to fear and not due to respect.\" </p>\n<p>A bandh is a city wide shutdown, and in the wake of Thackeray's death, Mumbai came to a near standstill. But Dhadha's Facebook status got the city reawakened. </p>\n<p>Dhadha's Facebook friend Renu (&#8230; <br /><a href=\"http://mashable.com/2012/11/19/mumbai-facebook-arrest/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/facebook/\">Facebook</a>, <a href=\"http://mashable.com/tag/social-media/\">Social Media</a>, <a href=\"http://mashable.com/tag/india/\">india</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/XLgZPNUahSc9OTUepLvCSNEFRHA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7gj3dCs6frQ:ERa103RE8h0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7gj3dCs6frQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7gj3dCs6frQ/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503733", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504219"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00026d'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00026c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"biking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"biking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"biking", "_id"=>BSON::ObjectId('50ab97b0671fc614db00026e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00026f'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00026c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00026e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"exercise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"exercise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"exercise", "_id"=>BSON::ObjectId('50ab97b0671fc614db000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000271'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00026c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50ab97b0671fc614db000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000273'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db00026c'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iPhone-Syncing Bike Mount Makes Your Apps More Accessible", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/rflkt-bike-computer/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/rflkt-bike-computer/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\"><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/bike-app.jpg\" alt=title=\"Bike app\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1504493\" /></a></a>  </p>\n<p>If you're a weekend cyclist or maybe someone who bikes to work for exercise, there's a new gadget that's a real game-changer for bikers who are also iPhone owners. </p>\n<p>Company Wahoo Fitness develops iPhone-syncing devices. Its latest gadget, <a href=\"http://www.wahoofitness.com/RFLKT/?returnFull=1\" target=\"_blank\">RFLKT</a> (pronounced \"reflect\"), is an iPhone powered computer for street bikes expected to launch at the end of December or early January. </p>\n<p>The two-ounce device attaches between your handle bars using the strap pictured and the ties that come with it. It works with the company's <a href=\"https://itunes.apple.com/us/app/fisica-fitness/id391599899?mt=8\" target=\"_blank\">iPhone app</a> and Cyclemeter. It also connects to a number of other devices and apps using <a href=\"http://mashable.com/follow/topics/bluetooth/\">Bluetooth</a>. This way, while you're cycling, you can view your biking stats from Waho&#8230; <br /><a href=\"http://mashable.com/2012/11/19/rflkt-bike-computer/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/biking/\">biking</a>, <a href=\"http://mashable.com/tag/exercise/\">exercise</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/coW7_AL49iSwonQHFzQhrxo3474/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=tW2JaIvb80A:1o16-zyPLjc:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/tW2JaIvb80A\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/tW2JaIvb80A/", "published_on"=>2012-11-20 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504219", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db00026c')}])
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505129"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000275'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000274'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000276'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000274'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mac osx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mac osx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mac osx", "_id"=>BSON::ObjectId('50ab97b0671fc614db000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000278'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000274'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How Should Apple Name the Next Mac OS Series? [POLL]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-osxi-poll/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-osxi-poll/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/02/osx-mountain-lion-600.jpg\" alt=\"osx-mountain-lion-600\" title=\"osx-mountain-lion-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-942543\" /></a></p>\n<p>The reign of the big cats is almost at an end at <a href=\"http://mashable.com/follow/topics/apple/\">Apple</a>, and we don't know what will replace them. </p>\n<p>With the <a href=\"http://mashable.com/2012/11/19/apple-next-operating-system-lynx/\">rumor mill now pointing to the name \"Lynx\" for Mac OS X 10.9</a>, the company is almost running out of big cat names it has already trademarked. We've already seen Mac OSs named for the Cheetah, Puma, Jaguar, Panther, Tiger, Leopard, Snow Leopard, Lion and <a href=\"http://mashable.com/2012/07/25/mountain-lion-review/\">Mountain Lion</a>. (The only other one remaining is \"Cougar,\" which has acquired something of an alternate meaning since Apple trademarked it in 2004.) </p>\n<p>Regardless of whether Apple continues the Mac OS X series with version 10.10, starts afresh with Mac OS XI, or merges the Mac and the iOS systems -- all of which are possibilities&#8230; <br /><a href=\"http://mashable.com/2012/11/19/apple-osxi-poll/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/mac-osx/\">mac osx</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/mekpnFUr1ap6db3svL22mtRArLU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WVVGLXSINNs:drMv4-Ass_Q:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WVVGLXSINNs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WVVGLXSINNs/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1505129", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000274')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504081"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00027a'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Cybercrime Series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Cybercrime Series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Cybercrime Series", "_id"=>BSON::ObjectId('50ab97b0671fc614db00027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00027c'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mobile"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mobile"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mobile", "_id"=>BSON::ObjectId('50ab97b0671fc614db00027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00027e'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cybercrime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cybercrime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cybercrime", "_id"=>BSON::ObjectId('50ab97b0671fc614db00027f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000280'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00027f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000281'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50ab97b0671fc614db000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000283'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000279'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Are You Safe From Cybercrime?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cybercrime-recap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cybercrime-recap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\"><img class=\"alignright size-medium wp-image-1029587\" title=\"SOPA\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/04/SOPA-275x171.jpg\" alt=\"SOPA\" width=\"275\" height=\"171\" /></a>In our <a href=\"http://mashable.com/cyber-crime\">Cybercrime Series</a>, presented by Norton, <em>Mashable</em> explores some of the web's greatest security breaches. From celebrity hacks to mobile hacks to Facebook hacks -- these anecdotes will remind why it's always good to use protection, and that <a href=\"http://mashable.com/2011/11/17/worst-internet-passwords/\">rock-solid passwords</a> and <a href=\"http://mashable.com/2012/08/08/gmail-2-step-verification/\">two-factor authentication</a> are the first step toward security. </p>\n<p>Take a look at the summaries below and click through to read the whole article. You'll be glad you did.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/08/08/honan-hacked-details/\">What You Can Learn From Wired Reporter’s Epic Hack</a></strong></p>\n<p>1. <a href=\"http://mashable.com/2012/11/05/cybersecurity-infographic/\">65% of Internet Users Are Cybercrime Victims [INFOGRAPHIC]</a></p>\n<p>A <a href=\"http://www.juniper.net/us/en/local/pdf/additional-resources/ponemon-perceptions-network-security.pdf\" target=\"_blank\">Ponemon Institute survey</a> of 583 U.S. companies found 90% had been hacked in the past 12 months. Of those companies, most ad&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cybercrime-recap/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/cybercrime-series/\">Cybercrime Series</a>, <a href=\"http://mashable.com/tag/mobile/\">Mobile</a>, <a href=\"http://mashable.com/tag/cybercrime/\">cybercrime</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/9cKXFVomam4B8gLzQ0j5c17kdb0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ypOUOA5N9r4:fdHe0eKdaPA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ypOUOA5N9r4\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ypOUOA5N9r4/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504081", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504073"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000285'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000284'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50ab97b0671fc614db000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000287'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000284'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"World"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000288'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000284'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db00025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"middle east"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"middle east"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"middle east", "_id"=>BSON::ObjectId('50ab97b0671fc614db000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00028a'), "article_id"=>BSON::ObjectId('50ab97b0671fc614db000284'), "category_id"=>BSON::ObjectId('50ab97b0671fc614db000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"25 Must-Follow Twitter Accounts for Gaza-Israel Conflict Updates", "deck"=>"<br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>", "story"=>"      <br/>\n      <h4>972 Magazine (<a href=\"https://twitter.com/972mag\" target=\"_blank\">@972mag</a>)</h4>\n      <br/>\n              <a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag\"><img width=\"400\" style=\"border:none;\" title=\"972 Magazine (@972mag)\" src=\"http://5.mshcdn.com/wp-content/gallery/twitter-accounts-to-follow-israel-gaza-conflct/972%20magazine.png\" /></a><br/><br/>\n      <p>Bio: Independent news and commentary from Israel and Palestine</p><p><a href='http://mashable.com/2012/11/19/gaza-israel-twitter/#102133972-Magazine-972mag'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gaza-israel-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gaza-israel-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\"><img src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/gaza-twitter.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/tag/twitter/\">Twitter</a> has been abuzz with news from Gaza and Israel for much of the past week, where conflicts have recently escalated between Hamas and the Israel Defense Forces. </p>\n<p>On Nov. 14, the IDF launched Operation Pillar of Defense when it killed the military chief of Hamas' Gaza operations, Ahmed Jabari. The attack was in part a response to the onslaught of rockets fired from Gaza into southern Israel. The IDF has continued its airstrikes in Gaza, and many speculate a ground invasion could come at any point. Hamas has continued to fire rockets into Israel, and is targeting the country's two largest cities, Tel Aviv and Jerusalem, for the first time.</p>\n<p>Journalists and civilians living in both Ga&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gaza-israel-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/world/\">World</a>, <a href=\"http://mashable.com/tag/middle-east/\">middle east</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/RRW0Ye1nzK77fXxm8BQL-SLtE-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=VzsZNAX-D2g:zOqW20_YbOI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/VzsZNAX-D2g\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/VzsZNAX-D2g/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1504073", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50ab97b0671fc614db000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 13ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db00028e'), "name"=>"user12", "email"=>"user3@example.com", "role"=>5, "password_salt"=>"$2a$10$eTUMabHPmNrAq9Yxnmrpvu", "password_hash"=>"$2a$10$eTUMabHPmNrAq9YxnmrpvuldssDnMLE6ul3fAw.W8UWRTNAmCjxDK"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50ab97b0671fc614db00028e" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50ab97b0671fc614db00028e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b0671fc614db00028e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy"})
Redirected to http://www.example.com/
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 11ms (Views: 3.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00028e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000293'), "name"=>"user13", "email"=>"user4@example.com", "role"=>5, "password_salt"=>"$2a$10$4oMipDkYSuNdrPJI4183nO", "password_hash"=>"$2a$10$4oMipDkYSuNdrPJI4183nOTYGsvYr2bTXnIB2S97dJiqAGJtKpvMi"}])


Started GET "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 12ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started GET "/users/50ab97b0671fc614db000293" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab97b0671fc614db000293"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b0671fc614db000293')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b0671fc614db000293')}).limit(-1)
Completed 200 OK in 10ms (Views: 2.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000293')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db000297'), "name"=>"user14", "email"=>"mi_random@mail.co", "role"=>15, "password_salt"=>"$2a$10$Y/bn5zitEOf0bhNhcd1Fwe", "password_hash"=>"$2a$10$Y/bn5zitEOf0bhNhcd1FweLYMIHLhOP.mOHpEPr118Pgjmar7VT.C"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 55ms (Views: 47.8ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user14", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000297')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 13ms (Views: 4.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.8ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user15", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user16", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 51ms (Views: 43.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:08 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user17", "email"=>"user7@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 4.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b0671fc614db0002be'), "name"=>"user18", "email"=>"user8@example.com", "role"=>5, "password_salt"=>"$2a$10$zjgTzcm5yRNynrxEw/Hvbe", "password_hash"=>"$2a$10$zjgTzcm5yRNynrxEw/HvbeO4LaPaI91oNOHMYyeh13zFPluqFftYC"}])


Started GET "/users/50ab97b0671fc614db0002be?method=delete" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50ab97b0671fc614db0002be"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b0671fc614db0002be')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b0671fc614db0002be')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0002be')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user19", "email"=>"user9@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user19", "email"=>"user9@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50ab97b1671fc614db0002c7'), "password_salt"=>"$2a$10$KMZt6l3X9Am.ABQRECclQu", "password_hash"=>"$2a$10$KMZt6l3X9Am.ABQRECclQupPf/Ngzt1uVCUmSa.T9T7b18sIQHxP6"}])
Redirected to http://www.example.com/users/50ab97b1671fc614db0002c7
Completed 302 Found in 78ms (ActiveRecord: 0.0ms)


Started GET "/users/50ab97b1671fc614db0002c7" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50ab97b1671fc614db0002c7"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002c7')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002c7')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002c7')}).limit(-1)
Completed 200 OK in 8ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00024e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00025d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00025f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000261')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000263')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00026a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00026e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000270')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000272')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000277')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00027d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00027f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00020e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000210')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000218')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00021c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000222')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000224')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000226')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00022c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000232')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000234')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000236')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00023b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00023d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00023f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000243')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000245')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00024a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000046')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000048')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db00004a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001af')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001ca')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001d4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001d6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001d8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001df')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001e6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001e8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001ec')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001ee')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001f4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001f6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001f8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db0001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000202')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000204')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000208')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00020a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000216')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00021e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00022a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00022e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000253')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000255')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000257')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000259')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000268')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db00027b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000282')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000286')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b0671fc614db000289')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002c9'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002c9')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002cb'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002ce'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab971c671fc614d900008c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d1'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d1')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d2'), "slave"=>"Esclavo2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d2')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d3')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d4'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d4')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d6'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d8'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d8')}, {"$set"=>{"guid"=>"50ab97b1671fc614db0002d8"}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002d9'), "name"=>"user20", "email"=>"user_admin10@example.com", "role"=>1, "password_salt"=>"$2a$10$Q5zaTK/scYA8QbDM6Am/Fe", "password_hash"=>"$2a$10$Q5zaTK/scYA8QbDM6Am/FeFPWdcYKENcPNqkVaZ4xbiGZyAnKIUe2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (6.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 21ms (Views: 12.0ms | ActiveRecord: 0.0ms)


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002db'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b1671fc614db0002db')}, {"$set"=>{"guid"=>"50ab97b1671fc614db0002db"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002dd'), "name"=>"user21", "email"=>"user_admin11@example.com", "role"=>1, "password_salt"=>"$2a$10$r6Tb9XkIAhdIO1WNlGSxC.", "password_hash"=>"$2a$10$r6Tb9XkIAhdIO1WNlGSxC.ck3qSk3uVghEkxuDkIDeqt6buWgyqLO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002dd')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002de'), "headline"=>"Article 4", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b1671fc614db0002de')}, {"$set"=>{"guid"=>"50ab97b1671fc614db0002de"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002df'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b1671fc614db0002df')}, {"$set"=>{"guid"=>"50ab97b1671fc614db0002df"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b1671fc614db0002e2'), "name"=>"user22", "email"=>"user_admin12@example.com", "role"=>1, "password_salt"=>"$2a$10$457jdWYg0vafV6QH.mh2ze", "password_hash"=>"$2a$10$457jdWYg0vafV6QH.mh2zeLUeB/69uFP69ANRMnW9K0yFvFpKvYT2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab97b1671fc614db0002e4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab97b1671fc614db0002e4')})
Completed 200 OK in 65ms (Views: 57.2ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>"50ab97ac671fc614db000055"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>BSON::ObjectId('50ab97ac671fc614db000055'), "published_on"=>2012-11-20 00:00:00 UTC, "_id"=>BSON::ObjectId('50ab97b1671fc614db0002e6'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b1671fc614db0002e6')}, {"$set"=>{"guid"=>"50ab97b1671fc614db0002e6"}})
Redirected to http://www.example.com/articles/50ab97b1671fc614db0002e6
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/articles/50ab97b1671fc614db0002e6" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50ab97b1671fc614db0002e6"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-20 14:45:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e2')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ac671fc614db000055')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab97b1671fc614db0002e6')})
Completed 200 OK in 13ms (Views: 5.8ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:09 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b2671fc614db0002e7'), "name"=>"user23", "email"=>"user_admin13@example.com", "role"=>1, "password_salt"=>"$2a$10$6OeVb0FyhSXPrcd25g0/du", "password_hash"=>"$2a$10$6OeVb0FyhSXPrcd25g0/duVIgx1crvND63UQnrPOb4DuEZDAUPiA6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin13@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e7')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50ab97b2671fc614db0002e8'), "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50ab97b2671fc614db0002e8')}, {"$set"=>{"guid"=>"50ab97b2671fc614db0002e8"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b2671fc614db0002e9'), "name"=>"user24", "email"=>"user_admin14@example.com", "role"=>1, "password_salt"=>"$2a$10$sJUlDaulOy/ksOTisFVssu", "password_hash"=>"$2a$10$sJUlDaulOy/ksOTisFVssuI0//r8waE7OToWFq8qDFgUKAxCOhVqi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin14@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin14@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab97b2671fc614db0002eb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab97b2671fc614db0002eb')})
Completed 200 OK in 21ms (Views: 12.8ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"20", "headline"=>"", "deck"=>"", "story"=>"ice", "news_agency_id"=>"50ab97ac671fc614db000055"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50ab97ac671fc614db000055')}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50ab97b2671fc614db0002ed')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50ab97b2671fc614db0002ed')})
Completed 200 OK in 22ms (Views: 13.9ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b2671fc614db0002ee'), "name"=>"user25", "email"=>"user_admin15@example.com", "role"=>1, "password_salt"=>"$2a$10$yqDwVXT5w8m7gjN6SV8Wye", "password_hash"=>"$2a$10$yqDwVXT5w8m7gjN6SV8Wye5Q3l0bQWWT.zYsZkmF4zyJMJB2BbwlW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-20 11:46:10 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-20 14:45:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"turbolinks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cache-digests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exploring-rubygems"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tagging"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fnordmetric"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jruby-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"image-manipulation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bullet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ransack"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"miniprofiler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sidekiq"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-reputation-system"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exporting-csv-and-excel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"facebook-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"brakeman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-session-hijacking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"squeel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"securing-an-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rest-api-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-rails-api-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rubber-and-amazon-ec2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"wizard-forms-with-wicked"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"queue-classic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrating-to-postgresql"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"datatables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"globalize3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"copycopter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"compass-css-sprites"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refinery-cms-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"better-sass-with-bourbon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"twitter-bootstrap-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeattr"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passing-data-to-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rabl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jbuilder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"private-pub"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-urls-with-friendlyid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-html-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"oh-my-zsh"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"elasticsearch-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-identity"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-place-editing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-open-source"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"getting-started-with-spree"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mercury-editor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"playing-with-pjax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-machines-with-vagrant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"soap-with-savon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"billing-with-stripe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"draper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"spork"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-admin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-with-sorcery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"foreman"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pry-with-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"understanding-the-asset-pipeline"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-with-sunspot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mountable-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-time-web-requests"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-i-test"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"remember-me-reset-password"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"geocoder"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markdown-with-redcarpet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"resque"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-in-rails-3-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"template-inheritance"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sass-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"coffeescript-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-streaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-1-overview"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"guard"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"client-side-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"trees-with-ancestry"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-javascript-with-jasmine"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"messaging-with-faye"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"decent-exposure"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"token-fields"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-specs-and-capybara"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n-backends"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"undo-with-paper-trail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-kaminari"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"carrierwave-file-uploads"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metrics-metrics-metrics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metawhere-metasearch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authentication-from-scratch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"notifications-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"offline-apps-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-state"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"new-gem-with-bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gravatar"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beanstalkd-and-stalker"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thor"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-omniauth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"search-sort-paginate-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activerecord-relation-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongoid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-attr-accessible"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"omniauth-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"engage-with-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-walkthrough"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"inherited-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polling-for-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-table-columns"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"upgrading-to-rails-3-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"controllers-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"charts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfkit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multistep-forms"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generators-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"a-b-testing-with-a-bingo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"calendars"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-dynamic-delegator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"validations-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customizing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"introducing-devise"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"erb-blocks-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"syntax-highlighting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-mailer-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"unobtrusive-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"xss-protection-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"routing-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-record-queries-in-rails-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"bundler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-3-beta-and-rvm"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mobile-devices"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple-individually"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-model-form-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"my-favorite-web-apps-in-2009"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mongodb-and-mongomapper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tableless-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authorization-with-cancan"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"mechanize"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-nokogiri"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"embedded-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"declarative-authorization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pickle-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formtastic-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gemcutter-jeweler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cropping-images"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"include-vs-joins"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"finding-unused-css"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seed-data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"seven-security-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-versioning"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"searchlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-history-and-bookmarks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pagination-with-ajax"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"screen-scraping-with-scrapi"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"touch-and-cache"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"delayed-job"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-with-authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"feed-parsing"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"metric-fu"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"edit-multiple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cron-in-ruby"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"self-referential-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tree-based-navigation"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"three-profiling-tools"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"authlogic"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"factories-not-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rspec-matchers-macros"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"webrat"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beginning-with-cucumber"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"polymorphic-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pdfs-with-prawn"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-3-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rack-middleware"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-metal"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-engines"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"app-templates-in-rails-2-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sortable-lists"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-express-checkout"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"integrating-active-merchant"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"active-merchant-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-security"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paypal-basics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rails-2-2-extras"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"nested-resources"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"i18n"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"memoization"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"jquery"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-gem"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"paperclip"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"capistrano-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"helpers-outside-views"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"going-back"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"monitoring-with-god"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-daemon"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"starling-and-workling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rake-in-background"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"populating-a-database"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"beta-invitations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subdomains"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"passenger-in-development"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"non-active-record-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"thinking-sphinx"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"session-based-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"liquid"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"semi-static-pages"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"selenium"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"endless-page"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails-with-git"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"anonymous-scopes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"advanced-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gem-dependencies"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"tracking-attribute-changes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-zones-in-rails-2-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"gitting-rails-2-1-rc1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"exception-notifications"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"site-wide-announcements"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"auto-complete-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-out-helper-object"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"5-view-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-partials"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"request-profiling"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"analyzing-the-production-log"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"git-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"more-on-activeresource"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"activeresource-basics"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"action-caching"}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"make-resourceful"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-long-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fragment-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"page-caching"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-select-menus"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-rss-feeds"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"logging-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"yaml-configuration-file"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cookie-based-session-store"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"migrations-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http-basic-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fixtures-in-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simplify-views-with-rails-2-0"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generate-named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"generating-pdf-documents"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"destroy-without-javascript"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"scope-out"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"complex-forms-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"adding-an-environment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-controllers-with-rspec"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"markaby-in-helper"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"openid-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restful-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rake-tasks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"stopping-spam-with-akismet"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-helper-modules"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"model-name-in-url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hacking-activerecord"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sending-email"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"testing-without-fixtures"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"optimistic-locking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"how-to-make-a-generator"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"create-model-through-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-logger"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cleaning-up-the-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-with-ruby-debug"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"handling-exceptions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"update-through-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"will-paginate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"contributing-to-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"reading-the-api"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"console-tricks"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"two-many-to-many"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"catch-all-route"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"rjs-tips"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"debugging-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"ajax-with-rjs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"with-options"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"conditional-validations"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"blocks-in-view"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"customize-field-error"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"multibutton-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"simple-search-form"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"subversion-on-rails"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"custom-rest-actions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"named-routes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"making-a-plugin"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"time-in-text-field"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"formatting-time"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"pretty-page-title"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"group-by-month"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"in-groups-of"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"cross-site-scripting"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"hackers-love-mass-assignment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"sql-injection"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"the-stack-trace"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"counter-cache-column"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"eager-loading"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"super-simple-authentication"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"restricting-access"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"where-administration-goes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"looping-through-flash"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"habtm-checkboxes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"virtual-attributes"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"fun-with-find-conditions"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"performing-calculations-on-models"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dangers-of-model-in-session"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"refactoring-user-name-part-1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"filtering-sensitive-logs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"layouts-and-content-for"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"all-about-layouts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"shortcut-blocks-with-symbol-to-proc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"using-with-scope"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"move-find-into-model"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"find-through-association"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"dynamic-find-by-methods"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"caching-with-instance-variables"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505205"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497885"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497771"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1502465"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1497609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1506023"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505721"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505977"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504609"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504677"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505897"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505833"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505901"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505869"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504489"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504453"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505695"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505563"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503817"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505535"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505281"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504825"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505131"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505411"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1503733"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504219"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1505129"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504081"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:guid=>"http://mashable.com/?p=1504073"}, "fields"=>nil}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 3469ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b2671fc614db0002ee')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f0'), "name"=>"user26", "email"=>"user10@example.com", "role"=>5, "password_salt"=>"$2a$10$cZMyJU3tg0rm4vAvb0.8tO", "password_hash"=>"$2a$10$cZMyJU3tg0rm4vAvb0.8tO2Kv4W/huv0VJfketh0z2WE4TlRxsDW6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f1'), "name"=>"user27", "email"=>"user11@example.com", "role"=>5, "password_salt"=>"$2a$10$lfmNibaq0xY0x/WIb96Mju", "password_hash"=>"$2a$10$lfmNibaq0xY0x/WIb96MjumfvlzBUMY8qPeK0POJy0wKGyzCpNTX6"}])


Started GET "/" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 3ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f3'), "name"=>"user28", "email"=>"user12@example.com", "role"=>5, "password_salt"=>"$2a$10$RG33S4.a21sQOMqKQ8sKQu", "password_hash"=>"$2a$10$RG33S4.a21sQOMqKQ8sKQuEBbO7WRh3Ery4Ev/DYPOB1EUnsU0SlS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f3')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 6.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f4'), "name"=>"user29", "email"=>"user13@example.com", "role"=>5, "password_salt"=>"$2a$10$WdLngRM98fpkTNIV5uetdO", "password_hash"=>"$2a$10$WdLngRM98fpkTNIV5uetdOv2N24ud31klD7B8KACHT5SmYF.LC0Uy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 44ms (Views: 42.8ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user13@example.com"}).limit(-1)
Completed 200 OK in 73ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f5'), "name"=>"user30", "email"=>"user14@example.com", "role"=>5, "password_salt"=>"$2a$10$oMpBMlihIWn1i4HdXBK8Cu", "password_hash"=>"$2a$10$oMpBMlihIWn1i4HdXBK8Cu/pwgqjOuHti1BNjhkYXj6WO8xeCmigW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user14@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user14@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f6'), "name"=>"user31", "email"=>"user15@example.com", "role"=>5, "password_salt"=>"$2a$10$IzR8fPyIEDYPB5KQOuYjFO", "password_hash"=>"$2a$10$IzR8fPyIEDYPB5KQOuYjFOJBluZmvPc0z5K.KVg7X6qwq8UnNiF9O"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:14 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:14 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f6')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 6.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b6671fc614db0002f7'), "name"=>"user32", "email"=>"user16@example.com", "role"=>5, "password_salt"=>"$2a$10$9HUoJPc/Fxu9eOLpAnFUbO", "password_hash"=>"$2a$10$9HUoJPc/Fxu9eOLpAnFUbOn8nKEpU5HsnBG0r6mrjEPsSBoiHnaDO"}])
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db0002f8'), "name"=>"user33", "email"=>"user_admin16@example.com", "role"=>1, "password_salt"=>"$2a$10$VMaz6klVAHitDkNt3Gty6u", "password_hash"=>"$2a$10$VMaz6klVAHitDkNt3Gty6usnSa4zfdoN2ql1JtUYfi7wRWapumo7G"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db0002f8')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db0002f9'), "name"=>"user34", "email"=>"user17@example.com", "role"=>5, "password_salt"=>"$2a$10$CjP5fkF20205tv07wavhlu", "password_hash"=>"$2a$10$CjP5fkF20205tv07wavhluY.RsVaSxn3zEMu.Gc5b1x3lFbM77WeK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db0002f9')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db0002fb'), "name"=>"user35", "email"=>"user18@example.com", "role"=>5, "password_salt"=>"$2a$10$5nIKwPxvxCd7fBJ0I9XIfu", "password_hash"=>"$2a$10$5nIKwPxvxCd7fBJ0I9XIfuaBhix29q2wdOpMWiLwFYK4uILDgzUQ2"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db0002fc'), "name"=>"user36", "email"=>"user19@example.com", "role"=>5, "password_salt"=>"$2a$10$Le2AHe9BIYu06Uvlf1FZVO", "password_hash"=>"$2a$10$Le2AHe9BIYu06Uvlf1FZVOD3wpoP7ip0qDgxOHoU4IFiItpXtWv0."}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 13ms (Views: 4.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db0002fe'), "name"=>"user37", "email"=>"user20@example.com", "role"=>5, "password_salt"=>"$2a$10$bz8MJ9yTRrSQVIL5VNRM3O", "password_hash"=>"$2a$10$bz8MJ9yTRrSQVIL5VNRM3OhiUgp62UedPbyb4aO2oxX2PmTjb4tau"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db0002fe')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b7671fc614db000300'), "name"=>"user38", "email"=>"user_admin17@example.com", "role"=>1, "password_salt"=>"$2a$10$jCGNc/XuWJ/QsSeuuQ3SWe", "password_hash"=>"$2a$10$jCGNc/XuWJ/QsSeuuQ3SWe6R9gxUTmROOqXJxXcvSMR8roJA1JbsK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin17@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin17@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000300')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000300')}).limit(-1)
  Rendered areas/_form.html.erb (2.4ms)
Completed 200 OK in 14ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000300')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50ab97b7671fc614db000304')}])
Redirected to http://www.example.com/areas/50ab97b7671fc614db000304
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)


Started GET "/areas/50ab97b7671fc614db000304" for 127.0.0.1 at 2012-11-20 11:46:15 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab97b7671fc614db000304"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:45:15 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000304')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000300')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b7671fc614db000304')}).limit(-1)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db000304')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db000306'), "name"=>"user39", "email"=>"user_admin18@example.com", "role"=>1, "password_salt"=>"$2a$10$R8zEHvLRP.5FDEAB946FhO", "password_hash"=>"$2a$10$R8zEHvLRP.5FDEAB946FhOSF/C/2ExDvmnh5eo8GrqbGmCGV2buim"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
Completed 200 OK in 4ms (Views: 2.4ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000306')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000306')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 14ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000306')}).limit(-1)
  Rendered areas/_form.html.erb (41.7ms)
Completed 200 OK in 52ms (Views: 44.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db00030a'), "name"=>"user40", "email"=>"user_admin19@example.com", "role"=>1, "password_salt"=>"$2a$10$nFAl7MBwspWjy9wXcueWSu", "password_hash"=>"$2a$10$nFAl7MBwspWjy9wXcueWSuX3PTrIVwsKw8/iIdBKKwDVBAImhXlHi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db00030a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.5ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db00030a')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db00030a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 12ms (Views: 3.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db000310'), "name"=>"user41", "email"=>"user_admin20@example.com", "role"=>1, "password_salt"=>"$2a$10$ZJMp124MbGDGE1q9ApwwAu", "password_hash"=>"$2a$10$ZJMp124MbGDGE1q9ApwwAumxtOSeL1vdC7CD9xtqBxq6zxiS7n/zC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin20@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin20@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 69ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000310')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db00030f'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000310')}).limit(-1)
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 11ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000310')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 13ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db00030f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db000316'), "name"=>"user42", "email"=>"user_admin21@example.com", "role"=>1, "password_salt"=>"$2a$10$0YTFmSXLIyugozouz4t3Fu", "password_hash"=>"$2a$10$0YTFmSXLIyugozouz4t3FuNubZrVEOpv/Ru5cUgBh/dhOYtZNBWLG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000316')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex"})
Redirected to http://www.example.com/
Completed 302 Found in 10ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db000319'), "name"=>"user43", "email"=>"user_admin22@example.com", "role"=>1, "password_salt"=>"$2a$10$CA6cUIBVkHXB8p0e15AKqu", "password_hash"=>"$2a$10$CA6cUIBVkHXB8p0e15AKqucTBpRBrWwbv7G7s1KuldslPXRUssRhu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:16 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin22@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:16 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin22@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000319')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 15ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97b8671fc614db000318'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000319')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab97b8671fc614db000318/edit" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50ab97b8671fc614db000318"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000318')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000319')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b8671fc614db000318')}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 12ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db000318')})
MONGODB (28ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00031b'), "name"=>"user44", "email"=>"user_admin23@example.com", "role"=>1, "password_salt"=>"$2a$10$3p4GvgWjKePxAkFs/FA5Wu", "password_hash"=>"$2a$10$3p4GvgWjKePxAkFs/FA5WuZZW1f/1jTcuD4VmkZRji/rRoquvs0EW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
Completed 200 OK in 45ms (Views: 44.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin23@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin23@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00031a'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.4ms | ActiveRecord: 0.0ms)


Started GET "/areas/50ab97b9671fc614db00031a" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50ab97b9671fc614db00031a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031a')}).limit(-1)
Completed 200 OK in 9ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db00031a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:role=>4}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user_admin24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00031d'), "name"=>"user45", "email"=>"user_admin24@example.com", "role"=>1, "password_salt"=>"$2a$10$liHjebXjZp63PyQHQAaQvO", "password_hash"=>"$2a$10$liHjebXjZp63PyQHQAaQvOHU8HXMPJ.jruBX1MKCywsRcu0RXyVIO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user_admin24@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user_admin24@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00031c'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 12ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50ab97b9671fc614db00031c" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50ab97b9671fc614db00031c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db00031c')})
Redirected to http://www.example.com/areas
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-20 11:46:17 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-20 14:45:17 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50ab97b9671fc614db00031d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 11ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (40ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002c7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002d9')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002dd')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b1671fc614db0002e2')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b2671fc614db0002e9')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b2671fc614db0002ee')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f0')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f1')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f3')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f4')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f5')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f6')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b6671fc614db0002f7')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db0002f8')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db0002f9')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db0002fb')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db0002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db0002fe')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b7671fc614db000300')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db000306')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db00030a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db000310')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db000316')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b8671fc614db000319')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db00031b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db00031d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db000322'), "name"=>"user46", "email"=>"user21@example.com", "role"=>5, "password_salt"=>"$2a$10$P9TK.laGHZz/9I.HyJTV3.", "password_hash"=>"$2a$10$P9TK.laGHZz/9I.HyJTV3.LS4kphD9VzzOiv7dVdUygnNVF.YjHdy"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db000322')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db000325'), "name"=>"user47", "email"=>"user22@example.com", "role"=>5, "password_salt"=>"$2a$10$SaCLC8rqioZ37F2pnGWsJu", "password_hash"=>"$2a$10$SaCLC8rqioZ37F2pnGWsJuMfVk5baX1rwMt2s8CsQPEzEwTVjSD/q"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db000326'), "name"=>"user48", "email"=>"asf.as@fac.cs", "role"=>1, "password_salt"=>"$2a$10$yS2.gnlvMqYkI5juk1QAHu", "password_hash"=>"$2a$10$yS2.gnlvMqYkI5juk1QAHuGP7yj4s3Jc428Kc2uhE3Q2Bu4A1iS4G"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db000325')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50ab97b9671fc614db000326')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db000328'), "name"=>"user49", "email"=>"user23@example.com", "role"=>5, "password_salt"=>"$2a$10$4ic4szcO31HKUb8vypQDB.", "password_hash"=>"$2a$10$4ic4szcO31HKUb8vypQDB.dwQ..yMk/Js2hrAdFzxbka4rgiJzfzK"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db000329'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50ab97b9671fc614db000328"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50ab97b9671fc614db000328"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50ab97b9671fc614db000328", "_id"=>BSON::ObjectId('50ab97b9671fc614db00032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00032b'), "user_id"=>BSON::ObjectId('50ab97b9671fc614db000328'), "category_id"=>BSON::ObjectId('50ab97b9671fc614db00032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00032c'), "name"=>"user50", "email"=>"user24@example.com", "role"=>5, "password_salt"=>"$2a$10$m8izpfIBQoVat1CRcPtDyu", "password_hash"=>"$2a$10$m8izpfIBQoVat1CRcPtDyuW1BGWpqL9eKLEiHwhORtUAYmI8JtnxK"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00032d'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00032e'), "user_id"=>BSON::ObjectId('50ab97b9671fc614db00032c'), "category_id"=>BSON::ObjectId('50ab97b9671fc614db00032d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97b9671fc614db00032f'), "name"=>"user51", "email"=>"user25@example.com", "role"=>5, "password_salt"=>"$2a$10$gXxq/.TUMbDGWnMuZoNNe.", "password_hash"=>"$2a$10$gXxq/.TUMbDGWnMuZoNNe.mpf/0EGNvfxK/Ec0yniesPKo5svBIfq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000330'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000332'), "user_id"=>BSON::ObjectId('50ab97ba671fc614db000331'), "category_id"=>BSON::ObjectId('50ab97ba671fc614db000330')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000333'), "name"=>"user53", "email"=>"user27@example.com", "role"=>5, "password_salt"=>"$2a$10$g7cI3u.oy3uYPICBOcZL1e", "password_hash"=>"$2a$10$g7cI3u.oy3uYPICBOcZL1efBjq7uWtIxWBy9W25at9EjmavazHxHW"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000334'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50ab97ba671fc614db000333"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50ab97ba671fc614db000333"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50ab97ba671fc614db000333", "_id"=>BSON::ObjectId('50ab97ba671fc614db000335')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000336'), "name"=>"user54", "email"=>"user28@example.com", "role"=>5, "password_salt"=>"$2a$10$6NT4zf8jWRPfLi9QcNgNju", "password_hash"=>"$2a$10$6NT4zf8jWRPfLi9QcNgNju1QTIH5o6oXGVyP9NPKXaPAXibMA7n5."}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000337'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000338'), "name"=>"user55", "email"=>"user29@example.com", "role"=>5, "password_salt"=>"$2a$10$.br.xjzq/xDuAIYYt301re", "password_hash"=>"$2a$10$.br.xjzq/xDuAIYYt301re6.ucfcYD0XJPT.zJaEK5uHJ1JnuTrJq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000339'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000055')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ac671fc614db000056')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50ab97ba671fc614db00033c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ba671fc614db00033c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"is_api"=>false, "_id"=>BSON::ObjectId('50ab97ba671fc614db000340'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50ab97ba671fc614db000340')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db000345'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50ab97ba671fc614db000345')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50ab97ba671fc614db00034a'), "name"=>"Area Nueva"}])
