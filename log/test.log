Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (22ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (33ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50a970de1d44b60cb7000321')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50a970de1d44b60cb7000323')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50a970de1d44b60cb7000325')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45561d44b60f5b000002'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45561d44b60f5b000002')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45561d44b60f5b000006'), "name"=>"aNewCategory"}])
MONGODB (2ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45561d44b60f5b000006')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45561d44b60f5b000007'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (20ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (96ms) rails3_mongoid_devise_test['areas'].find({})
  Rendered users/new.html.erb within layouts/application (138.1ms)
Completed 200 OK in 243ms (Views: 207.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user1", "email"=>"user1@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
  Rendered users/new.html.erb within layouts/application (37.0ms)
Completed 200 OK in 42ms (Views: 38.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user2", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 4.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45571d44b60f5b000011'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$j/BbIvsOkeb67hzZDb2rQe", "password_hash"=>"$2a$10$j/BbIvsOkeb67hzZDb2rQepL4Xe7kBKAQKiSr9M2fJGgLJ92.DkAW"}])


Started GET "/users/50aa45571d44b60f5b000011?method=delete" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aa45571d44b60f5b000011"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45571d44b60f5b000011')}).limit(-1)
Completed 200 OK in 7ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45571d44b60f5b000011')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45571d44b60f5b000013'), "name"=>"user4", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$uyWCEDeYmJcmXQRlRLStPu", "password_hash"=>"$2a$10$uyWCEDeYmJcmXQRlRLStPuxNtRNTyBTzVemJ9jwUgI/N5A1k8p.km"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 40.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:31 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user4", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:31 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45571d44b60f5b000013')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00001a'), "name"=>"user5", "email"=>"user4@example.com", "role"=>"reader", "password_salt"=>"$2a$10$aCp.Pha0DVNKWaCFIwjvy.", "password_hash"=>"$2a$10$aCp.Pha0DVNKWaCFIwjvy.MK4ypbr7JOLrb4o0MvzDjpSZOKc0CZ."}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 48ms (Views: 46.7ms | ActiveRecord: 0.0ms)


Started GET "/users/50aa45581d44b60f5b00001a" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b00001a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b00001a')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00001a')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user6", "email"=>"user5@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user6", "email"=>"user5@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aa45581d44b60f5b00001e'), "password_salt"=>"$2a$10$pCr/3rWwXom4j8IQThLrbe", "password_hash"=>"$2a$10$pCr/3rWwXom4j8IQThLrbedue2c5bn7M2oSX5qNoJHeMLrOdyymqW"}])
Redirected to http://www.example.com/users/50aa45581d44b60f5b00001e
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/users/50aa45581d44b60f5b00001e" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b00001e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b00001e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b00001e')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00001e')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user7", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000024'), "name"=>"user8", "email"=>"user7@example.com", "role"=>"reader", "password_salt"=>"$2a$10$bGYSYv.AweXsNRlkgFdsKO", "password_hash"=>"$2a$10$bGYSYv.AweXsNRlkgFdsKO61k6YKPd3oRBQShwfSK5l1BKn.8iaIy"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aa45581d44b60f5b000024" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b000024"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b000024')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000024')})
Redirected to http://www.example.com/users
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (18ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50aa45581d44b60f5b000028')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000028')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00002b'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00002b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00002f'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b00002f')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b00002f"}})
MONGODB (18ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000030'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000031'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b000031')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b000031"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000032'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50aa45581d44b60f5b000031"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50aa45581d44b60f5b000031"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50aa45581d44b60f5b000031", "_id"=>BSON::ObjectId('50aa45581d44b60f5b000033')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000034'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b000034')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b000034"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000035'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000036'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b000036')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b000036"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000037'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000039'), "article_id"=>BSON::ObjectId('50aa45581d44b60f5b000038'), "category_id"=>BSON::ObjectId('50aa45581d44b60f5b000037')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003a'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003a')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b00003a"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003b'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50aa45581d44b60f5b00003a"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50aa45581d44b60f5b00003a"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50aa45581d44b60f5b00003a", "_id"=>BSON::ObjectId('50aa45581d44b60f5b00003c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003d'), "article_id"=>BSON::ObjectId('50aa45581d44b60f5b00003a'), "category_id"=>BSON::ObjectId('50aa45581d44b60f5b00003c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003e'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003e')}, {"$set"=>{"guid"=>"50aa45581d44b60f5b00003e"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00003f'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000040'), "article_id"=>BSON::ObjectId('50aa45581d44b60f5b00003e'), "category_id"=>BSON::ObjectId('50aa45581d44b60f5b00003f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000042'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000042')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000044'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000044')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000049'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.5ms)
Completed 200 OK in 26ms (Views: 24.1ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aa45581d44b60f5b000049" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b000049"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b000049')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000049')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00004a'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa45581d44b60f5b00004a/edit" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b00004a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b00004a')}).limit(-1)
MONGODB (20ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b00004a')})
  Rendered news_agencies/_form.html.erb (64.0ms)
Completed 200 OK in 69ms (Views: 67.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00004a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00004b'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa45581d44b60f5b00004b" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b00004b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b00004b')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00004b')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b00004d')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b00004e')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 9ms (Views: 6.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000050')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aa45581d44b60f5b000051')}])
Redirected to http://www.example.com/news_agencies/50aa45581d44b60f5b000051
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa45581d44b60f5b000051" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa45581d44b60f5b000051"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45581d44b60f5b000051')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000051')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000053')})
  Rendered news_agencies/_form.html.erb (4.3ms)
Completed 200 OK in 7ms (Views: 6.0ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000054')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 9ms (Views: 6.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000055'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000056')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 7ms (Views: 5.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000057')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 9ms (Views: 6.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000055')})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa45581d44b60f5b000059')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:42:32 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:41:32 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00005b'), "slave"=>"Esclavo2"}])
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00005b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00005d'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00005d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00005e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00005e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00005f'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00005f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000061'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000061')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b000066'), "name"=>"user9", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ye1btz9w1.WanfNgmjn8RO", "password_hash"=>"$2a$10$ye1btz9w1.WanfNgmjn8RON7GiclViug9y1Ce9neB8lh44/qvTmTq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000066')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45581d44b60f5b00006a'), "name"=>"user10", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$PVsqttdUcrEZc3cs8IUbd.", "password_hash"=>"$2a$10$PVsqttdUcrEZc3cs8IUbd.R.bszRcRnlxY4yjVgsaeL1k9GuIj8iy"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00006b'), "name"=>"user11", "email"=>"asf.as@fac.cs", "role"=>"admin", "password_salt"=>"$2a$10$ylz4G2u9wuoZlGt7j.g0FO", "password_hash"=>"$2a$10$ylz4G2u9wuoZlGt7j.g0FOBguTIoAho72sDHrgkfvJ1SKDJSiKdHy"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00006a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00006b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00006e'), "name"=>"user12", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$Dx3UfNMLLt2ArM.gYFDYLO", "password_hash"=>"$2a$10$Dx3UfNMLLt2ArM.gYFDYLOtGLR4CkdAw44zGj91Xpg6DRxZqFr6BO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
Completed 200 OK in 5ms (Views: 3.7ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB [DEBUG] Cursor#close 3045156569476949200
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (14.9ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45591d44b60f5b00006e')}).limit(-1)
Completed 200 OK in 49ms (Views: 47.2ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB [DEBUG] Cursor#close 8219012253142148356
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.5ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.8ms)
MONGODB (22ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000070')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000070')})
Completed 200 OK in 73ms (Views: 71.9ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.7ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000071')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000071')})
Completed 200 OK in 15ms (Views: 12.7ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000072')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa45591d44b60f5b000072')})
Completed 200 OK in 48ms (Views: 47.2ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aa45591d44b60f5b000073'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b000073')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b000073"}})
Redirected to http://www.example.com/articles/50aa45591d44b60f5b000073
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa45591d44b60f5b000073" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa45591d44b60f5b000073"}
MONGODB (5ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa45591d44b60f5b000073')}).limit(-1)
Completed 200 OK in 10ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aa45591d44b60f5b000075'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b000075')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b000075"}})
Redirected to http://www.example.com/articles/50aa45591d44b60f5b000075
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa45591d44b60f5b000075" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa45591d44b60f5b000075"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa45591d44b60f5b000075')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000077'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b000077')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b000077"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB [DEBUG] Cursor#close 5704312375962691038
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000079'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b000079')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b000079"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].insert([{"name"=>"articlesshow_non_published", "time"=>2012-11-19 14:42:33 UTC, "_id"=>BSON::ObjectId('50aa45591d44b60f5b00007a')}])
Completed 500 Internal Server Error in 3ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aa45591d44b60f5b00007b", "headline"=>"Article 4", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00007b'), "headline"=>"Article 4", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b00007b')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b00007b"}})
Redirected to http://www.example.com/articles/50aa45591d44b60f5b00007b
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa45591d44b60f5b00007b" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa45591d44b60f5b00007b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa45591d44b60f5b00007b')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00007d'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45591d44b60f5b00007d')}, {"$set"=>{"guid"=>"50aa45591d44b60f5b00007d"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB [DEBUG] Cursor#close 9124357991538025983
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:33 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:33 UTC}})
MONGODB [DEBUG] Cursor#close 5383797211683284490
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 8ms (Views: 7.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000080'), "name"=>"user13", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hC.juixxg1p8Hf75tn2ug.", "password_hash"=>"$2a$10$hC.juixxg1p8Hf75tn2ug.d/3IMYsBj2rL7LhL7OeOBIuDEIvUMXu"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000081'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000082'), "name"=>"user14", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$Hb4jVKc.bSEDSjp0JTeXGe", "password_hash"=>"$2a$10$Hb4jVKc.bSEDSjp0JTeXGez5jwBxTnh1lhAAA0Hh.QkiQo7SzyzH2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000083'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50aa45591d44b60f5b000082"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50aa45591d44b60f5b000082"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50aa45591d44b60f5b000082", "_id"=>BSON::ObjectId('50aa45591d44b60f5b000084')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000085'), "name"=>"user15", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$R.TaG8/lPLMMGzN47dn4ue", "password_hash"=>"$2a$10$R.TaG8/lPLMMGzN47dn4ueJELwy8sjkHvjqXqwblylI54OAKFNBxK"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000086'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000087'), "name"=>"user16", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$Cow5j.HqGwBLuEh1M/FKVe", "password_hash"=>"$2a$10$Cow5j.HqGwBLuEh1M/FKVeMBTBHrUROGtpl8WBK98hAQNN9WV8sSq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b000088'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00008a'), "user_id"=>BSON::ObjectId('50aa45591d44b60f5b000089'), "category_id"=>BSON::ObjectId('50aa45591d44b60f5b000088')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00008b'), "name"=>"user18", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$WcBaKnRZNMDgopbroSISQe", "password_hash"=>"$2a$10$WcBaKnRZNMDgopbroSISQefzDhvscZwbhPtEn2IWT4VRocV9bXrwO"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00008c'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50aa45591d44b60f5b00008b"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50aa45591d44b60f5b00008b"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50aa45591d44b60f5b00008b", "_id"=>BSON::ObjectId('50aa45591d44b60f5b00008d')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00008e'), "user_id"=>BSON::ObjectId('50aa45591d44b60f5b00008b'), "category_id"=>BSON::ObjectId('50aa45591d44b60f5b00008d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45591d44b60f5b00008f'), "name"=>"user19", "email"=>"user18@example.com", "role"=>"reader", "password_salt"=>"$2a$10$cpfAw0BeOSrZeAfQll1nbu", "password_hash"=>"$2a$10$cpfAw0BeOSrZeAfQll1nbus4ij940VFYAOz.lXbxYCQQuP2R50i/y"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa455a1d44b60f5b000090'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa455a1d44b60f5b000091'), "user_id"=>BSON::ObjectId('50aa45591d44b60f5b00008f'), "category_id"=>BSON::ObjectId('50aa455a1d44b60f5b000090')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00002f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000034')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000036')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50a970de1d44b60cb7000339')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000031')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00003a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00003e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000073')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000075')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000077')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000079')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00007b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00007d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa455a1d44b60f5b000092')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa455a1d44b60f5b000093')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"turbolinks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000094')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cache-digests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000095')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exploring-rubygems"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000096')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tagging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000097')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fnordmetric"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000098')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jruby-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b000099')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"image-manipulation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bullet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ransack"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"miniprofiler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sidekiq"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-reputation-system"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b00009f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exporting-csv-and-excel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"facebook-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"brakeman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-session-hijacking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"squeel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"securing-an-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rest-api-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-rails-api-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rubber-and-amazon-ec2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"wizard-forms-with-wicked"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"queue-classic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrating-to-postgresql"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"datatables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"globalize3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"copycopter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"compass-css-sprites"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refinery-cms-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"better-sass-with-bourbon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"twitter-bootstrap-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeattr"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passing-data-to-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rabl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jbuilder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"private-pub"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-urls-with-friendlyid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-html-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"oh-my-zsh"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"elasticsearch-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-identity"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-place-editing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-open-source"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-spree"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455c1d44b60f5b0000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mercury-editor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"playing-with-pjax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-machines-with-vagrant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"soap-with-savon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"billing-with-stripe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"spork"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-admin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-with-sorcery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"foreman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pry-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"understanding-the-asset-pipeline"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-with-sunspot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mountable-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-time-web-requests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-i-test"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"remember-me-reset-password"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"geocoder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markdown-with-redcarpet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"resque"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-in-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"template-inheritance"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sass-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"coffeescript-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-streaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-1-overview"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"guard"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"client-side-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"trees-with-ancestry"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-javascript-with-jasmine"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"messaging-with-faye"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"decent-exposure"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"token-fields"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-specs-and-capybara"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n-backends"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"undo-with-paper-trail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-kaminari"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"carrierwave-file-uploads"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metrics-metrics-metrics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metawhere-metasearch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ea')}])
MONGODB (19ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-from-scratch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"notifications-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-state"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"new-gem-with-bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gravatar"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beanstalkd-and-stalker"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-omniauth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-sort-paginate-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activerecord-relation-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongoid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-attr-accessible"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"engage-with-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"inherited-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polling-for-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-table-columns"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"controllers-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfkit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multistep-forms"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"a-b-testing-with-a-bingo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"calendars"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-dynamic-delegator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"validations-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customizing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"introducing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"erb-blocks-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"syntax-highlighting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-mailer-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"unobtrusive-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"xss-protection-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-beta-and-rvm"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mobile-devices"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple-individually"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"my-favorite-web-apps-in-2009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongodb-and-mongomapper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tableless-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authorization-with-cancan"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mechanize"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000126')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-nokogiri"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"embedded-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"declarative-authorization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pickle-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gemcutter-jeweler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cropping-images"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"include-vs-joins"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"finding-unused-css"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seed-data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seven-security-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"searchlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-and-bookmarks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-scrapi"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"touch-and-cache"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"delayed-job"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-with-authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"feed-parsing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metric-fu"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cron-in-ruby"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"self-referential-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tree-based-navigation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"three-profiling-tools"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"factories-not-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rspec-matchers-macros"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"webrat"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beginning-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polymorphic-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfs-with-prawn"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-3-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-middleware"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-metal"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"app-templates-in-rails-2-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-lists"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-express-checkout"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"integrating-active-merchant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-merchant-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000155')}])
MONGODB (18ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-security"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-2-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"memoization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jquery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paperclip"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"capistrano-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"helpers-outside-views"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"going-back"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"monitoring-with-god"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-daemon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000164')}])
MONGODB (2ms) rails3_mongoid_devise_test['articles'].find({:guid=>"starling-and-workling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rake-in-background"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"populating-a-database"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beta-invitations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passenger-in-development"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"non-active-record-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thinking-sphinx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"session-based-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"liquid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"semi-static-pages"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"selenium"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"endless-page"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails-with-git"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"anonymous-scopes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gem-dependencies"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tracking-attribute-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-zones-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gitting-rails-2-1-rc1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exception-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"site-wide-announcements"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"auto-complete-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-out-helper-object"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"5-view-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-partials"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-profiling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"analyzing-the-production-log"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"git-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-activeresource"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeresource-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"make-resourceful"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-long-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fragment-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-select-menus"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-rss-feeds"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"logging-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"yaml-configuration-file"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cookie-based-session-store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-basic-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fixtures-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simplify-views-with-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generate-named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-pdf-documents"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"destroy-without-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"scope-out"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"adding-an-environment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-controllers-with-rspec"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b00019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markaby-in-helper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restful-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rake-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"stopping-spam-with-akismet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-helper-modules"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-name-in-url"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hacking-activerecord"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-without-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"optimistic-locking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-to-make-a-generator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"create-model-through-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-logger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ad')}])
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cleaning-up-the-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-with-ruby-debug"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"handling-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"update-through-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"will-paginate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"reading-the-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"console-tricks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"two-many-to-many"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"catch-all-route"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rjs-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-with-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"with-options"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"conditional-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"blocks-in-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customize-field-error"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multibutton-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subversion-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rest-actions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-plugin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-in-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formatting-time"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-page-title"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"group-by-month"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-groups-of"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cross-site-scripting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hackers-love-mass-assignment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sql-injection"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-stack-trace"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"counter-cache-column"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"eager-loading"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"super-simple-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restricting-access"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d1')}])
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:guid=>"where-administration-goes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"looping-through-flash"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"habtm-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fun-with-find-conditions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"performing-calculations-on-models"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-model-in-session"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"filtering-sensitive-logs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"layouts-and-content-for"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"all-about-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"shortcut-blocks-with-symbol-to-proc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001df')}])
MONGODB (2ms) rails3_mongoid_devise_test['articles'].find({:guid=>"using-with-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"move-find-into-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"find-through-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-find-by-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-with-instance-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455d1d44b60f5b0001e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1432837"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e7'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Small Business"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Small Business"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Small Business", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"contributors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"contributors", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001eb'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"credit-card"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"credit-card"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"credit-card", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ed'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ef'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mobile payments"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mobile payments"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mobile payments", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f3'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nfc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nfc", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f5'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"open forum"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"open forum"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"open forum", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f7'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surcharge"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"surcharge"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"surcharge", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Charging a Credit Surcharge Will Cost You Customers", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wnVtDwFm9t8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wnVtDwFm9t8/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1432837", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501125"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fb'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Jobs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Jobs", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fd'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mashable Job Board"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mashable Job Board"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mashable Job Board", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ff'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"boombox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"boombox"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"boombox", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000201'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sonico"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sonico"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sonico", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000203'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the onion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the onion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the onion", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000205'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"weekly jobs roundup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"weekly jobs roundup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"weekly jobs roundup", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000207'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Hunting for a Job? Check 160+ Listings From The Onion and More", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/p2L1XojY2T0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/p2L1XojY2T0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501125", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000209'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Dyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Dyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Dyle", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elgato"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elgato"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elgato", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"eyetv"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"eyetv"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"eyetv", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iOS"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iOS"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iOS", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000211'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iPod Touch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iPod Touch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iPod Touch", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000213'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ipad"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ipad", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000215'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000217'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Broadcast TV Comes to the iPhone and iPad", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/txermFfF-9I\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/txermFfF-9I/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500437"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000219'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000218'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexa von tobel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexa von tobel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexa von tobel", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000218'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000218'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexa von Tobel: 4 TEDTalks That Impart True Insight", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/E4Cj0YJ43xI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/E4Cj0YJ43xI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500437", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497215"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tim O'Reilly"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tim O'Reilly"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tim O'Reilly", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000221'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000222'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Tim O’Reilly: 10 TEDTalks That Stretched My Mind", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/IMokRVf1LNgu_4uSV4MmvSAxnCE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/IMokRVf1LNgu_4uSV4MmvSAxnCE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/IMokRVf1LNgu_4uSV4MmvSAxnCE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/IMokRVf1LNgu_4uSV4MmvSAxnCE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/OVDQo6XpeKA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/OVDQo6XpeKA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497215", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494993"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000224'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000223'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elif shafak"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elif shafak"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elif shafak", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000226'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000223'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000227'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000223'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Elif Shafak: 8 Talks That Captivated Me", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WdNd3V99t9k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WdNd3V99t9k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494993", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494755"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000229'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000228'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"damon lindelof"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"damon lindelof"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"damon lindelof", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000228'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022c'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000228'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Damon Lindelof: 5 TEDTalks I Sent to My Friends", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/I0YszqNvoSM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/I0YszqNvoSM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494755", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000228')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502809"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022e'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022d'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"irobot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"irobot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"irobot", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000230'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022d'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"robots"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"robots"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"robots", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000231')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000232'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022d'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000231')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000234'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022d'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Robot Hand Picks Up Nyan Cat, What Else is Possible?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WDBiv5gmBkc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WDBiv5gmBkc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502809", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00022d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502857"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000236'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000235'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"SkinnyScoop"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"SkinnyScoop"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"SkinnyScoop", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000238'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000235'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"pinterest"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"pinterest", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023a'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000235'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"SkinnyScoop Brings the Conversation Into Pinterest-Style Recommendations", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/m9cHYJETtLE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/m9cHYJETtLE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502857", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502515"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023c'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dear kate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"dear kate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"dear kate", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023e'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"fashion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"fashion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"fashion", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000240'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"julie sygiel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"julie sygiel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"julie sygiel", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000241')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000242'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000241')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"lingerie"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"lingerie"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"lingerie", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000244'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000243')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"underwear"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"underwear"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"underwear", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000245')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000246'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000245')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Leak-Resistant Lingerie Could Revolutionize ‘That Time of the Month’", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/-8w8Fd8151P-hZeVtAAQMuHRdcM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/-8w8Fd8151P-hZeVtAAQMuHRdcM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/-8w8Fd8151P-hZeVtAAQMuHRdcM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/-8w8Fd8151P-hZeVtAAQMuHRdcM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qubde4H6Jro\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qubde4H6Jro/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502515", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00023b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503063"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000248'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000247'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"acquisition"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"acquisition"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"acquisition", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000249')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024a'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000247'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000249')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cisco"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cisco"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cisco", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024c'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000247'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"meraki"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"meraki"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"meraki", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024e'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000247'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Cisco Acquires Cloud Networking Firm Meraki for $1.2 Billion", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/eiqIH_m9YyM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/eiqIH_m9YyM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503063", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000247')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502455"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000250'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000252'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Viral Video Recap"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Viral Video Recap"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Viral Video Recap", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000254'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000255'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"viral videos"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"viral videos", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000257'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Viral Video Recap: Funniest Memes of the Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7rgKdRzUxb0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7rgKdRzUxb0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502455", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502953"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000259'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000258'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Kohler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Kohler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Kohler", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000258'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"speakers"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"speakers", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000258'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Impressive Kohler Shower Head Doubles as Wireless Speaker [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ZlY5SIVXHGQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ZlY5SIVXHGQ/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502953", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494889"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000260'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"YouTube"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"YouTube"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"YouTube", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000262'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000264'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000265'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000267'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000266')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holidays 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holidays 2012", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000269'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Cook a Complete Thanksgiving Meal Using YouTube", "deck"=>"<br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"      <br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cONrshwgQ58\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cONrshwgQ58/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494889", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499819"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026e'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"infographics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"infographics", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000271'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"job search series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"job search series", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000273'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000274'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"talent"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"talent"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"talent", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000276'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Find Top Tech Talent on Social Media", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XEQuj5cSrnc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XEQuj5cSrnc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499819", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00026c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499123"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000278'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Lifestyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Lifestyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Lifestyle", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027a'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"health"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"health"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"health", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027c'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000270')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Late-Night Gadget Use Damages Your Sleep Cycle [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uNYW_P3_gqo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uNYW_P3_gqo/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499123", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501261"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000281'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000280'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000283'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000280'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kickstarter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kickstarter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kickstarter", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000285'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000280'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"toys"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"toys"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"toys", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000287'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000280'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000286')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Ex-Apple Employee Wants to Create the Best Toy Blocks Ever", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/w9cjso57EEA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/w9cjso57EEA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501261", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000280')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502859"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000289'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note 2", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note II"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note II"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note II", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"american music awards"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"american music awards"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"american music awards", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00028e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"samsung"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"samsung"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"samsung", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000290')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000291'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000290')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"American Music Awards Goes Paperless, Uses Galaxy Note II to Announce Winners", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/o_kY8ncjR6k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/o_kY8ncjR6k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502859", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000288')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502805"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000293'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000292'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Black Ops 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Black Ops 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Black Ops 2", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000295'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000292'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000294')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call of Duty"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call of Duty"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call of Duty", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000296')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000297'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000292'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000296')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"‘Call of Duty: Black Ops 2′ Sales Smash Records, Makes $500M in One Day [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/4uDLi6Bm8KE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/4uDLi6Bm8KE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502805", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000292')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497659"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b000299'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gadgets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gadgets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gadgets", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029b'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gift of the Day"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gift of the Day"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gift of the Day", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029d'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029f'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00029e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tech"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tech"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tech", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"bluetooth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"bluetooth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"bluetooth", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a3'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a4'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000268')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a5'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b00025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Your Favorite Music Fan Will Treasure This Twistable Wireless Speaker", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QJ41FmQvibk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QJ41FmQvibk/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497659", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b000298')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502719"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a7'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facetime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facetime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facetime", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ab'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"imessage"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"imessage"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"imessage", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ad'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iMessage and FaceTime Back Up, Apple Users Complain About Outage on Twitter", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/_K4IZeyVWbE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/_K4IZeyVWbE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502719", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500533"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002af'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Top Kids Apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Top Kids Apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Top Kids Apps", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b0')}])
MONGODB (28ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b2'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b3'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kids apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kids apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kids apps", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b5'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Top 5 Apps Your Kids Will Love This Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/M_sP0aF6zOI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/M_sP0aF6zOI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500533", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1474387"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b7'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"black friday"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"black friday", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"deals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"deals"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"deals", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002bb'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holiday 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holiday 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holiday 2012", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002bd'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"shopping"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"shopping", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002bf'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Money-Saving Apps for Black Friday", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/-lh-h83Hfdw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/-lh-h83Hfdw/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1474387", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501469"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Drobo Mini"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Drobo Mini"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Drobo Mini", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c3'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Hard Drives"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Hard Drives"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Hard Drives", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c5'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Thunderbolt"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Thunderbolt"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Thunderbolt", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c7'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"backup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"backup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"backup", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ca'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Drobo Mini, the Sophisticated Backup System In a Small Package [REVIEW]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/r4vs_Z3Mil0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/r4vs_Z3Mil0/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501469", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499833"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cc'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cd'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002ce'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cf'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000272')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d0'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"recruit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"recruit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"recruit", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d3'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Use Pinterest to Recruit", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Kxg0b61g8pI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Kxg0b61g8pI/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502593"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d5'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d4'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d6'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d4'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d8'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d4'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d4'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Many Black Friday Shoppers to Begin Before 3 A.M. [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/SH2JdkxepvQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/SH2JdkxepvQ/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502593", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502519"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002db'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call Me Maybe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call Me Maybe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call Me Maybe", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002dd'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Carly Rae Jepsen"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Carly Rae Jepsen"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Carly Rae Jepsen", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002de')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002df'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002de')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e1'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e2'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Controls ‘Call Me Maybe’ With His Actual Heart", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1-9B7hN2x8Q\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1-9B7hN2x8Q/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502519", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502393"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e4'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e6'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e8'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e9'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002eb'), "article_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Meet the Super Fan Who Waited in Line for a Month for a Wii U [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1qg-znEVZxo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1qg-znEVZxo/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502393", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa455f1d44b60f5b0002e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502543"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ed'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sunday Comics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sunday Comics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sunday Comics", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ef'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f0'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"investors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"investors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"investors", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f2'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f3'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Is Apple Bipolar? [SUNDAY COMICS]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/MO4j9uWcB1c\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/MO4j9uWcB1c/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502543", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1495167"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f5'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Fox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Fox"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Fox", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f7'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f9'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports illustrated"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports illustrated"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports illustrated", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fb'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fa')}])
MONGODB (15ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sportsvite"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sportsvite"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sportsvite", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fd'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Yahoo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Yahoo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Yahoo", "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b0002ff'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b0002fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cbs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cbs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cbs", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000300')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b000301'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b000300')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"data", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000302')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b000303'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b000302')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nbc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nbc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nbc", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000304')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b000305'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b000304')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nfl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nfl", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000306')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45601d44b60f5b000307'), "article_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4'), "category_id"=>BSON::ObjectId('50aa45601d44b60f5b000306')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Analysis of NFL Analysts: Which ‘Experts’ Get It Right?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/POfHkvSvBJs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/POfHkvSvBJs/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1495167", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa45601d44b60f5b0002f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa455a1d44b60f5b000092')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa455a1d44b60f5b000093')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000150')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000151')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000152')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000094')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000095')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000096')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000097')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000098')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b000099')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b00009f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455c1d44b60f5b0000c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ef')})
MONGODB [DEBUG] cursor.refresh() for cursor 4163328541663887206
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0000ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000100')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000101')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000102')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000103')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000104')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000105')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000106')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000107')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000108')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000109')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00010f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000110')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000111')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000112')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000113')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000114')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000115')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000116')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000117')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000118')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000119')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00011f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000120')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000121')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000122')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000123')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000124')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000125')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000126')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000127')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000128')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000129')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00012f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000130')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000131')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000132')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000133')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000134')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000135')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000136')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000137')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000138')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000139')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00013f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000140')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000141')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000142')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000143')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000144')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000145')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000146')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000147')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000148')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000149')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00014f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000153')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000154')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000155')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000156')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000157')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000158')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000159')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00015f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000160')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000161')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000162')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000163')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000164')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000165')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000166')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000167')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000168')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000169')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00016f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000170')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000171')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000172')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000173')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000174')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000175')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000176')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000177')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000178')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000179')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00017f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000180')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000181')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000182')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000183')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000184')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000185')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000186')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000187')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000188')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000189')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00018f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000190')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000191')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000192')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000193')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000194')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000195')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000196')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000197')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000198')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b000199')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b00019f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455d1d44b60f5b0001e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000208')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000218')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00021e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000223')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000228')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00022d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000235')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00023b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000247')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00024f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000258')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00025e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00026c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000277')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000280')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000288')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000292')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000298')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002f4')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000308')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa45601d44b60f5b000309')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000308')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000309')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa45631d44b60f5b00030a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa45631d44b60f5b00030b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45631d44b60f5b00030a')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45631d44b60f5b00030b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa45651d44b60f5b00030c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa45651d44b60f5b00030d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45651d44b60f5b00030e'), "name"=>"user20", "email"=>"user19@example.com", "role"=>"reader", "password_salt"=>"$2a$10$rfaBMivjoXkUObnq/knO..", "password_hash"=>"$2a$10$rfaBMivjoXkUObnq/knO..I1PmDuP5wA6r61BFfqDh9jMC9j7U2Ia"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:45 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:45 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:45 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user19@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:45 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user19@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:45 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:45 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030e')}).limit(-1)
Completed 200 OK in 46ms (Views: 45.0ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000310'), "name"=>"user21", "email"=>"user20@example.com", "role"=>"reader", "password_salt"=>"$2a$10$HtbaZlhChhapFdltMExMJ.", "password_hash"=>"$2a$10$HtbaZlhChhapFdltMExMJ.WYpExayCC.ASViglWvJIMLzOf3ufkdS"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 4ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000312'), "name"=>"user22", "email"=>"user21@example.com", "role"=>"reader", "password_salt"=>"$2a$10$SclhmBJBXIkBC7ING.ipnu", "password_hash"=>"$2a$10$SclhmBJBXIkBC7ING.ipnuL9XMoWB0X3FvD7vO7V1af4e/DmLYPEu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45661d44b60f5b000312')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000313'), "name"=>"user23", "email"=>"user22@example.com", "role"=>"reader", "password_salt"=>"$2a$10$VZvqCVQ.919ejAyEwcLZ1O", "password_hash"=>"$2a$10$VZvqCVQ.919ejAyEwcLZ1OAogzvk3Qe7bvVFIegYZiRSI0M2T0zq6"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000314'), "name"=>"user24", "email"=>"user23@example.com", "role"=>"reader", "password_salt"=>"$2a$10$JOHY7EGQMa5QJDUo4Jc5qu", "password_hash"=>"$2a$10$JOHY7EGQMa5QJDUo4Jc5qukxIvJYtNq7mOqM4E2QRmcpRL.bI5FVy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user23@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user23@example.com"}).limit(-1)
Completed 200 OK in 73ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000315'), "name"=>"user25", "email"=>"user24@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ulfxQ9RzYjO90V9QtdFi6.", "password_hash"=>"$2a$10$ulfxQ9RzYjO90V9QtdFi6.orA8lNjiZASD9XiEHA6oNZzgW91nwa6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user24@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user24@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 77ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45661d44b60f5b000315')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000316'), "name"=>"user26", "email"=>"user25@example.com", "role"=>"reader", "password_salt"=>"$2a$10$kC5fHSfRCgwaN7tFRQjc2u", "password_hash"=>"$2a$10$kC5fHSfRCgwaN7tFRQjc2uV8YwA5Ggch5q/MhH5jHrzpe1sllPWAy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user25@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user25@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa45661d44b60f5b000316')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000317'), "name"=>"user27", "email"=>"user26@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ioNzU4v1/TWmmB9iE0zwj.", "password_hash"=>"$2a$10$ioNzU4v1/TWmmB9iE0zwj.f/AR9g8PzDDq0WRuQsW.q1j7hwMRKle"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:46 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:46 UTC}})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45661d44b60f5b000319'), "name"=>"user28", "email"=>"user27@example.com", "role"=>"reader", "password_salt"=>"$2a$10$5lS.Q7eQrv.8GUU7fmEEHu", "password_hash"=>"$2a$10$5lS.Q7eQrv.8GUU7fmEEHuYO5puAbZBoWil4wUrTIAD.lgDYv0vNK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user27@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user27@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031a'), "name"=>"user29", "email"=>"user28@example.com", "role"=>"reader", "password_salt"=>"$2a$10$VUHjnS/PswM/M/bDavHcRu", "password_hash"=>"$2a$10$VUHjnS/PswM/M/bDavHcRuL.4h0hlzLA/8TBkFyUB/om6mGFrAsAS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00006e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000080')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000082')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000085')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000087')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00008b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00008f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000310')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000312')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000313')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000314')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000315')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000316')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000317')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45661d44b60f5b000319')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00031a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031b'), "headline"=>"asdf"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031b')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b00031b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00031b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031d'), "name"=>"user30", "email"=>"user29@example.com", "role"=>"reader", "password_salt"=>"$2a$10$jSsMlLyHdzFMQIU.jD8n9e", "password_hash"=>"$2a$10$jSsMlLyHdzFMQIU.jD8n9ehq.9XjtYqYRgWCbzNa01Bf45RLIqKZ6"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031e'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50aa45671d44b60f5b00031d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b00031e')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b00031e"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00031e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00031d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000320'), "headline"=>"no_user_article1", "story"=>"it is an article"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000320')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000320"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000320')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000321'), "headline"=>"un1que"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000321')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000321"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000321')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000321')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000322'), "headline"=>"new_article_1"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000322')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000322"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000322')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000322')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000322')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000322')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user30@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000324'), "name"=>"user31", "email"=>"user30@example.com", "role"=>"reader", "password_salt"=>"$2a$10$76PJs/DpLewnWne4e5XxXO", "password_hash"=>"$2a$10$76PJs/DpLewnWne4e5XxXOaqhaEyJ3CllX7ThjBUuaQXrJicSNkay"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000325'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50aa45671d44b60f5b000324')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000325')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000325"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000325')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000324')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000326'), "headline"=>"unique"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000326')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000326"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000326')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000326')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00024d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000251')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00025a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00025c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000261')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000263')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000266')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000275')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000279')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00027b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00027e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000282')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00020c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00020e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000210')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000214')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000216')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00021c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000225')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00022f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000231')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000233')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000237')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000239')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00023d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00023f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000243')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000245')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000249')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00024b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45561d44b60f5b000007')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000030')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000032')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000033')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000035')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b000037')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00003b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00003c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45581d44b60f5b00003f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000081')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000083')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000084')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000086')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b000088')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00008c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45591d44b60f5b00008d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455a1d44b60f5b000090')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001e6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001e8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001ea')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001ec')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001ee')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001f2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001f4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001f6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001f8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000200')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000202')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000204')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000206')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00020a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000220')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00022a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000241')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000253')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000256')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000268')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00026a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000270')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000272')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000284')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000286')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00028a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00028c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00028e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000290')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000294')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b000296')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00029a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00029c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b00029e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002a0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002a2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002a8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002aa')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002ac')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002b0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002b4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002b8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002ba')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002bc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002be')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002c2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002c4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002c6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002c8')})
MONGODB [DEBUG] cursor.refresh() for cursor 2998028241230306170
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002d2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002d7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002dc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002de')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002e0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002e5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa455f1d44b60f5b0002e7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002ea')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002ee')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002f1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002f6')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002f8')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002fa')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b0002fe')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000300')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000302')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000304')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45601d44b60f5b000306')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50aa45671d44b60f5b000328')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000329'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b000328')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50aa45671d44b60f5b00032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00032b'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b00032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50aa45671d44b60f5b00032c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00032d'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b00032c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "headline"=>"asdfqwer"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00032e'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b000328')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00032f'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b00032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000330'), "article_id"=>BSON::ObjectId('50aa45671d44b60f5b000327'), "category_id"=>BSON::ObjectId('50aa45671d44b60f5b00032c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000327')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000327"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000327')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000331'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000331')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000331"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000331')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000332'), "headline"=>"uniq"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000332')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000332"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000332')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000333'), "headline"=>"un1q"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa45671d44b60f5b000333')}, {"$set"=>{"guid"=>"50aa45671d44b60f5b000333"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000333')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000336'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 46ms (Views: 44.7ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aa45671d44b60f5b000336" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aa45671d44b60f5b000336"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa45671d44b60f5b000336')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000336')})
Redirected to http://www.example.com/areas
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000337'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa45671d44b60f5b000337/edit" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aa45671d44b60f5b000337"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa45671d44b60f5b000337')}).limit(-1)
  Rendered areas/_form.html.erb (2.0ms)
Completed 200 OK in 7ms (Views: 4.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000337')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b000338'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa45671d44b60f5b000338" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa45671d44b60f5b000338"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa45671d44b60f5b000338')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000338')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 5ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aa45671d44b60f5b00033b')}])
Redirected to http://www.example.com/areas/50aa45671d44b60f5b00033b
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aa45671d44b60f5b00033b" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa45671d44b60f5b00033b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa45671d44b60f5b00033b')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00033b')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa45671d44b60f5b00033f'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
  Rendered areas/_form.html.erb (39.6ms)
Completed 200 OK in 43ms (Views: 41.5ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 6ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00033f')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:42:47 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:41:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000001'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f63000001')}, {"$set"=>{"guid"=>"50aa48371d44b60f63000001"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (6.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (15.3ms)
Completed 200 OK in 77ms (Views: 65.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aa48371d44b60f63000003", "headline"=>"Article 1", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000003'), "headline"=>"Article 1", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f63000003')}, {"$set"=>{"guid"=>"50aa48371d44b60f63000003"}})
Redirected to http://www.example.com/articles/50aa48371d44b60f63000003
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48371d44b60f63000003" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48371d44b60f63000003"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48371d44b60f63000003')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 3.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000006'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f63000006')}, {"$set"=>{"guid"=>"50aa48371d44b60f63000006"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>false, :editors_grade=>0, :user_id=>{"$ne"=>nil}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 3ms
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000007'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f63000007')}, {"$set"=>{"guid"=>"50aa48371d44b60f63000007"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 6ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (1.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f63000009')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f63000009')})
Completed 200 OK in 21ms (Views: 19.5ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>"50aa45651d44b60f5b00030c"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "news_agency_id"=>BSON::ObjectId('50aa45651d44b60f5b00030c'), "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aa48371d44b60f6300000a'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f6300000a')}, {"$set"=>{"guid"=>"50aa48371d44b60f6300000a"}})
Redirected to http://www.example.com/articles/50aa48371d44b60f6300000a
Completed 302 Found in 38ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48371d44b60f6300000a" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48371d44b60f6300000a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48371d44b60f6300000a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030c')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aa48371d44b60f6300000c'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f6300000c')}, {"$set"=>{"guid"=>"50aa48371d44b60f6300000c"}})
Redirected to http://www.example.com/articles/50aa48371d44b60f6300000c
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48371d44b60f6300000c" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48371d44b60f6300000c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48371d44b60f6300000c')}).limit(-1)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f6300000e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f6300000e')})
Completed 200 OK in 14ms (Views: 12.5ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:54:47 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice", "news_agency_id"=>"50aa45651d44b60f5b00030c"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:53:47 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f6300000f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48371d44b60f6300000f')})
Completed 200 OK in 15ms (Views: 13.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000012'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000012')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000017'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000018'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48371d44b60f63000018')}, {"$set"=>{"guid"=>"50aa48371d44b60f63000018"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48371d44b60f63000019'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50aa48371d44b60f63000018"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50aa48371d44b60f63000018"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50aa48371d44b60f63000018", "_id"=>BSON::ObjectId('50aa48381d44b60f6300001a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300001b'), "article_id"=>BSON::ObjectId('50aa48371d44b60f63000018'), "category_id"=>BSON::ObjectId('50aa48381d44b60f6300001a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300001c'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48381d44b60f6300001c')}, {"$set"=>{"guid"=>"50aa48381d44b60f6300001c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300001d'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300001e'), "article_id"=>BSON::ObjectId('50aa48381d44b60f6300001c'), "category_id"=>BSON::ObjectId('50aa48381d44b60f6300001d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300001f'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48381d44b60f6300001f')}, {"$set"=>{"guid"=>"50aa48381d44b60f6300001f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000020'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000022'), "article_id"=>BSON::ObjectId('50aa48381d44b60f63000021'), "category_id"=>BSON::ObjectId('50aa48381d44b60f63000020')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000023'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48381d44b60f63000023')}, {"$set"=>{"guid"=>"50aa48381d44b60f63000023"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000024'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50aa48381d44b60f63000023"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50aa48381d44b60f63000023"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50aa48381d44b60f63000023", "_id"=>BSON::ObjectId('50aa48381d44b60f63000025')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000026'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48381d44b60f63000026')}, {"$set"=>{"guid"=>"50aa48381d44b60f63000026"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000027'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000028'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48381d44b60f63000028')}, {"$set"=>{"guid"=>"50aa48381d44b60f63000028"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000029'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300002a'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$E49D1HtluvIWHZXAie5Lw.", "password_hash"=>"$2a$10$E49D1HtluvIWHZXAie5Lw.mwgXvZWSb6YmQNrEImifeh0gKRkJDw."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 5ms (Views: 3.6ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Completed 200 OK in 73ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300002b'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$RFb.BVKOiqW5HrXsAFx49O", "password_hash"=>"$2a$10$RFb.BVKOiqW5HrXsAFx49OLRZWlBzQSU.sXPXlnhQMwlcxcNs6zoq"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB [DEBUG] Cursor#close 1695811276823468992
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 11.1ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300002d'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ROEOodJKyyWIgitHWJtvGu", "password_hash"=>"$2a$10$ROEOodJKyyWIgitHWJtvGuPEsddls2FSZhwDhuhhOjFjV8y0uhwne"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300002e'), "name"=>"user4", "email"=>"user4@example.com", "role"=>"reader", "password_salt"=>"$2a$10$iyW9R1lsSbUcm/6ugAh7Ze", "password_hash"=>"$2a$10$iyW9R1lsSbUcm/6ugAh7ZeWkN9RF5RwvM7C.tFwOjZd/ua32hTVxm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 40ms (Views: 38.6ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user4@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user4@example.com\"]"}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f6300002f'), "name"=>"user5", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$epBd1Ou.0UzXWU/gknIQSO", "password_hash"=>"$2a$10$epBd1Ou.0UzXWU/gknIQSO7l7VmtCDlu7fx8g0ZftTYLRhltbmnH6"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user5@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB [DEBUG] Cursor#close 6447056193040555319
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48381d44b60f6300002f')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000030'), "name"=>"user6", "email"=>"user6@example.com", "role"=>"reader", "password_salt"=>"$2a$10$VvsDk.bdo80h1DL53Xy/Je", "password_hash"=>"$2a$10$VvsDk.bdo80h1DL53Xy/JeeyDwUO3EgG7bH2HKAXjZVVim0cx1k8q"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user6@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user6@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB [DEBUG] Cursor#close 4410290844811795932
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48381d44b60f63000030')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48381d44b60f63000031'), "name"=>"user7", "email"=>"user7@example.com", "role"=>"reader", "password_salt"=>"$2a$10$tbcIDRCTxLm9REbg6Mr7Pu", "password_hash"=>"$2a$10$tbcIDRCTxLm9REbg6Mr7PuIGWeVvhDaxORo7oh9ITIB6DMd/WfkLK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user7@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user7@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:48 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:48 UTC}})
MONGODB [DEBUG] Cursor#close 3370883968628563585
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48381d44b60f63000031')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000032'), "name"=>"user8", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$7IiWrfCGKEAJdOhV8Orj2O", "password_hash"=>"$2a$10$7IiWrfCGKEAJdOhV8Orj2Oo65k1pzkLLQouknH2JrnI4m.7yR6btu"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB [DEBUG] Cursor#close 8732582142928363263
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.8ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 51ms (Views: 49.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000034'), "name"=>"user9", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$mu.eKtQ4mgKFnLZoy.n7JO", "password_hash"=>"$2a$10$mu.eKtQ4mgKFnLZoy.n7JOzqFy5szdhUWQxrIewm3PvXhnzmJLb3e"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB [DEBUG] Cursor#close 3957956404004397007
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48391d44b60f63000034')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB [DEBUG] Cursor#close 4803677958993223645
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 8ms (Views: 7.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000036'), "name"=>"user10", "email"=>"user10@example.com", "role"=>"reader", "password_salt"=>"$2a$10$FLkLPtUJnlB9T1FnUmRowe", "password_hash"=>"$2a$10$FLkLPtUJnlB9T1FnUmRowe1phY2m3sfCJBW/wQSx715xowwYCkeUK"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000037'), "name"=>"user11", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$YHnG8Q3PvDPa/xs5yk3EpO", "password_hash"=>"$2a$10$YHnG8Q3PvDPa/xs5yk3EpOk9ixF5dgLR2YQE.oZ/NTU3ALPP8jFGq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000038'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50aa48391d44b60f63000037"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50aa48391d44b60f63000037"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50aa48391d44b60f63000037", "_id"=>BSON::ObjectId('50aa48391d44b60f63000039')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003a'), "user_id"=>BSON::ObjectId('50aa48391d44b60f63000037'), "category_id"=>BSON::ObjectId('50aa48391d44b60f63000039')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003b'), "name"=>"user12", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$n8mQD0D90fIlUyrz/jUPs.", "password_hash"=>"$2a$10$n8mQD0D90fIlUyrz/jUPs.1qJ/7mj0oxWIlbSlxXe3cbBFAsTqsNm"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003c'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003d'), "user_id"=>BSON::ObjectId('50aa48391d44b60f6300003b'), "category_id"=>BSON::ObjectId('50aa48391d44b60f6300003c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003e'), "name"=>"user13", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$/TjByFCn2JREv1jPLMgBpu", "password_hash"=>"$2a$10$/TjByFCn2JREv1jPLMgBpunO15KgmYFAqEU1srSgRdLpQoHPZGlBC"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f6300003f'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000041'), "user_id"=>BSON::ObjectId('50aa48391d44b60f63000040'), "category_id"=>BSON::ObjectId('50aa48391d44b60f6300003f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000042'), "name"=>"user15", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$UaXv50g9.6zlB.iCnfHqae", "password_hash"=>"$2a$10$UaXv50g9.6zlB.iCnfHqaebAvY8bGO0.lyqFNLVZ5hrQhwfwV9z96"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000043'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50aa48391d44b60f63000042"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50aa48391d44b60f63000042"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50aa48391d44b60f63000042", "_id"=>BSON::ObjectId('50aa48391d44b60f63000044')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000045'), "name"=>"user16", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$CAP6FuMIDoxN.eQZmInKQe", "password_hash"=>"$2a$10$CAP6FuMIDoxN.eQZmInKQeTZa0CJO9S/l0ZWu.ugvbvsugrog9nia"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000046'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000047'), "name"=>"user17", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$y8hnc9h9gmP5MF2rXj2d2e", "password_hash"=>"$2a$10$y8hnc9h9gmP5MF2rXj2d2ecdfRUsBPZIbOW9fD4dNKLBX81UCIsJm"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000048'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030c')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa45651d44b60f5b00030d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48391d44b60f63000049'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f6300004a')})
  Rendered news_agencies/_form.html.erb (6.1ms)
Completed 200 OK in 48ms (Views: 46.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f6300004b')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 9ms (Views: 6.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000049')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f6300004d')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f6300004e')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 9ms (Views: 6.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 5ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f63000050')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48391d44b60f63000052')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:53:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aa48391d44b60f63000053')}])
Redirected to http://www.example.com/news_agencies/50aa48391d44b60f63000053
Completed 302 Found in 39ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa48391d44b60f63000053" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa48391d44b60f63000053"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa48391d44b60f63000053')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000053')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa483a1d44b60f63000055')})
  Rendered news_agencies/_form.html.erb (4.2ms)
Completed 200 OK in 7ms (Views: 5.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa483a1d44b60f63000056')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 9ms (Views: 7.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa483a1d44b60f63000058'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.3ms)
Completed 200 OK in 5ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa483a1d44b60f63000058/edit" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aa483a1d44b60f63000058"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa483a1d44b60f63000058')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa483a1d44b60f63000058')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 9ms (Views: 7.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483a1d44b60f63000058')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa483a1d44b60f63000059'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa483a1d44b60f63000059" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa483a1d44b60f63000059"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa483a1d44b60f63000059')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483a1d44b60f63000059')})
MONGODB (19ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa483a1d44b60f6300005a'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aa483a1d44b60f6300005a" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aa483a1d44b60f6300005a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa483a1d44b60f6300005a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483a1d44b60f6300005a')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:54:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:53:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000001')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000003')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000006')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000007')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f6300000a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f6300000c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000018')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300001c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300001f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000023')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000026')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000028')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa483a1d44b60f6300005b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa483a1d44b60f6300005c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483a1d44b60f6300005b')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483a1d44b60f6300005c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa483c1d44b60f6300005d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa483c1d44b60f6300005e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483c1d44b60f6300005d')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa483c1d44b60f6300005e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa48401d44b60f6300005f')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa48401d44b60f63000060')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"turbolinks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000061')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cache-digests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000062')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exploring-rubygems"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000063')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tagging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000064')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fnordmetric"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000065')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jruby-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000066')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"image-manipulation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000067')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bullet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000068')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ransack"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000069')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"miniprofiler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sidekiq"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-reputation-system"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exporting-csv-and-excel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"facebook-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"brakeman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300006f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-session-hijacking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000070')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"squeel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000071')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"securing-an-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000072')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rest-api-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000073')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-rails-api-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000074')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rubber-and-amazon-ec2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000075')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"wizard-forms-with-wicked"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000076')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"queue-classic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000077')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrating-to-postgresql"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000078')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"datatables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000079')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"globalize3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"copycopter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"compass-css-sprites"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refinery-cms-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"better-sass-with-bourbon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"twitter-bootstrap-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300007f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeattr"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000080')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passing-data-to-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000081')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rabl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000082')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jbuilder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000083')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000084')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"private-pub"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000085')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-urls-with-friendlyid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000086')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-html-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000087')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000088')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"oh-my-zsh"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000089')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"elasticsearch-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-identity"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-place-editing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-open-source"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-spree"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mercury-editor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300008f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"playing-with-pjax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000090')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-machines-with-vagrant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000091')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"soap-with-savon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000092')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"billing-with-stripe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000093')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000094')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"spork"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000095')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-admin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000096')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-with-sorcery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000097')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000098')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"foreman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000099')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pry-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"understanding-the-asset-pipeline"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-with-sunspot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mountable-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-time-web-requests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-i-test"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300009f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"remember-me-reset-password"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"geocoder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markdown-with-redcarpet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"resque"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-in-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"template-inheritance"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a5')}])
MONGODB (44ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sass-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"coffeescript-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-streaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-1-overview"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"guard"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"client-side-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"trees-with-ancestry"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-javascript-with-jasmine"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"messaging-with-faye"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"decent-exposure"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"token-fields"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-specs-and-capybara"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n-backends"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"undo-with-paper-trail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-kaminari"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"carrierwave-file-uploads"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metrics-metrics-metrics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metawhere-metasearch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-from-scratch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"notifications-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-state"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"new-gem-with-bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gravatar"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beanstalkd-and-stalker"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-omniauth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-sort-paginate-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activerecord-relation-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongoid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-attr-accessible"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"engage-with-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"inherited-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polling-for-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-table-columns"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"controllers-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfkit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multistep-forms"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"a-b-testing-with-a-bingo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"calendars"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-dynamic-delegator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"validations-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customizing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"introducing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e1')}])
MONGODB (15ms) rails3_mongoid_devise_test['articles'].find({:guid=>"erb-blocks-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"syntax-highlighting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-mailer-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"unobtrusive-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"xss-protection-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-beta-and-rvm"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mobile-devices"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple-individually"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"my-favorite-web-apps-in-2009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongodb-and-mongomapper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tableless-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authorization-with-cancan"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mechanize"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-nokogiri"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"embedded-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"declarative-authorization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pickle-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gemcutter-jeweler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cropping-images"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"include-vs-joins"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"finding-unused-css"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seed-data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seven-security-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"searchlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000102')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-and-bookmarks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-scrapi"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"touch-and-cache"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"delayed-job"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-with-authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"feed-parsing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metric-fu"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cron-in-ruby"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"self-referential-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tree-based-navigation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"three-profiling-tools"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"factories-not-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rspec-matchers-macros"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"webrat"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beginning-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polymorphic-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfs-with-prawn"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-3-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-middleware"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-metal"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"app-templates-in-rails-2-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-lists"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-express-checkout"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"integrating-active-merchant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-merchant-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-security"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-2-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000126')}])
MONGODB (90ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"memoization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jquery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paperclip"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"capistrano-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"helpers-outside-views"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"going-back"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"monitoring-with-god"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-daemon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"starling-and-workling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rake-in-background"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"populating-a-database"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beta-invitations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passenger-in-development"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"non-active-record-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thinking-sphinx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"session-based-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"liquid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"semi-static-pages"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"selenium"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"endless-page"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails-with-git"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"anonymous-scopes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gem-dependencies"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tracking-attribute-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-zones-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gitting-rails-2-1-rc1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exception-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"site-wide-announcements"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"auto-complete-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-out-helper-object"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"5-view-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-partials"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-profiling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"analyzing-the-production-log"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"git-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-activeresource"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeresource-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"make-resourceful"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-long-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fragment-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-select-menus"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-rss-feeds"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"logging-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"yaml-configuration-file"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cookie-based-session-store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-basic-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fixtures-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simplify-views-with-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generate-named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-pdf-documents"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"destroy-without-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"scope-out"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"adding-an-environment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-controllers-with-rspec"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markaby-in-helper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restful-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rake-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"stopping-spam-with-akismet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-helper-modules"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-name-in-url"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hacking-activerecord"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-without-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"optimistic-locking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-to-make-a-generator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"create-model-through-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-logger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cleaning-up-the-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-with-ruby-debug"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"handling-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"update-through-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"will-paginate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"reading-the-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"console-tricks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"two-many-to-many"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"catch-all-route"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rjs-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-with-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"with-options"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"conditional-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"blocks-in-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customize-field-error"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multibutton-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subversion-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rest-actions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-plugin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-in-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formatting-time"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-page-title"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"group-by-month"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-groups-of"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cross-site-scripting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hackers-love-mass-assignment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sql-injection"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f63000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-stack-trace"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"counter-cache-column"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"eager-loading"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"super-simple-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restricting-access"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"where-administration-goes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f6300019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"looping-through-flash"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"habtm-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fun-with-find-conditions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"performing-calculations-on-models"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-model-in-session"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"filtering-sensitive-logs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"layouts-and-content-for"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"all-about-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"shortcut-blocks-with-symbol-to-proc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"using-with-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"move-find-into-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"find-through-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48411d44b60f630001af')}])
MONGODB (58ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-find-by-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48421d44b60f630001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-with-instance-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48421d44b60f630001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1432837"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001b4'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Small Business"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Small Business"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Small Business", "_id"=>BSON::ObjectId('50aa48431d44b60f630001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001b6'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"contributors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"contributors", "_id"=>BSON::ObjectId('50aa48431d44b60f630001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001b8'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"credit-card"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"credit-card"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"credit-card", "_id"=>BSON::ObjectId('50aa48431d44b60f630001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ba'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001bc'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001be'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mobile payments"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mobile payments"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mobile payments", "_id"=>BSON::ObjectId('50aa48431d44b60f630001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001c0'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nfc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nfc", "_id"=>BSON::ObjectId('50aa48431d44b60f630001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001c2'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"open forum"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"open forum"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"open forum", "_id"=>BSON::ObjectId('50aa48431d44b60f630001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001c4'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surcharge"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"surcharge"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"surcharge", "_id"=>BSON::ObjectId('50aa48431d44b60f630001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001c6'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001b2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Charging a Credit Surcharge Will Cost You Customers", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wnVtDwFm9t8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wnVtDwFm9t8/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1432837", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501125"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001c8'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Jobs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Jobs", "_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ca'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mashable Job Board"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mashable Job Board"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mashable Job Board", "_id"=>BSON::ObjectId('50aa48431d44b60f630001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001cc'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"boombox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"boombox"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"boombox", "_id"=>BSON::ObjectId('50aa48431d44b60f630001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ce'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sonico"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sonico"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sonico", "_id"=>BSON::ObjectId('50aa48431d44b60f630001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001d0'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the onion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the onion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the onion", "_id"=>BSON::ObjectId('50aa48431d44b60f630001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001d2'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"weekly jobs roundup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"weekly jobs roundup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"weekly jobs roundup", "_id"=>BSON::ObjectId('50aa48431d44b60f630001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001d4'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001c7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Hunting for a Job? Check 160+ Listings From The Onion and More", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/p2L1XojY2T0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/p2L1XojY2T0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501125", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001d6'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Dyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Dyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Dyle", "_id"=>BSON::ObjectId('50aa48431d44b60f630001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001d8'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elgato"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elgato"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elgato", "_id"=>BSON::ObjectId('50aa48431d44b60f630001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001da'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"eyetv"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"eyetv"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"eyetv", "_id"=>BSON::ObjectId('50aa48431d44b60f630001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001dc'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iOS"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iOS"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iOS", "_id"=>BSON::ObjectId('50aa48431d44b60f630001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001de'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iPod Touch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iPod Touch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iPod Touch", "_id"=>BSON::ObjectId('50aa48431d44b60f630001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001e0'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ipad"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ipad", "_id"=>BSON::ObjectId('50aa48431d44b60f630001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001e2'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50aa48431d44b60f630001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001e4'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001d5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Broadcast TV Comes to the iPhone and iPad", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/txermFfF-9I\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/txermFfF-9I/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500437"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001e6'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001e5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexa von tobel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexa von tobel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexa von tobel", "_id"=>BSON::ObjectId('50aa48431d44b60f630001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001e8'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001e5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ea'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001e5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexa von Tobel: 4 TEDTalks That Impart True Insight", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/E4Cj0YJ43xI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/E4Cj0YJ43xI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500437", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497215"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ec'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001eb'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tim O'Reilly"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tim O'Reilly"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tim O'Reilly", "_id"=>BSON::ObjectId('50aa48431d44b60f630001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ee'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001eb'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ef'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001eb'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Tim O’Reilly: 9 TEDTalks That Stretched My Mind", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/OVDQo6XpeKA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/OVDQo6XpeKA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497215", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494993"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f1'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f0'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elif shafak"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elif shafak"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elif shafak", "_id"=>BSON::ObjectId('50aa48431d44b60f630001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f3'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f0'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f4'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f0'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Elif Shafak: 8 Talks That Captivated Me", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WdNd3V99t9k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WdNd3V99t9k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494993", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494755"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f6'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"damon lindelof"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"damon lindelof"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"damon lindelof", "_id"=>BSON::ObjectId('50aa48431d44b60f630001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f8'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001f9'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001f5'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Damon Lindelof: 5 TEDTalks I Sent to My Friends", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/I0YszqNvoSM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/I0YszqNvoSM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494755", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502809"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001fb'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001fa'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"irobot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"irobot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"irobot", "_id"=>BSON::ObjectId('50aa48431d44b60f630001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001fd'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001fa'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"robots"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"robots"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"robots", "_id"=>BSON::ObjectId('50aa48431d44b60f630001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f630001ff'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001fa'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000201'), "article_id"=>BSON::ObjectId('50aa48431d44b60f630001fa'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Robot Hand Picks Up Nyan Cat, What Else is Possible?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WDBiv5gmBkc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WDBiv5gmBkc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502809", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f630001fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502857"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000203'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000202'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"SkinnyScoop"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"SkinnyScoop"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"SkinnyScoop", "_id"=>BSON::ObjectId('50aa48431d44b60f63000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000205'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000202'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"pinterest"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"pinterest", "_id"=>BSON::ObjectId('50aa48431d44b60f63000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000207'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000202'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"SkinnyScoop Brings the Conversation Into Pinterest-Style Recommendations", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/m9cHYJETtLE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/m9cHYJETtLE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502857", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f63000202')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502515"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000209'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dear kate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"dear kate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"dear kate", "_id"=>BSON::ObjectId('50aa48431d44b60f6300020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300020b'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"fashion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"fashion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"fashion", "_id"=>BSON::ObjectId('50aa48431d44b60f6300020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300020d'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"julie sygiel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"julie sygiel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"julie sygiel", "_id"=>BSON::ObjectId('50aa48431d44b60f6300020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300020f'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"lingerie"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"lingerie"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"lingerie", "_id"=>BSON::ObjectId('50aa48431d44b60f63000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000211'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"underwear"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"underwear"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"underwear", "_id"=>BSON::ObjectId('50aa48431d44b60f63000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000213'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000208'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Leak-Resistant Lingerie Could Revolutionize ‘That Time of the Month’", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qubde4H6Jro\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qubde4H6Jro/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502515", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f63000208')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503063"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000215'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000214'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"acquisition"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"acquisition"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"acquisition", "_id"=>BSON::ObjectId('50aa48431d44b60f63000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000217'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000214'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cisco"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cisco"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cisco", "_id"=>BSON::ObjectId('50aa48431d44b60f63000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000219'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000214'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"meraki"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"meraki"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"meraki", "_id"=>BSON::ObjectId('50aa48431d44b60f6300021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300021b'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000214'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Cisco Acquires Cloud Networking Firm Meraki for $1.2 Billion", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/eiqIH_m9YyM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/eiqIH_m9YyM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503063", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f63000214')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502455"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300021d'), "article_id"=>BSON::ObjectId('50aa48431d44b60f6300021c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f6300021f'), "article_id"=>BSON::ObjectId('50aa48431d44b60f6300021c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Viral Video Recap"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Viral Video Recap"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Viral Video Recap", "_id"=>BSON::ObjectId('50aa48431d44b60f63000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000221'), "article_id"=>BSON::ObjectId('50aa48431d44b60f6300021c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000222'), "article_id"=>BSON::ObjectId('50aa48431d44b60f6300021c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"viral videos"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"viral videos", "_id"=>BSON::ObjectId('50aa48431d44b60f63000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000224'), "article_id"=>BSON::ObjectId('50aa48431d44b60f6300021c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Viral Video Recap: Funniest Memes of the Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7rgKdRzUxb0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7rgKdRzUxb0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502455", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f6300021c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502953"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48431d44b60f63000226'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000225'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Kohler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Kohler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Kohler", "_id"=>BSON::ObjectId('50aa48441d44b60f63000227')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000228'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000225'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000227')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"speakers"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"speakers", "_id"=>BSON::ObjectId('50aa48441d44b60f63000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300022a'), "article_id"=>BSON::ObjectId('50aa48431d44b60f63000225'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Impressive Kohler Shower Head Doubles as Wireless Speaker [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ZlY5SIVXHGQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ZlY5SIVXHGQ/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502953", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48431d44b60f63000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494889"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300022c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300022d'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"YouTube"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"YouTube"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"YouTube", "_id"=>BSON::ObjectId('50aa48441d44b60f6300022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300022f'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50aa48441d44b60f63000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000231'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000232'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food", "_id"=>BSON::ObjectId('50aa48441d44b60f63000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000234'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holidays 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holidays 2012", "_id"=>BSON::ObjectId('50aa48441d44b60f63000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000236'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50aa48441d44b60f63000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000238'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300022b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Cook a Complete Thanksgiving Meal Using YouTube", "deck"=>"<br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"      <br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cONrshwgQ58\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cONrshwgQ58/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494889", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f6300022b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499819"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300023a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300023b'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300023c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"infographics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"infographics", "_id"=>BSON::ObjectId('50aa48441d44b60f6300023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300023e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"job search series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"job search series", "_id"=>BSON::ObjectId('50aa48441d44b60f6300023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000240'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000241'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"talent"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"talent"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"talent", "_id"=>BSON::ObjectId('50aa48441d44b60f63000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000243'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000239'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000242')}])
MONGODB (40ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Find Top Tech Talent on Social Media", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XEQuj5cSrnc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XEQuj5cSrnc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499819", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000239')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499123"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000245'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000244'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Lifestyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Lifestyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Lifestyle", "_id"=>BSON::ObjectId('50aa48441d44b60f63000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000247'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000244'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"health"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"health"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"health", "_id"=>BSON::ObjectId('50aa48441d44b60f63000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000249'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000244'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300024a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000244'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50aa48441d44b60f6300024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300024c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000244'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Late-Night Gadget Use Damages Your Sleep Cycle [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uNYW_P3_gqo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uNYW_P3_gqo/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499123", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000244')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501261"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300024e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300024d'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50aa48441d44b60f6300024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000250'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300024d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kickstarter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kickstarter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kickstarter", "_id"=>BSON::ObjectId('50aa48441d44b60f63000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000252'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300024d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"toys"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"toys"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"toys", "_id"=>BSON::ObjectId('50aa48441d44b60f63000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000254'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300024d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Ex-Apple Employee Wants to Create the Best Toy Blocks Ever", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/w9cjso57EEA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/w9cjso57EEA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501261", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f6300024d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502859"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000256'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000255'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note 2", "_id"=>BSON::ObjectId('50aa48441d44b60f63000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000258'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000255'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note II"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note II"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note II", "_id"=>BSON::ObjectId('50aa48441d44b60f63000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300025a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000255'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"american music awards"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"american music awards"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"american music awards", "_id"=>BSON::ObjectId('50aa48441d44b60f6300025b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300025c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000255'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300025b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"samsung"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"samsung"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"samsung", "_id"=>BSON::ObjectId('50aa48441d44b60f6300025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300025e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000255'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"American Music Awards Goes Paperless, Uses Galaxy Note II to Announce Winners", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/o_kY8ncjR6k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/o_kY8ncjR6k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502859", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000255')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502805"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000260'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300025f'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Black Ops 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Black Ops 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Black Ops 2", "_id"=>BSON::ObjectId('50aa48441d44b60f63000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000262'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300025f'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call of Duty"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call of Duty"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call of Duty", "_id"=>BSON::ObjectId('50aa48441d44b60f63000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000264'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300025f'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"‘Call of Duty: Black Ops 2′ Sales Smash Records, Makes $500M in One Day [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/4uDLi6Bm8KE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/4uDLi6Bm8KE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502805", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f6300025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497659"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000266'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gadgets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gadgets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gadgets", "_id"=>BSON::ObjectId('50aa48441d44b60f63000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000268'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gift of the Day"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gift of the Day"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gift of the Day", "_id"=>BSON::ObjectId('50aa48441d44b60f63000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300026a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50aa48441d44b60f6300026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300026c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tech"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tech"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tech", "_id"=>BSON::ObjectId('50aa48441d44b60f6300026d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300026e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"bluetooth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"bluetooth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"bluetooth", "_id"=>BSON::ObjectId('50aa48441d44b60f6300026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000270'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000271'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000272'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000265'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Your Favorite Music Fan Will Treasure This Twistable Wireless Speaker", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QJ41FmQvibk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QJ41FmQvibk/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497659", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502719"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000274'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000273'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50aa48441d44b60f63000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000276'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000273'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facetime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facetime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facetime", "_id"=>BSON::ObjectId('50aa48441d44b60f63000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000278'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000273'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"imessage"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"imessage"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"imessage", "_id"=>BSON::ObjectId('50aa48441d44b60f63000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300027a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000273'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iMessage and FaceTime Back Up, Apple Users Complain About Outage on Twitter", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/_K4IZeyVWbE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/_K4IZeyVWbE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502719", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000273')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500533"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300027c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300027b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Top Kids Apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Top Kids Apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Top Kids Apps", "_id"=>BSON::ObjectId('50aa48441d44b60f6300027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300027e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300027b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300027f'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300027b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000280'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300027b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kids apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kids apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kids apps", "_id"=>BSON::ObjectId('50aa48441d44b60f63000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000282'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300027b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Top 5 Apps Your Kids Will Love This Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/M_sP0aF6zOI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/M_sP0aF6zOI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500533", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f6300027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1474387"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000284'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000283'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"black friday"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"black friday", "_id"=>BSON::ObjectId('50aa48441d44b60f63000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000286'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000283'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"deals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"deals"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"deals", "_id"=>BSON::ObjectId('50aa48441d44b60f63000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000288'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000283'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holiday 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holiday 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holiday 2012", "_id"=>BSON::ObjectId('50aa48441d44b60f63000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300028a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000283'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"shopping"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"shopping", "_id"=>BSON::ObjectId('50aa48441d44b60f6300028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300028c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000283'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Money-Saving Apps for Black Friday", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/-lh-h83Hfdw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/-lh-h83Hfdw/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1474387", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000283')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501469"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300028e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Drobo Mini"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Drobo Mini"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Drobo Mini", "_id"=>BSON::ObjectId('50aa48441d44b60f6300028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000290'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Hard Drives"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Hard Drives"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Hard Drives", "_id"=>BSON::ObjectId('50aa48441d44b60f63000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000292'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Thunderbolt"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Thunderbolt"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Thunderbolt", "_id"=>BSON::ObjectId('50aa48441d44b60f63000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000294'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"backup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"backup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"backup", "_id"=>BSON::ObjectId('50aa48441d44b60f63000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000296'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000297'), "article_id"=>BSON::ObjectId('50aa48441d44b60f6300028d'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Drobo Mini, the Sophisticated Backup System In a Small Package [REVIEW]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/r4vs_Z3Mil0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/r4vs_Z3Mil0/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501469", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f6300028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499833"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f63000299'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300029a'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300029b'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300029c'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300029d'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f6300029e'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"recruit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"recruit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"recruit", "_id"=>BSON::ObjectId('50aa48441d44b60f6300029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a0'), "article_id"=>BSON::ObjectId('50aa48441d44b60f63000298'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Use Pinterest to Recruit", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Kxg0b61g8pI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Kxg0b61g8pI/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f63000298')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502593"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a2'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a1'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a3'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50aa48441d44b60f630002a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a5'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a6'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Many Black Friday Shoppers to Begin Before 3 A.M. [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/SH2JdkxepvQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/SH2JdkxepvQ/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502593", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f630002a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502519"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002a8'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call Me Maybe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call Me Maybe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call Me Maybe", "_id"=>BSON::ObjectId('50aa48441d44b60f630002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002aa'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a7'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Carly Rae Jepsen"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Carly Rae Jepsen"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Carly Rae Jepsen", "_id"=>BSON::ObjectId('50aa48441d44b60f630002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ac'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a7'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50aa48441d44b60f630002ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ae'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a7'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002af'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002a7'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Controls ‘Call Me Maybe’ With His Actual Heart", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1-9B7hN2x8Q\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1-9B7hN2x8Q/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502519", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f630002a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502393"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002b1'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b0'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50aa48441d44b60f630002b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002b3'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b0'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50aa48441d44b60f630002b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002b5'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b0'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002b6'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b0'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50aa48441d44b60f630002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002b8'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b0'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Meet the Super Fan Who Waited in Line for a Month for a Wii U [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1qg-znEVZxo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1qg-znEVZxo/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502393", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f630002b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502543"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ba'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sunday Comics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sunday Comics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sunday Comics", "_id"=>BSON::ObjectId('50aa48441d44b60f630002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002bc'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002bd'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"investors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"investors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"investors", "_id"=>BSON::ObjectId('50aa48441d44b60f630002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002bf'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002c0'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002b9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Is Apple Bipolar? [SUNDAY COMICS]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/MO4j9uWcB1c\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/MO4j9uWcB1c/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502543", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f630002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1495167"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002c2'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Fox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Fox"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Fox", "_id"=>BSON::ObjectId('50aa48441d44b60f630002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002c4'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports", "_id"=>BSON::ObjectId('50aa48441d44b60f630002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002c6'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports illustrated"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sports illustrated"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sports illustrated", "_id"=>BSON::ObjectId('50aa48441d44b60f630002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002c8'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sportsvite"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sportsvite"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sportsvite", "_id"=>BSON::ObjectId('50aa48441d44b60f630002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ca'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Yahoo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Yahoo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Yahoo", "_id"=>BSON::ObjectId('50aa48441d44b60f630002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002cc'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cbs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cbs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cbs", "_id"=>BSON::ObjectId('50aa48441d44b60f630002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ce'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"data"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"data", "_id"=>BSON::ObjectId('50aa48441d44b60f630002cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002d0'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nbc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nbc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nbc", "_id"=>BSON::ObjectId('50aa48441d44b60f630002d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002d2'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nfl"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nfl", "_id"=>BSON::ObjectId('50aa48441d44b60f630002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002d4'), "article_id"=>BSON::ObjectId('50aa48441d44b60f630002c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Analysis of NFL Analysts: Which ‘Experts’ Get It Right?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/POfHkvSvBJs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/POfHkvSvBJs/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1495167", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48441d44b60f630002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48401d44b60f6300005f')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48401d44b60f63000060')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000191')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000193')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000194')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000196')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000061')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000062')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000063')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000064')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000065')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000066')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000067')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000068')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000069')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300006f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000070')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000071')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000072')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000073')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000074')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000075')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000076')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000077')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000078')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000079')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300007f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000080')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000081')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000082')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000083')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000084')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000085')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000086')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000087')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000088')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000089')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300008f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000090')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000091')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000092')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000093')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000094')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000095')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000096')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000097')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000098')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000099')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300009f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000bc')})
MONGODB [DEBUG] cursor.refresh() for cursor 9127677168034925272
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630000ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000100')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000101')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000102')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000103')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000104')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000105')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000106')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000107')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000108')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000109')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300010f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000110')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000111')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000112')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000113')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000114')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000115')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000116')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000117')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000118')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000119')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300011f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000120')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000121')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000122')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000123')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000124')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000125')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000126')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000127')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000128')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000129')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300012f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000130')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000131')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000132')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000133')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000134')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000135')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000136')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000137')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000138')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000139')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300013f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000140')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000141')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000142')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000143')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000144')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000145')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000146')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000147')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000148')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000149')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300014f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000150')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000151')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000152')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000153')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000154')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000155')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000156')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000157')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000158')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000159')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300015f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000160')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000161')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000162')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000163')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000164')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000165')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000166')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000167')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000168')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000169')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300016f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000170')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000171')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000172')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000173')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000174')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000175')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000176')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000177')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000178')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000179')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300017f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000180')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000181')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000182')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000183')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000184')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000185')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000186')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000187')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000188')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000189')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300018f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000190')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000192')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000195')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000197')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000198')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f63000199')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f6300019f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48411d44b60f630001ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48421d44b60f630001b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48421d44b60f630001b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000202')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000208')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000214')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300021c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000225')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300022b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000239')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000244')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300024d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000255')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300025f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000265')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000273')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300027b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000283')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300028d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000298')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002c1')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa48441d44b60f630002d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa48441d44b60f630002d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300002a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300002b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300002d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300002e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300002f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000030')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000031')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000032')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000034')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000036')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000037')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f6300003b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f6300003e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000042')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000045')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000047')})


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 5ms (Views: 3.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 50ms (Views: 48.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user18", "email"=>"user18@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user18", "email"=>"user18@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aa48441d44b60f630002db'), "password_salt"=>"$2a$10$bSlcHAJxju3W4kmG2RZUoO", "password_hash"=>"$2a$10$bSlcHAJxju3W4kmG2RZUoOeM31UaKvHm/s32VCqDVdwnM5vV6VddC"}])
Redirected to http://www.example.com/users/50aa48441d44b60f630002db
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/users/50aa48441d44b60f630002db" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa48441d44b60f630002db"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48441d44b60f630002db')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48441d44b60f630002db')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002db')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002e0'), "name"=>"user19", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$6aMB9LLaI7VXNLbAj.o9ru", "password_hash"=>"$2a$10$6aMB9LLaI7VXNLbAj.o9ruJ920ObqYLMyvDZSlvVFEePalN4sy/Qe"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 43ms (Views: 41.5ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user19", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002e0')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user20", "email"=>"user19@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002e8'), "name"=>"user21", "email"=>"user20@example.com", "role"=>"reader", "password_salt"=>"$2a$10$2R2l7Oq7P3LM3M8lDdqYKO", "password_hash"=>"$2a$10$2R2l7Oq7P3LM3M8lDdqYKO/L7MJP/OzjYVsDWq.v1g6yOGIeGZMyK"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started GET "/users/50aa48441d44b60f630002e8" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa48441d44b60f630002e8"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48441d44b60f630002e8')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002e8')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002ea'), "name"=>"user22", "email"=>"user21@example.com", "role"=>"reader", "password_salt"=>"$2a$10$qfxiBIjLkt.l2UzuGpb8/O", "password_hash"=>"$2a$10$qfxiBIjLkt.l2UzuGpb8/O0oMOmJ/ahfAUr2V3d.HwvT7fWB4M2e."}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aa48441d44b60f630002ea" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aa48441d44b60f630002ea"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48441d44b60f630002ea')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002ea')})
Redirected to http://www.example.com/users
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:00 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user23", "email"=>"user22@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:00 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48441d44b60f630002f0'), "name"=>"user24", "email"=>"user23@example.com", "role"=>"reader", "password_salt"=>"$2a$10$4CJHL0.ZHs7nTYZIRiFYN.", "password_hash"=>"$2a$10$4CJHL0.ZHs7nTYZIRiFYN.1rov9OZhpK.23Um7NOfn344.y8bvKXS"}])


Started GET "/users/50aa48441d44b60f630002f0?method=delete" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aa48441d44b60f630002f0"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48441d44b60f630002f0')}).limit(-1)
Completed 200 OK in 4ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002f0')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user25", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 45ms (Views: 42.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48451d44b60f630002f5'), "name"=>"user26", "email"=>"user25@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hDURtqIMCSjKyLlkYGZNa.", "password_hash"=>"$2a$10$hDURtqIMCSjKyLlkYGZNa.CTp.2/K60MZLgy6hEHY/f5GOcx8V2Dy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user25@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user25@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48451d44b60f630002f5')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 11:55:01 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 14:54:01 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"turbolinks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cache-digests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exploring-rubygems"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tagging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fnordmetric"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jruby-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"image-manipulation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bullet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ransack"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"miniprofiler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630002ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sidekiq"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000300')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-reputation-system"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000301')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exporting-csv-and-excel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000302')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"facebook-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000303')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"brakeman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000304')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-session-hijacking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000305')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"squeel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000306')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"securing-an-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000307')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rest-api-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000308')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-rails-api-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000309')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rubber-and-amazon-ec2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"wizard-forms-with-wicked"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"queue-classic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrating-to-postgresql"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"datatables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"globalize3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300030f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"copycopter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000310')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"compass-css-sprites"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000311')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refinery-cms-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000312')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"better-sass-with-bourbon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000313')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"twitter-bootstrap-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000314')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeattr"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000315')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passing-data-to-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000316')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rabl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000317')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jbuilder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000318')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000319')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"private-pub"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-urls-with-friendlyid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-html-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"oh-my-zsh"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"elasticsearch-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300031f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-identity"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000320')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-place-editing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000321')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-open-source"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000322')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-spree"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000323')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mercury-editor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000324')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"playing-with-pjax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000325')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-machines-with-vagrant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000326')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"soap-with-savon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000327')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"billing-with-stripe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000328')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000329')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"spork"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-admin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-with-sorcery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"foreman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pry-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300032f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"understanding-the-asset-pipeline"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000330')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-with-sunspot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000331')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mountable-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000332')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-time-web-requests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000333')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-i-test"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000334')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"remember-me-reset-password"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000335')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"geocoder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000336')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markdown-with-redcarpet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000337')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"resque"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000338')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-in-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000339')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"template-inheritance"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sass-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"coffeescript-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-streaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-1-overview"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"guard"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300033f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"client-side-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000340')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"trees-with-ancestry"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000341')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-javascript-with-jasmine"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000342')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"messaging-with-faye"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000343')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"decent-exposure"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000344')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"token-fields"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000345')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-specs-and-capybara"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000346')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n-backends"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000347')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"undo-with-paper-trail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000348')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-kaminari"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000349')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"carrierwave-file-uploads"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metrics-metrics-metrics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metawhere-metasearch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-from-scratch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"notifications-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300034f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000350')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-state"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000351')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"new-gem-with-bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000352')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gravatar"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000353')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beanstalkd-and-stalker"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000354')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000355')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-omniauth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000356')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-sort-paginate-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000357')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activerecord-relation-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000358')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongoid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000359')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-attr-accessible"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"engage-with-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300035f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000360')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"inherited-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000361')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polling-for-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000362')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-table-columns"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000363')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000364')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000365')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000366')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"controllers-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000367')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000368')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000369')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfkit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multistep-forms"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300036f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000370')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"a-b-testing-with-a-bingo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000371')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"calendars"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000372')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-dynamic-delegator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000373')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"validations-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000374')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customizing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000375')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"introducing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000376')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"erb-blocks-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000377')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"syntax-highlighting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000378')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-mailer-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000379')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"unobtrusive-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"xss-protection-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-beta-and-rvm"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300037f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mobile-devices"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000380')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple-individually"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000381')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000382')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000383')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"my-favorite-web-apps-in-2009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000384')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongodb-and-mongomapper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000385')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tableless-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000386')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authorization-with-cancan"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000387')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mechanize"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000388')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-nokogiri"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000389')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"embedded-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"declarative-authorization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pickle-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300038f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gemcutter-jeweler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000390')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cropping-images"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000391')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"include-vs-joins"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000392')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"finding-unused-css"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000393')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seed-data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000394')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seven-security-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000395')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000396')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"searchlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000397')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-and-bookmarks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000398')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f63000399')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-scrapi"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"touch-and-cache"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"delayed-job"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-with-authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"feed-parsing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f6300039f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metric-fu"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cron-in-ruby"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"self-referential-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tree-based-navigation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"three-profiling-tools"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"factories-not-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rspec-matchers-macros"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"webrat"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beginning-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polymorphic-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfs-with-prawn"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-3-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-middleware"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-metal"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"app-templates-in-rails-2-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-lists"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-express-checkout"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b5')}])
MONGODB (39ms) rails3_mongoid_devise_test['articles'].find({:guid=>"integrating-active-merchant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-merchant-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-security"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-2-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"memoization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jquery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paperclip"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"capistrano-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"helpers-outside-views"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"going-back"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"monitoring-with-god"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-daemon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"starling-and-workling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rake-in-background"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"populating-a-database"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beta-invitations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passenger-in-development"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"non-active-record-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thinking-sphinx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"session-based-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"liquid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"semi-static-pages"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"selenium"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"endless-page"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails-with-git"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"anonymous-scopes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gem-dependencies"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tracking-attribute-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-zones-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gitting-rails-2-1-rc1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48461d44b60f630003de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exception-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"site-wide-announcements"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"auto-complete-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-out-helper-object"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"5-view-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-partials"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-profiling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"analyzing-the-production-log"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"git-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-activeresource"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeresource-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"make-resourceful"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-long-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fragment-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-select-menus"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-rss-feeds"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"logging-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"yaml-configuration-file"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cookie-based-session-store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-basic-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fixtures-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simplify-views-with-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generate-named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-pdf-documents"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"destroy-without-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"scope-out"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"adding-an-environment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f630003ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-controllers-with-rspec"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000400')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000401')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markaby-in-helper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000402')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000403')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restful-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000404')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rake-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000405')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"stopping-spam-with-akismet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000406')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-helper-modules"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000407')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-name-in-url"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000408')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hacking-activerecord"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000409')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-without-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"optimistic-locking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-to-make-a-generator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"create-model-through-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-logger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300040f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cleaning-up-the-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000410')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-with-ruby-debug"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000411')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"handling-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000412')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"update-through-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000413')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"will-paginate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000414')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000415')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"reading-the-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000416')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"console-tricks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000417')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"two-many-to-many"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000418')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"catch-all-route"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000419')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rjs-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041b')}])
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-with-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"with-options"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"conditional-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"blocks-in-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300041f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customize-field-error"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000420')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multibutton-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000421')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000422')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subversion-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000423')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rest-actions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000424')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000425')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-plugin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000426')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-in-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000427')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formatting-time"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000428')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-page-title"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000429')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"group-by-month"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-groups-of"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cross-site-scripting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hackers-love-mass-assignment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sql-injection"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-stack-trace"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300042f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"counter-cache-column"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000430')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"eager-loading"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000431')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"super-simple-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000432')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restricting-access"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000433')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"where-administration-goes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000434')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"looping-through-flash"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000435')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"habtm-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000436')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000437')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fun-with-find-conditions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000438')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"performing-calculations-on-models"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000439')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-model-in-session"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"filtering-sensitive-logs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"layouts-and-content-for"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f6300043f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"all-about-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000440')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"shortcut-blocks-with-symbol-to-proc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000441')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"using-with-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000442')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"move-find-into-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000443')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"find-through-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000444')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-find-by-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000445')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-with-instance-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48471d44b60f63000446')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1432837"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000448'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Small Business"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Small Business"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000449'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044a'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"credit-card"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"credit-card"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044b'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044c'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mobile payments"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mobile payments"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044e'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfc"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300044f'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"open forum"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"open forum"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000450'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surcharge"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surcharge"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000451'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000447'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Charging a Credit Surcharge Will Cost You Customers", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wnVtDwFm9t8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wnVtDwFm9t8/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1432837", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000447')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501125"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000453'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000454'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mashable Job Board"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mashable Job Board"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000455'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"boombox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"boombox"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000456'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sonico"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sonico"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000457'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the onion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the onion"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000458'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"weekly jobs roundup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"weekly jobs roundup"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000459'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000452'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Hunting for a Job? Check 160+ Listings From The Onion and More", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/p2L1XojY2T0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/p2L1XojY2T0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501125", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000452')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300045b'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Dyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Dyle"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300045c'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elgato"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elgato"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300045d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"eyetv"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"eyetv"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300045e'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iOS"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iOS"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300045f'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iPod Touch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iPod Touch"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000460'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000461'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000462'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300045a'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Broadcast TV Comes to the iPhone and iPad", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/txermFfF-9I\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/txermFfF-9I/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300045a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500437"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000464'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000463'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexa von tobel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexa von tobel"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000465'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000463'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000466'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000463'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexa von Tobel: 4 TEDTalks That Impart True Insight", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/E4Cj0YJ43xI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/E4Cj0YJ43xI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500437", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000463')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497215"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000468'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000467'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tim O'Reilly"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tim O'Reilly"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000469'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000467'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300046a'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000467'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Tim O’Reilly: 9 TEDTalks That Stretched My Mind", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/OVDQo6XpeKA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/OVDQo6XpeKA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497215", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000467')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494993"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300046c'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elif shafak"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elif shafak"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300046d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300046e'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Elif Shafak: 8 Talks That Captivated Me", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WdNd3V99t9k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WdNd3V99t9k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494993", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300046b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494755"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000470'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046f'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"damon lindelof"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"damon lindelof"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000471'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046f'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000472'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300046f'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Damon Lindelof: 5 TEDTalks I Sent to My Friends", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/I0YszqNvoSM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/I0YszqNvoSM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494755", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300046f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502809"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000474'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000473'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"irobot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"irobot"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000475'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000473'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"robots"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"robots"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000476'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000473'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000477'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000473'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Robot Hand Picks Up Nyan Cat, What Else is Possible?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WDBiv5gmBkc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WDBiv5gmBkc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502809", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000473')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502857"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000479'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000478'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"SkinnyScoop"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"SkinnyScoop"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300047a'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000478'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000204')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300047b'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000478'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"SkinnyScoop Brings the Conversation Into Pinterest-Style Recommendations", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/m9cHYJETtLE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/m9cHYJETtLE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502857", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000478')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502515"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300047d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dear kate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dear kate"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300047e'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"fashion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"fashion"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300047f'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"julie sygiel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"julie sygiel"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000480'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300020e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"lingerie"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"lingerie"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000481'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000210')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"underwear"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"underwear"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000482'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300047c'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000212')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Leak-Resistant Lingerie Could Revolutionize ‘That Time of the Month’", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qubde4H6Jro\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qubde4H6Jro/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502515", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300047c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503063"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000484'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000483'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"acquisition"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"acquisition"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000485'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000483'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000216')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cisco"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cisco"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000486'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000483'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000218')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"meraki"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"meraki"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000487'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000483'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Cisco Acquires Cloud Networking Firm Meraki for $1.2 Billion", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/eiqIH_m9YyM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/eiqIH_m9YyM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503063", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000483')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502455"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000489'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000488'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300048a'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000488'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Viral Video Recap"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Viral Video Recap"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300048b'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000488'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000220')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300048c'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000488'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300048d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000488'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Viral Video Recap: Funniest Memes of the Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7rgKdRzUxb0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7rgKdRzUxb0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502455", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000488')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502953"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300048f'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300048e'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Kohler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Kohler"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000490'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300048e'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000227')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000491'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300048e'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Impressive Kohler Shower Head Doubles as Wireless Speaker [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ZlY5SIVXHGQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ZlY5SIVXHGQ/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502953", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300048e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494889"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000493'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000494'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"YouTube"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"YouTube"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000495'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000496'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000230')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000497'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000498'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000499'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300049a'), "article_id"=>BSON::ObjectId('50aa48481d44b60f63000492'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000237')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Cook a Complete Thanksgiving Meal Using YouTube", "deck"=>"<br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"      <br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cONrshwgQ58\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cONrshwgQ58/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494889", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f63000492')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499819"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300049c'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300049d'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300049e'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f6300049f'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a1'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"talent"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"talent"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a2'), "article_id"=>BSON::ObjectId('50aa48481d44b60f6300049b'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Find Top Tech Talent on Social Media", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XEQuj5cSrnc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XEQuj5cSrnc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499819", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f6300049b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499123"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a4'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a3'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Lifestyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Lifestyle"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a3'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"health"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"health"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a6'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a3'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a3'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004a8'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a3'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Late-Night Gadget Use Damages Your Sleep Cycle [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uNYW_P3_gqo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uNYW_P3_gqo/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499123", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501261"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004aa'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ab'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kickstarter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kickstarter"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ac'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000251')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"toys"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"toys"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ad'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004a9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000253')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Ex-Apple Employee Wants to Create the Best Toy Blocks Ever", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/w9cjso57EEA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/w9cjso57EEA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501261", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502859"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004af'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ae'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note 2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ae'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000257')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note II"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note II"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b1'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ae'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000259')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"american music awards"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"american music awards"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b2'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ae'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300025b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"samsung"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"samsung"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b3'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ae'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300025d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"American Music Awards Goes Paperless, Uses Galaxy Note II to Announce Winners", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/o_kY8ncjR6k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/o_kY8ncjR6k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502859", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502805"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b4'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Black Ops 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Black Ops 2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b6'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b4'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call of Duty"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call of Duty"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b4'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"‘Call of Duty: Black Ops 2′ Sales Smash Records, Makes $500M in One Day [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/4uDLi6Bm8KE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/4uDLi6Bm8KE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502805", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497659"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004b9'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gadgets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gadgets"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ba'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gift of the Day"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gift of the Day"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004bb'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000269')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004bc'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tech"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tech"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004bd'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"bluetooth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"bluetooth"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004be'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004bf'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000235')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004b8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Your Favorite Music Fan Will Treasure This Twistable Wireless Speaker", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QJ41FmQvibk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QJ41FmQvibk/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497659", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502719"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c2'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c1'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c3'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facetime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facetime"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c4'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000277')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"imessage"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"imessage"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iMessage and FaceTime Back Up, Apple Users Complain About Outage on Twitter", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/_K4IZeyVWbE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/_K4IZeyVWbE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502719", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500533"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c6'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Top Kids Apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Top Kids Apps"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c8'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c6'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300027d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004c9'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c6'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ca'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c6'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kids apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kids apps"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004cb'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004c6'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000281')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Top 5 Apps Your Kids Will Love This Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/M_sP0aF6zOI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/M_sP0aF6zOI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500533", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1474387"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004cd'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004cc'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ce'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004cc'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"deals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"deals"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004cf'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004cc'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holiday 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holiday 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004cc'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d1'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004cc'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Money-Saving Apps for Black Friday", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/-lh-h83Hfdw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/-lh-h83Hfdw/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1474387", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501469"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d3'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Drobo Mini"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Drobo Mini"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d4'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Hard Drives"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Hard Drives"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Thunderbolt"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Thunderbolt"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d6'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"backup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"backup"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004d8'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Drobo Mini, the Sophisticated Backup System In a Small Package [REVIEW]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/r4vs_Z3Mil0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/r4vs_Z3Mil0/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501469", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499833"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004da'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004db'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001c9')}])
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004dc'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004dd'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300023f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004de'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004df'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000206')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"recruit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"recruit"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004d9'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Use Pinterest to Recruit", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Kxg0b61g8pI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Kxg0b61g8pI/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502593"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e2'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e1'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e3'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f63000285')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e4'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e1'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Many Black Friday Shoppers to Begin Before 3 A.M. [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/SH2JdkxepvQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/SH2JdkxepvQ/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502593", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502519"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e6'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call Me Maybe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call Me Maybe"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e8'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e6'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Carly Rae Jepsen"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Carly Rae Jepsen"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004e9'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e6'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ea'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e6'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004eb'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004e6'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Controls ‘Call Me Maybe’ With His Actual Heart", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1-9B7hN2x8Q\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1-9B7hN2x8Q/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502519", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502393"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ed'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ec'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ee'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ec'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ef'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ec'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f0'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ec'), "category_id"=>BSON::ObjectId('50aa48431d44b60f6300021e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f1'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004ec'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Meet the Super Fan Who Waited in Line for a Month for a Wii U [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1qg-znEVZxo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1qg-znEVZxo/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502393", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502543"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f3'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sunday Comics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sunday Comics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f4'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f5'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f6300024f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"investors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"investors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f6'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f2'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002be')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f7'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f2'), "category_id"=>BSON::ObjectId('50aa48431d44b60f63000200')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Is Apple Bipolar? [SUNDAY COMICS]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/MO4j9uWcB1c\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/MO4j9uWcB1c/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502543", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1495167"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004f9'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48431d44b60f630001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Fox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Fox"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004fa'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004fb'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports illustrated"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sports illustrated"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004fc'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sportsvite"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sportsvite"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004fd'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Yahoo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Yahoo"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004fe'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cbs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cbs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f630004ff'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"data"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000500'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nbc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nbc"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000501'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfl"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48481d44b60f63000502'), "article_id"=>BSON::ObjectId('50aa48481d44b60f630004f8'), "category_id"=>BSON::ObjectId('50aa48441d44b60f630002d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Analysis of NFL Analysts: Which ‘Experts’ Get It Right?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/nfl-analysts/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/nfl-analysts/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/nfl-analysts/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/Football-Questions.jpeg\" alt=\"Football Questions\" title=\"Football Questions\" width=\"640\" height=\"400\" class=\"alignright size-full wp-image-1495931\" /></a></p>\n<p>One thing that distinguishes all NFL fans: they think they know more about the league than every other <a href=\"http://mashable.com/follow/topics/nfl/\">NFL</a> fan in the country -- or at least that's what they <em>think</em>. Basically, every fan is an expert in his or her own mind. </p>\n<p>That's why each week of the season, fans of the sport </p>\n<p>More About: <a href=\"http://mashable.com/tag/fox/\">Fox</a>, <a href=\"http://mashable.com/tag/sports/\">Sports</a>, <a href=\"http://mashable.com/tag/sports-illustrated/\">Sports illustrated</a>, <a href=\"http://mashable.com/tag/sportsvite/\">Sportsvite</a>, <a href=\"http://mashable.com/tag/yahoo/\">Yahoo</a>, <a href=\"http://mashable.com/tag/cbs/\">cbs</a>, <a href=\"http://mashable.com/tag/data/\">data</a>, <a href=\"http://mashable.com/tag/nbc/\">nbc</a>, <a href=\"http://mashable.com/tag/nfl/\">nfl</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/c5bdp_FQGLOkMY4XULaVVSZ9B6Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=POfHkvSvBJs:c0vn_9WTrcI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/POfHkvSvBJs\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/POfHkvSvBJs/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1495167", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48481d44b60f630004f8')}])
Redirected to http://www.example.com/articles
Completed 302 Found in 3722ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:55:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:54:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48451d44b60f630002f5')}).limit(-1)
Completed 200 OK in 5ms (Views: 4.2ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:55:04 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:54:04 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 3.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48451d44b60f630002f5')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000509'), "name"=>"user27", "email"=>"user26@example.com", "role"=>"reader", "password_salt"=>"$2a$10$XqKrBCmuPSeY4pIpL6Fgs.", "password_hash"=>"$2a$10$XqKrBCmuPSeY4pIpL6Fgs.7WBejY3cwjdgjF5Gh036Xtx1C.7pdyi"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300050a'), "name"=>"user28", "email"=>"asf.as@fac.cs", "role"=>"admin", "password_salt"=>"$2a$10$HofY5ZmIDstFQKFxp.vSiO", "password_hash"=>"$2a$10$HofY5ZmIDstFQKFxp.vSiO4DOhwvbIRjOJr0weFsOSc1IGclEcbl6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000509')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300050a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300050d'), "name"=>"user29", "email"=>"user28@example.com", "role"=>"reader", "password_salt"=>"$2a$10$xGo85lbwQ1ff8zvr0arkou", "password_hash"=>"$2a$10$xGo85lbwQ1ff8zvr0arkoul898AjRupFgks6KqbgSjp7QIGEKRjA."}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300021a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300021e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000227')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000229')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300022e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000230')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000233')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000242')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000246')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000248')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300024b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300024f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001d9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001db')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001dd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001df')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001e1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001e3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001e9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001f2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001fc')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001fe')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000200')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000204')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000206')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300020a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300020c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000210')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000212')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000216')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000218')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b000328')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00032a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa45671d44b60f5b00032c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000019')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300001a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f6300001d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000020')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000024')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000025')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000027')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48381d44b60f63000029')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000038')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000039')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f6300003c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f6300003f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000043')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000044')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000046')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48391d44b60f63000048')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001b3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001b5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001b7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001b9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001bb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001bd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001bf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001c1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001c3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001c9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001cb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001cd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001cf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001d1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001d3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001d7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001e7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001ed')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f630001f7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f6300020e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000220')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48431d44b60f63000223')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000235')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000237')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300023d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300023f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000251')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000253')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000257')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000259')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300025b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300025d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000261')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000263')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000267')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000269')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300026b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300026d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300026f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000275')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000277')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000279')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300027d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000281')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000285')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000287')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000289')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300028b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300028f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000291')})
MONGODB [DEBUG] cursor.refresh() for cursor 1057565074914958855
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000293')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f63000295')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f6300029f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002a4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002a9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002ab')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002ad')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002b2')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002b4')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002b7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002bb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002be')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002c3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002c7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002c9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002cd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002cf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002d1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002d3')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300050f'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300050f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000512'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000512')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000514'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000419')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000428')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000430')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000431')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000440')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000441')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000443')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000444')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630002ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000300')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000301')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000302')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000303')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000304')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000305')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000306')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000307')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000308')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000309')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300030f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000310')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000311')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000312')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000313')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000314')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000315')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000316')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000317')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000318')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000319')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300031f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000320')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000321')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000322')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000323')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000324')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000325')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000326')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000327')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000328')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000329')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300032f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000330')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000331')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000332')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000333')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000334')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000335')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000336')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000337')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000338')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000339')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300033f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000340')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000341')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000342')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000343')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000344')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000345')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000346')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000347')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000348')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000349')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300034f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000350')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000351')})
MONGODB [DEBUG] cursor.refresh() for cursor 2022190686369635883
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000352')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000353')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000354')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000355')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000356')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000357')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000358')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000359')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300035f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000360')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000361')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000362')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000363')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000364')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000365')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000366')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000367')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000368')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000369')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300036f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000370')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000371')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000372')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000373')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000374')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000375')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000376')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000377')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000378')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000379')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300037f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000380')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000381')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000382')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000383')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000384')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000385')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000386')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000387')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000388')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000389')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300038f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000390')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000391')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000392')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000393')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000394')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000395')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000396')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000397')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000398')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f63000399')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f6300039f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003aa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ab')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ac')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ad')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003af')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003b9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ba')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003bb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003bc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003bd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003be')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003bf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003c9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ca')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003cb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003cd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003ce')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003cf')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003da')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003db')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003dc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003dd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48461d44b60f630003de')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003df')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003e9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ea')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003eb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ed')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ee')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ef')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f0')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f5')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f7')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003f9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003fa')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003fb')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003fc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003fd')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003fe')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f630003ff')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000400')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000401')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000402')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000403')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000404')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000405')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000406')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000407')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000408')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000409')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300040f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000410')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000411')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000412')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000413')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000414')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000415')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000416')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000417')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000418')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300041f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000420')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000421')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000422')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000423')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000424')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000425')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000426')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000427')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000429')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300042f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000432')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000433')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000434')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000435')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000436')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000437')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000438')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000439')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f6300043f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000442')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000445')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48471d44b60f63000446')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000447')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000452')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300045a')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000463')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000467')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300046b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300046f')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000473')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000478')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300047c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000483')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000488')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300048e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f63000492')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f6300049b')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004a3')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004a9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004ae')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004b4')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004b8')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004c1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004c6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004cc')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004d2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004d9')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004e1')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004e6')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004ec')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004f2')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48481d44b60f630004f8')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300050d')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000515'), "headline"=>"un1q"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000515')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000515"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000515')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000516'), "headline"=>"uniq"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000516')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000516"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000516')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000517'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000517')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000517"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000517')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300051a'), "headline"=>"asdf"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051a')}, {"$set"=>{"guid"=>"50aa48491d44b60f6300051a"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300051a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300051b'), "headline"=>"new_article_1"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051b')}, {"$set"=>{"guid"=>"50aa48491d44b60f6300051b"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051b')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051b')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051b')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300051b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300051c'), "headline"=>"unique"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051c')}, {"$set"=>{"guid"=>"50aa48491d44b60f6300051c"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051c')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300051c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300051e'), "name"=>"user30", "email"=>"user29@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ySbESbdgmlU/1F4TEdjFW.", "password_hash"=>"$2a$10$ySbESbdgmlU/1F4TEdjFW.OH754KrNm5rbggfwTbTzZwPv9ByEXgG"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300051f'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50aa48491d44b60f6300051e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f6300051f')}, {"$set"=>{"guid"=>"50aa48491d44b60f6300051f"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300051f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300051e')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000520'), "headline"=>"un1que"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000520')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000520"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000520')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000520')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000522'), "headline"=>"no_user_article1", "story"=>"it is an article"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000522')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000522"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000522')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user30@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000524'), "name"=>"user31", "email"=>"user30@example.com", "role"=>"reader", "password_salt"=>"$2a$10$LG.Gaodkz946wdpj6f3jyO", "password_hash"=>"$2a$10$LG.Gaodkz946wdpj6f3jyOGpZmpBemnzbpQ9VlTAsSayRQYw0VKlS"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000525'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50aa48491d44b60f63000524')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000525')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000525"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000525')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000524')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000514')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50aa48491d44b60f63000527')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000528'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f63000527')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50aa48491d44b60f63000529')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300052a'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f63000529')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50aa48491d44b60f6300052b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300052c'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f6300052b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "headline"=>"asdfqwer"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300052d'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f63000527')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300052e'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f63000529')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300052f'), "article_id"=>BSON::ObjectId('50aa48491d44b60f63000526'), "category_id"=>BSON::ObjectId('50aa48491d44b60f6300052b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48491d44b60f63000526')}, {"$set"=>{"guid"=>"50aa48491d44b60f63000526"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002d5')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48441d44b60f630002d6')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000532'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000532')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50aa48491d44b60f63000537')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000537')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48371d44b60f63000017')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000539'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
  Rendered areas/_form.html.erb (2.0ms)
Completed 200 OK in 7ms (Views: 5.7ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 6ms (Views: 3.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000539')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 5ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aa48491d44b60f63000541')}])
Redirected to http://www.example.com/areas/50aa48491d44b60f63000541
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aa48491d44b60f63000541" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa48491d44b60f63000541"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48491d44b60f63000541')}).limit(-1)
Completed 200 OK in 45ms (Views: 43.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000541')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000545'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa48491d44b60f63000545/edit" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aa48491d44b60f63000545"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48491d44b60f63000545')}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 6ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000545')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000546'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa48491d44b60f63000546" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa48491d44b60f63000546"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48491d44b60f63000546')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000546')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000547'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aa48491d44b60f63000547" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aa48491d44b60f63000547"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48491d44b60f63000547')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000547')})
Redirected to http://www.example.com/areas
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:55:05 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:54:05 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000549'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000549')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300054a')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300054a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300054c'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300054c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f6300054f'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300054f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48491d44b60f63000550'), "slave"=>"Esclavo2"}])
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48951d44b60f66000001'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$WNExzHocYTcTUOc0I51HEu", "password_hash"=>"$2a$10$WNExzHocYTcTUOc0I51HEuL2EQHwYRSMdhDlPDM3sSNjl9uRPzBrK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
  Rendered sessions/new.html.erb within layouts/application (3.2ms)
Completed 200 OK in 54ms (Views: 51.5ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48951d44b60f66000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (40.0ms)
Completed 200 OK in 44ms (Views: 42.8ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48951d44b60f66000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 5ms (Views: 3.7ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 5ms (Views: 3.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
  Rendered areas/_form.html.erb (6.6ms)
Completed 200 OK in 11ms (Views: 9.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48951d44b60f66000006'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 6ms (Views: 3.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f66000006')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aa48951d44b60f6600000e')}])
Redirected to http://www.example.com/areas/50aa48951d44b60f6600000e
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aa48951d44b60f6600000e" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa48951d44b60f6600000e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48951d44b60f6600000e')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f6600000e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48951d44b60f6600000f'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa48951d44b60f6600000f" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa48951d44b60f6600000f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48951d44b60f6600000f')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f6600000f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48951d44b60f66000010'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa48951d44b60f66000010/edit" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aa48951d44b60f66000010"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48951d44b60f66000010')}).limit(-1)
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 6ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f66000010')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48951d44b60f66000011'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 40.5ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aa48951d44b60f66000011" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aa48951d44b60f66000011"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa48951d44b60f66000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f66000011')})
Redirected to http://www.example.com/areas
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 11:56:21 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 14:55:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 2ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48951d44b60f66000001')})
MONGODB (11ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f66000014'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$mE7LmTnTDTIb7blfwlPMuO", "password_hash"=>"$2a$10$mE7LmTnTDTIb7blfwlPMuOeFu.BstjzXlXSj2vBs2yY.iVOlBzqou"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000014')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"test@hmail.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f66000018'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$XET2Eacbzym6VHlewwkGWu", "password_hash"=>"$2a$10$XET2Eacbzym6VHlewwkGWuZXA/JnBUJUv3KA8wSjOlj8XV9UwPDQm"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"asf.as@fac.cs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f66000019'), "name"=>"user4", "email"=>"asf.as@fac.cs", "role"=>"admin", "password_salt"=>"$2a$10$N5H968.kQXAgt/zohs9n/e", "password_hash"=>"$2a$10$N5H968.kQXAgt/zohs9n/euWH1Jn66DjSPxUqYEmgdqt3SIANaz92"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000018')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000019')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 5ms (Views: 3.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f6600001e'), "name"=>"user5", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$zfArvKdmWjBMmenpf226G.", "password_hash"=>"$2a$10$zfArvKdmWjBMmenpf226G.FlTOBiZf1dY2wP5cs1jT0H3PYixTa1O"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/users/50aa48961d44b60f6600001e" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa48961d44b60f6600001e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48961d44b60f6600001e')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f6600001e')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user6", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 9ms (Views: 6.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user7", "email"=>"user7@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f66000028'), "name"=>"user8", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$a0eTreL225CeNkXonJ64I.", "password_hash"=>"$2a$10$a0eTreL225CeNkXonJ64I.xZOKAqRKc4T7IUqmJsmDtQsac/VD9Ky"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user8", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 39.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000028')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f6600002c'), "name"=>"user9", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$F9i4pOyCQXY0erMB59Zo.O", "password_hash"=>"$2a$10$F9i4pOyCQXY0erMB59Zo.O7FZ3b6Xhy3XQPyxfD14wbWfij3B0rh."}])


Started GET "/users/50aa48961d44b60f6600002c?method=delete" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aa48961d44b60f6600002c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48961d44b60f6600002c')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f6600002c')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 4.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user10", "email"=>"user9@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user10", "email"=>"user9@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aa48961d44b60f66000030'), "password_salt"=>"$2a$10$abCF4WJzFjfz2.Cd21JqXO", "password_hash"=>"$2a$10$abCF4WJzFjfz2.Cd21JqXO75Y7U8Cj9KN3PBGKz4k.0FKkI3HRbyW"}])
Redirected to http://www.example.com/users/50aa48961d44b60f66000030
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/users/50aa48961d44b60f66000030" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa48961d44b60f66000030"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48961d44b60f66000030')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48961d44b60f66000030')}).limit(-1)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000030')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 4.8ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user11", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 44ms (Views: 41.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48961d44b60f66000039'), "name"=>"user12", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hG4IMcrw9NZHYlRsLgOB7u", "password_hash"=>"$2a$10$hG4IMcrw9NZHYlRsLgOB7uc7OJCXjHi/GJIifvff/RONkprG615zS"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aa48961d44b60f66000039" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aa48961d44b60f66000039"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48961d44b60f66000039')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48961d44b60f66000039')})
Redirected to http://www.example.com/users
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 2ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 44ms (Views: 42.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:56:22 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:55:22 UTC}})
MONGODB (35ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48961d44b60f6600003c')})
  Rendered news_agencies/_form.html.erb (41.0ms)
Completed 200 OK in 45ms (Views: 43.7ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aa48971d44b60f6600003d')}])
Redirected to http://www.example.com/news_agencies/50aa48971d44b60f6600003d
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa48971d44b60f6600003d" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa48971d44b60f6600003d"}
MONGODB (40ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa48971d44b60f6600003d')}).limit(-1)
Completed 200 OK in 45ms (Views: 2.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600003d')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f6600003f')})
  Rendered news_agencies/_form.html.erb (4.5ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000040')})
  Rendered news_agencies/_form.html.erb (4.3ms)
Completed 200 OK in 8ms (Views: 5.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000042')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000043')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 9ms (Views: 6.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000044'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000045')})
  Rendered news_agencies/_form.html.erb (4.4ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000046')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 9ms (Views: 6.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000044')})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f66000048')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000049'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.3ms)
Completed 200 OK in 5ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa48971d44b60f66000049" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa48971d44b60f66000049"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa48971d44b60f66000049')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000049')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004a'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.0ms)
Completed 200 OK in 4ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa48971d44b60f6600004a/edit" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aa48971d44b60f6600004a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa48971d44b60f6600004a')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa48971d44b60f6600004a')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 9ms (Views: 7.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600004a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004b'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aa48971d44b60f6600004b" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aa48971d44b60f6600004b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa48971d44b60f6600004b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600004b')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 11:56:23 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 14:55:23 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004c'), "name"=>"user13", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$N9fB9rI9IFxFT0/gkrg00e", "password_hash"=>"$2a$10$N9fB9rI9IFxFT0/gkrg00eed/ZuQ64YHVfUMROAXui3kBEtx8TGVm"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004d'), "name"=>"category1"}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004e'), "user_id"=>BSON::ObjectId('50aa48971d44b60f6600004c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600004d')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600004f'), "name"=>"user14", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$6T8/1kbZJKc0VaL3nnv/BO", "password_hash"=>"$2a$10$6T8/1kbZJKc0VaL3nnv/BOgwBEwgwtuErNsBNDN9ZkftrQShCIG56"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000050'), "name"=>"category2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte_user 50aa48971d44b60f6600004f"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte_user 50aa48971d44b60f6600004f"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte_user 50aa48971d44b60f6600004f", "_id"=>BSON::ObjectId('50aa48971d44b60f66000051')}])
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000052'), "user_id"=>BSON::ObjectId('50aa48971d44b60f6600004f'), "category_id"=>BSON::ObjectId('50aa48971d44b60f66000051')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000053'), "name"=>"user15", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$3htT2/QyaFhQ3W0SWWOUTO", "password_hash"=>"$2a$10$3htT2/QyaFhQ3W0SWWOUTOFaAewR30cNR5bt5GCLTMUpNx1V8Sdqq"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000054'), "name"=>"category3"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['user_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000056'), "user_id"=>BSON::ObjectId('50aa48971d44b60f66000055'), "category_id"=>BSON::ObjectId('50aa48971d44b60f66000054')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000057'), "name"=>"user17", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ozj/u.HvN7li0ySBakSYnO", "password_hash"=>"$2a$10$ozj/u.HvN7li0ySBakSYnOBidR1EVEBp4KqhqBt6za/PtsiOY/lVy"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category4"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000058'), "name"=>"category4"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000059'), "name"=>"user18", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$NdhtoYYzuWyiR8F6CzHGne", "password_hash"=>"$2a$10$NdhtoYYzuWyiR8F6CzHGneirRP3YJ3CUyUh8UMAUfaOst.l88YdwS"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category5"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600005a'), "name"=>"category5"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"user_artes 50aa48971d44b60f66000059"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"user_artes 50aa48971d44b60f66000059"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"user_artes 50aa48971d44b60f66000059", "_id"=>BSON::ObjectId('50aa48971d44b60f6600005b')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600005c'), "name"=>"user19", "email"=>"user18@example.com", "role"=>"reader", "password_salt"=>"$2a$10$DsxvEE0GPe5ShEELUOAK8.", "password_hash"=>"$2a$10$DsxvEE0GPe5ShEELUOAK8.QcAnP5/dw9vkUScczN6q3fz80p8TEOm"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category6"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600005d'), "name"=>"category6"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000526')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600004c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600004f')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000053')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000057')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000059')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600005c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000060'), "headline"=>"un1q"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000060')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000060"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000060')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000061'), "headline"=>"uniq"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000061')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000061"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000061')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000062'), "headline"=>"un1q", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000062')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000062"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000062')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000063'), "headline"=>"un1que"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000063')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000063"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000063')}, {"$set"=>{"editors_grade"=>16, "grade"=>16.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000063')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000064'), "headline"=>"new_article_1"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000064')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000064"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000064')}, {"$set"=>{"editors_grade"=>5, "grade"=>5.0}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000064')}, {"$set"=>{"chief_editor_grade"=>6, "grade"=>23.0, "is_published"=>true}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000064')}, {"$set"=>{"chief_editor_country_grade"=>7, "grade"=>44.0}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000064')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000065'), "headline"=>"unique"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000065')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000065"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000065')}, {"$set"=>{"deck"=>"it is an article"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000065')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user19@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000067'), "name"=>"user20", "email"=>"user19@example.com", "role"=>"reader", "password_salt"=>"$2a$10$o/CYLnNjax0zt8/pXOnivu", "password_hash"=>"$2a$10$o/CYLnNjax0zt8/pXOnivuJRCo4.0pFpvSG38eSfqq8CRYf4L/opq"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000068'), "headline"=>"user_article", "user_id"=>BSON::ObjectId('50aa48971d44b60f66000067')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000068')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000068"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000068')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000067')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user20@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600006a'), "name"=>"user21", "email"=>"user20@example.com", "role"=>"reader", "password_salt"=>"$2a$10$vIALrIybLUHQgPOtuuwfV.", "password_hash"=>"$2a$10$vIALrIybLUHQgPOtuuwfV.S7caWfWJTBDIKOvQR.vFm36Fwu.M6he"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600006b'), "headline"=>"user_article1", "user_id"=>BSON::ObjectId('50aa48971d44b60f6600006a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f6600006b')}, {"$set"=>{"guid"=>"50aa48971d44b60f6600006b"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600006b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600006a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000527')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000529')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f6300052b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600004d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000050')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000051')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000054')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000058')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600005a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600005b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600005d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"1"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"1", "_id"=>BSON::ObjectId('50aa48971d44b60f6600006d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600006e'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600006d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"2", "_id"=>BSON::ObjectId('50aa48971d44b60f6600006f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000070'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600006f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"3"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"3", "_id"=>BSON::ObjectId('50aa48971d44b60f66000071')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000072'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f66000071')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "headline"=>"asdfqwer"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"1"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000073'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600006d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"2"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000074'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600006f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"3"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000075'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600006c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f66000071')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f6600006c')}, {"$set"=>{"guid"=>"50aa48971d44b60f6600006c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600006c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000076'), "headline"=>"asdf"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000076')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000076"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000076')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000078'), "headline"=>"no_user_article1", "story"=>"it is an article"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000078')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000078"}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000079'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000079')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000079"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category7"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600007a'), "name"=>"category7"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600007b'), "article_id"=>BSON::ObjectId('50aa48971d44b60f66000079'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600007a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600007c'), "headline"=>"i get published at once, 2", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f6600007c')}, {"$set"=>{"guid"=>"50aa48971d44b60f6600007c"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category8"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600007d'), "name"=>"category8"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"arte 50aa48971d44b60f6600007c"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"arte 50aa48971d44b60f6600007c"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"arte 50aa48971d44b60f6600007c", "_id"=>BSON::ObjectId('50aa48971d44b60f6600007e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600007f'), "article_id"=>BSON::ObjectId('50aa48971d44b60f6600007c'), "category_id"=>BSON::ObjectId('50aa48971d44b60f6600007e')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000080'), "headline"=>"i get published at once, 3", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000080')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000080"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category9"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000081'), "name"=>"category9"}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000083'), "article_id"=>BSON::ObjectId('50aa48971d44b60f66000082'), "category_id"=>BSON::ObjectId('50aa48971d44b60f66000081')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000084'), "headline"=>"i get published at once, 4", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000084')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000084"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category10"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000085'), "name"=>"category10"}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000086'), "headline"=>"i get published at once, 5", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000086')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000086"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category11"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000087'), "name"=>"category11"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"artes 50aa48971d44b60f66000086"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"artes 50aa48971d44b60f66000086"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"artes 50aa48971d44b60f66000086", "_id"=>BSON::ObjectId('50aa48971d44b60f66000088')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000089'), "headline"=>"i get published at once, 6", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48971d44b60f66000089')}, {"$set"=>{"guid"=>"50aa48971d44b60f66000089"}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category12"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600008a'), "name"=>"category12"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f6600008e'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600008e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa48971d44b60f66000092'), "name"=>"Area Nueva"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000079')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000078')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600007c')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000080')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000084')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000086')})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000089')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa48971d44b60f66000093')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa48971d44b60f66000094')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000093')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000094')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa48981d44b60f66000095')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa48981d44b60f66000096')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48981d44b60f66000095')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48981d44b60f66000096')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa48991d44b60f66000097')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa48991d44b60f66000098')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48991d44b60f66000097')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48991d44b60f66000098')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.feedburner.com/railscasts"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"UPS", "feed_url"=>"http://feeds.feedburner.com/railscasts", "_id"=>BSON::ObjectId('50aa489d1d44b60f66000099')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://feeds.mashable.com/mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Reuters", "feed_url"=>"http://feeds.mashable.com/mashable", "_id"=>BSON::ObjectId('50aa489d1d44b60f6600009a')}])
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"turbolinks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#390 Turbolinks", "deck"=>"Turbolinks can make your Rails app feel faster by using JavaScript to replace the page content when clicking a link. It will be default in new Rails 4.0 applications, but here I show how to use it in Rails 3 and mention some of the gotchas.", "story"=>nil, "url"=>"http://railscasts.com/episodes/390-turbolinks", "published_on"=>2012-11-05 00:00:00 UTC, "guid"=>"turbolinks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600009b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cache-digests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#387 Cache Digests", "deck"=>"The cache_digests gem (also included in Rails 4) will automatically add a digest to the fragment cache key based on the template. If a template changes the cache will auto-expire. But watch out for the gotchas!", "story"=>nil, "url"=>"http://railscasts.com/episodes/387-cache-digests", "published_on"=>2012-10-20 00:00:00 UTC, "guid"=>"cache-digests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600009c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exploring-rubygems"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#384 Exploring RubyGems", "deck"=>"RubyGems can make it easy to add a feature to a Rails application, but it can also cause headaches down the road. Here I give some tips on researching gems to decide which one to choose, or when to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/384-exploring-rubygems", "published_on"=>2012-10-07 00:00:00 UTC, "guid"=>"exploring-rubygems", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600009d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tagging"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#382 Tagging", "deck"=>"There are several gems to help implement tags in a Rails app. Here I show you how to integrate acts-as-taggable-on and then show how to do it from scratch.", "story"=>nil, "url"=>"http://railscasts.com/episodes/382-tagging", "published_on"=>2012-09-22 00:00:00 UTC, "guid"=>"tagging", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600009e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fnordmetric"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#378 FnordMetric", "deck"=>"FnordMetric allows you to chart events in real time. This is great for keeping track of user activity in your Rails app as demonstrated in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/378-fnordmetric", "published_on"=>2012-09-04 00:00:00 UTC, "guid"=>"fnordmetric", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600009f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jruby-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#376 JRuby Basics", "deck"=>"JRuby is a polished and stable Ruby implementation. Here I show the basics of setting it up and executing Java from within Ruby. I also see how it compares with MRI at running threads.", "story"=>nil, "url"=>"http://railscasts.com/episodes/376-jruby-basics", "published_on"=>2012-08-30 00:00:00 UTC, "guid"=>"jruby-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"image-manipulation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#374 Image Manipulation", "deck"=>"Learn how to do extensive image manipulation with the ImageMagick commands. Also learn how RMagick can be used in combination with CarrierWave to process uploaded images.", "story"=>nil, "url"=>"http://railscasts.com/episodes/374-image-manipulation", "published_on"=>2012-08-16 00:00:00 UTC, "guid"=>"image-manipulation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bullet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#372 Bullet", "deck"=>"Bullet will notify you of database queries that can potentially be improved through eager loading or counter cache column. A variety of notification alerts are supported.", "story"=>nil, "url"=>"http://railscasts.com/episodes/372-bullet", "published_on"=>2012-08-09 00:00:00 UTC, "guid"=>"bullet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ransack"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#370 Ransack", "deck"=>"Ransack allows you to easily build complex search forms. It also helps in adding sortable links and building a dynamic advanced search page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/370-ransack", "published_on"=>2012-08-03 00:00:00 UTC, "guid"=>"ransack", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"miniprofiler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#368 MiniProfiler", "deck"=>"MiniProfiler allows you to see the speed of a request conveniently on the page. It also shows the SQL queries performed and allows you to profile a specific block of code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/368-miniprofiler", "published_on"=>2012-07-24 00:00:00 UTC, "guid"=>"miniprofiler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sidekiq"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#366 Sidekiq", "deck"=>"Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque.", "story"=>nil, "url"=>"http://railscasts.com/episodes/366-sidekiq", "published_on"=>2012-07-18 00:00:00 UTC, "guid"=>"sidekiq", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-reputation-system"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#364 Active Record Reputation System", "deck"=>"If you need to calculate an average user's rating or sum up a number of votes, consider using the activerecord-reputation-system gem. Here I will cover the basics and also briefly present a from-scratch solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/364-active-record-reputation-system", "published_on"=>2012-07-09 00:00:00 UTC, "guid"=>"active-record-reputation-system", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exporting-csv-and-excel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#362 Exporting CSV and Excel", "deck"=>"As you will see it is easy to add a CSV export option to Rails. Here I also show how to export for Excel in a variety of formats.", "story"=>nil, "url"=>"http://railscasts.com/episodes/362-exporting-csv-and-excel", "published_on"=>2012-07-02 00:00:00 UTC, "guid"=>"exporting-csv-and-excel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"facebook-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#360 Facebook Authentication", "deck"=>"This will show how to create a new facebook application and configure it. Then add some authentication with the omniauth-facebook gem and top it off with a client-side authentication using the JavaScript SDK.", "story"=>nil, "url"=>"http://railscasts.com/episodes/360-facebook-authentication", "published_on"=>2012-06-25 00:00:00 UTC, "guid"=>"facebook-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"brakeman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#358 Brakeman", "deck"=>"The Brakeman gem will scan the Ruby code of a Rails application and alert you to common security vulnerabilities.", "story"=>nil, "url"=>"http://railscasts.com/episodes/358-brakeman", "published_on"=>2012-06-15 00:00:00 UTC, "guid"=>"brakeman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-session-hijacking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#356 Dangers of Session Hijacking", "deck"=>"If a user's authentication cookie is sent over an insecure connection it is vulnerable to session hijacking, or more specifically, sidejacking. Learn how this is done, and how you can prevent it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/356-dangers-of-session-hijacking", "published_on"=>2012-06-08 00:00:00 UTC, "guid"=>"dangers-of-session-hijacking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"squeel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#354 Squeel", "deck"=>"Squeel provides a comprehensive DSL for writing SQL queries in Ruby. It is built upon Arel giving you access to many of its powerful features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/354-squeel", "published_on"=>2012-05-30 00:00:00 UTC, "guid"=>"squeel", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"securing-an-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#352 Securing an API", "deck"=>"There are many approaches to locking down an API. Here I start off with HTTP Basic authentication then move on to generating a unique token which can be passed through a URL parameter or HTTP header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/352-securing-an-api", "published_on"=>2012-05-23 00:00:00 UTC, "guid"=>"securing-an-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rest-api-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#350 REST API Versioning", "deck"=>"APIs should be consistent, but it is difficult to do this when returning a JSON response along side the HTML interface. Here I show how to add a versioned, RESTful API. The version can be determined from either the URL or HTTP headers.", "story"=>nil, "url"=>"http://railscasts.com/episodes/350-rest-api-versioning", "published_on"=>2012-05-16 00:00:00 UTC, "guid"=>"rest-api-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-rails-api-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#348 The Rails API Gem", "deck"=>"It is often asked: Is Rails a good fit if I only need to serve an API? In this episode I show how to use the Rails API gem to create a slimmer Rails application designed to respond with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/348-the-rails-api-gem", "published_on"=>2012-05-09 00:00:00 UTC, "guid"=>"the-rails-api-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rubber-and-amazon-ec2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#347 Rubber and Amazon EC2", "deck"=>"Deploying to Amazon EC2 allows you to scale an application quickly. Learn how to use Rubber to deploy to the cloud with just a few commands and monitor the cluster with various web tools.", "story"=>nil, "url"=>"http://railscasts.com/episodes/347-rubber-and-amazon-ec2", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"rubber-and-amazon-ec2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"wizard-forms-with-wicked"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#346 Wizard Forms with Wicked", "deck"=>"Creating a wizard form can be tricky in Rails. Learn how Wicked can help by turning a controller into a series of multiple steps.", "story"=>nil, "url"=>"http://railscasts.com/episodes/346-wizard-forms-with-wicked", "published_on"=>2012-05-03 00:00:00 UTC, "guid"=>"wizard-forms-with-wicked", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"queue-classic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#344 Queue Classic", "deck"=>"PostgreSQL can act as a worker queue which can replace the need for a separate process to manage the background jobs. Here you will learn how to do this with the queue_classic gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/344-queue-classic", "published_on"=>2012-04-24 00:00:00 UTC, "guid"=>"queue-classic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrating-to-postgresql"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#342 Migrating to PostgreSQL", "deck"=>"Postgres is a feature-packed relational database that every Rails developer should consider using. Here you will learn how to install it, add it to a new application, and transition from an existing SQLite app using the \"taps\" gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/342-migrating-to-postgresql", "published_on"=>2012-04-17 00:00:00 UTC, "guid"=>"migrating-to-postgresql", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"datatables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#340 DataTables", "deck"=>"DataTables makes it easy to convert a plain HTML table into one with pagination, sorting, and searching - all done with JavaScript and jQuery. Here I show how to set this up and use a Rails application as the data source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/340-datatables", "published_on"=>2012-04-11 00:00:00 UTC, "guid"=>"datatables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"globalize3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#338 Globalize3", "deck"=>"Rails has great internationalization (I18n) support making it easy to translate static text into other languages, but how do we translate database content? Learn how using Globalize 3 in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/338-globalize3", "published_on"=>2012-04-04 00:00:00 UTC, "guid"=>"globalize3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"copycopter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#336 Copycopter", "deck"=>"Copycopter provides a nice interface that clients can use to edit the text in a Rails application. Learn how to deploy a Copycopter server using Heroku and integrate it in a Rails application through I18n.", "story"=>nil, "url"=>"http://railscasts.com/episodes/336-copycopter", "published_on"=>2012-03-27 00:00:00 UTC, "guid"=>"copycopter", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"compass-css-sprites"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#334 Compass & CSS Sprites", "deck"=>"Compass improves the Sass experience by providing useful mixins, functions, and more. You will also learn how to make CSS sprites with it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/334-compass-css-sprites", "published_on"=>2012-03-21 00:00:00 UTC, "guid"=>"compass-css-sprites", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refinery-cms-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#332 Refinery CMS Basics", "deck"=>"If you need to quickly create an informational site that can be easily edited, consider using a content management system. Here I show how to build a site using Refinery CMS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/332-refinery-cms-basics", "published_on"=>2012-03-14 00:00:00 UTC, "guid"=>"refinery-cms-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"better-sass-with-bourbon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#330 Better Sass with Bourbon", "deck"=>"If you are tired of the browser vendor prefixes in CSS, check out Bourbon. It provides Sass mixins and functions to make CSS more convenient.", "story"=>nil, "url"=>"http://railscasts.com/episodes/330-better-sass-with-bourbon", "published_on"=>2012-03-07 00:00:00 UTC, "guid"=>"better-sass-with-bourbon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"twitter-bootstrap-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#328 Twitter Bootstrap Basics", "deck"=>"Twitter Bootstrap can help make beautiful web apps quickly by providing you with useful CSS and JavaScript. Here you will learn how to include it into Rails with the twitter-bootstrap-rails gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/328-twitter-bootstrap-basics", "published_on"=>2012-02-28 00:00:00 UTC, "guid"=>"twitter-bootstrap-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeattr"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#326 ActiveAttr", "deck"=>"ActiveAttr provides what Active Model left out. If you need to create a table-less model with features similar to Active Record, watch this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/326-activeattr", "published_on"=>2012-02-21 00:00:00 UTC, "guid"=>"activeattr", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passing-data-to-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#324 Passing Data to JavaScript", "deck"=>"There are a variety of ways to pass variables from a Rails application to JavaScript. Here I show three techniques: a script tag, a data attribute, and the Gon gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/324-passing-data-to-javascript", "published_on"=>2012-02-13 00:00:00 UTC, "guid"=>"passing-data-to-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rabl"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#322 RABL", "deck"=>"RABL - Ruby API Builder Language - provides a DSL for generating JSON or XML responses in a Ruby application. Learn how to share and configure complex JSON data in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/322-rabl", "published_on"=>2012-02-08 00:00:00 UTC, "guid"=>"rabl", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jbuilder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#320 Jbuilder", "deck"=>"Jbuilder provides a DSL for generating JSON. It includes a template engine which allows you to create complex responses with helpers and conditions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/320-jbuilder", "published_on"=>2012-01-30 00:00:00 UTC, "guid"=>"jbuilder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#318 Upgrading to Rails 3.2", "deck"=>"Rails 3.2 sports many new features including automatic explain queries, tagged logging, key-value store in Active Record, improved migration generator and more. Learn all about these new features in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/318-upgrading-to-rails-3-2", "published_on"=>2012-01-23 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"private-pub"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#316 Private Pub", "deck"=>"Private Pub makes it easier than ever to publish and subscribe to real-time events in a Rails app. You can use publish_to with a block of JavaScript or supply a hash for use with JSON.", "story"=>nil, "url"=>"http://railscasts.com/episodes/316-private-pub", "published_on"=>2012-01-16 00:00:00 UTC, "guid"=>"private-pub", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-urls-with-friendlyid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#314 Pretty URLs with FriendlyId", "deck"=>"If you are tired of model ids in the URL, overriding to_param can only get you so far. The friendly_id plugin can help by making it easy to generate a URL slug and maintain a history.", "story"=>nil, "url"=>"http://railscasts.com/episodes/314-pretty-urls-with-friendlyid", "published_on"=>2012-01-09 00:00:00 UTC, "guid"=>"pretty-urls-with-friendlyid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-html-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#312 Sending HTML Email", "deck"=>"HTML email can be difficult to code because any CSS should be made inline. Here I present a few tools for doing this including the premailer-rails3 and roadie gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/312-sending-html-email", "published_on"=>2012-01-02 00:00:00 UTC, "guid"=>"sending-html-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#310 Getting Started with Rails", "deck"=>"Learning Ruby on Rails can be overwhelming, especially if you are new to programming. Here I will take you on a tour through various resources to help get started with Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/310-getting-started-with-rails", "published_on"=>2011-12-26 00:00:00 UTC, "guid"=>"getting-started-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"oh-my-zsh"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#308 Oh My ZSH", "deck"=>"As Rails developers, we frequently use the command line. Here I will show how to switch to Z Shell using Oh My ZSH including how to make your own theme and plugins.", "story"=>nil, "url"=>"http://railscasts.com/episodes/308-oh-my-zsh", "published_on"=>2011-12-19 00:00:00 UTC, "guid"=>"oh-my-zsh", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"elasticsearch-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#306 ElasticSearch Part 1", "deck"=>"Add full text searching using ElasticSearch and Tire. Here I will show the steps involved in adding this search to an existing application. This is the first part in a two part series.", "story"=>nil, "url"=>"http://railscasts.com/episodes/306-elasticsearch-part-1", "published_on"=>2011-12-12 00:00:00 UTC, "guid"=>"elasticsearch-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-identity"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#304 OmniAuth Identity", "deck"=>"With the release of OmniAuth 1.0 there is a new Identity strategy which allows users to register/login with a password if they don't want to use an external provider.", "story"=>nil, "url"=>"http://railscasts.com/episodes/304-omniauth-identity", "published_on"=>2011-12-05 00:00:00 UTC, "guid"=>"omniauth-identity", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-place-editing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#302 In-Place Editing", "deck"=>"Edit an attribute in-place without leaving a page using the Best In Place gem. Learn how to add validations and support for various field types.", "story"=>nil, "url"=>"http://railscasts.com/episodes/302-in-place-editing", "published_on"=>2011-11-28 00:00:00 UTC, "guid"=>"in-place-editing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-open-source"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#300 Contributing to Open Source", "deck"=>"GitHub makes it easier than ever to contribute to open source with pull requests. Here I show how to submit a pull request to the VCR project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/300-contributing-to-open-source", "published_on"=>2011-11-21 00:00:00 UTC, "guid"=>"contributing-to-open-source", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"getting-started-with-spree"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#298 Getting Started with Spree", "deck"=>"Spree allows you to quickly turn a Rails project into a full eCommerce application. Here I show how to set it up and configure the look and feel of the store.", "story"=>nil, "url"=>"http://railscasts.com/episodes/298-getting-started-with-spree", "published_on"=>2011-11-14 00:00:00 UTC, "guid"=>"getting-started-with-spree", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mercury-editor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#296 Mercury Editor", "deck"=>"Mercury allows you to edit a section of HTML directly in the web browser through a WISYIWYG editor. Here I show how to integrate Mercury into a Rails app and save the changes back to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/296-mercury-editor", "published_on"=>2011-11-07 00:00:00 UTC, "guid"=>"mercury-editor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"playing-with-pjax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#294 Playing with PJAX", "deck"=>"PJAX allows you to quickly update a section of a page using AJAX with automatic pushState support. Here I show how to use both pjax_rails and rack-pjax gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/294-playing-with-pjax", "published_on"=>2011-10-31 00:00:00 UTC, "guid"=>"playing-with-pjax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-machines-with-vagrant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#292 Virtual Machines with Vagrant", "deck"=>"Vagrant allows you to run your Rails application and all of its dependencies in a portable, sharable environment. Use for development, set it up as a staging server, or experiment with a production setup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/292-virtual-machines-with-vagrant", "published_on"=>2011-10-24 00:00:00 UTC, "guid"=>"virtual-machines-with-vagrant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"soap-with-savon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#290 SOAP with Savon", "deck"=>"Communicating with a SOAP API can be a daunting task. Savon makes this easier by presenting the SOAP API through a Ruby interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/290-soap-with-savon", "published_on"=>2011-10-17 00:00:00 UTC, "guid"=>"soap-with-savon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"billing-with-stripe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#288 Billing with Stripe", "deck"=>"Stripe is a full-stack payment solution with very reasonable pricing and is easy to setup. See how to add it to a Rails application here. Currently only available in the US.", "story"=>nil, "url"=>"http://railscasts.com/episodes/288-billing-with-stripe", "published_on"=>2011-10-10 00:00:00 UTC, "guid"=>"billing-with-stripe", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"draper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#286 Draper", "deck"=>"Clean up complex view logic using Draper. This gem provides decorators (much like presenters) which bundles view logic in an object oriented fashion. In this episode I do a step-by-step refactoring of a complex template into a decorator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/286-draper", "published_on"=>2011-10-03 00:00:00 UTC, "guid"=>"draper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"spork"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#285 Spork", "deck"=>"Spork improves the loading time of your test suite by starting up your Rails application once in the background. Use it with Guard for the ultimate combo in fast feedback while doing TDD.", "story"=>nil, "url"=>"http://railscasts.com/episodes/285-spork", "published_on"=>2011-09-26 00:00:00 UTC, "guid"=>"spork", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-admin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#284 Active Admin", "deck"=>"Active Admin allows you to quickly build an admin interface with just a few commands. Not only does it look great, but it is very customizable as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/284-active-admin", "published_on"=>2011-09-19 00:00:00 UTC, "guid"=>"active-admin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-with-sorcery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#283 Authentication with Sorcery", "deck"=>"Sorcery is a full-featured, modular solution to authentication which leaves the controller and view layers up to you.", "story"=>nil, "url"=>"http://railscasts.com/episodes/283-authentication-with-sorcery", "published_on"=>2011-09-12 00:00:00 UTC, "guid"=>"authentication-with-sorcery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#282 Upgrading to Rails 3.1", "deck"=>"It is incredibly easy to upgrade to Rails 3.1, but if you want to take advantage of the asset pipeline you will need to put in some extra effort. Have no fear because I walk you through each of the necessary steps in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/282-upgrading-to-rails-3-1", "published_on"=>2011-09-05 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"foreman"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#281 Foreman", "deck"=>"Foreman can help manage multiple processes that your Rails app depends upon when running in development. It also provides an export command to move them into production.", "story"=>nil, "url"=>"http://railscasts.com/episodes/281-foreman", "published_on"=>2011-08-29 00:00:00 UTC, "guid"=>"foreman", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pry-with-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#280 Pry with Rails", "deck"=>"Pry is an alternative to IRB and sports many great features. Here I show how to integrate it into a Rails app, and how it can aid in debugging.", "story"=>nil, "url"=>"http://railscasts.com/episodes/280-pry-with-rails", "published_on"=>2011-08-22 00:00:00 UTC, "guid"=>"pry-with-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"understanding-the-asset-pipeline"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#279 Understanding the Asset Pipeline", "deck"=>"The asset pipeline is probably the biggest feature in Rails 3.1, but it can seem like magic at first. Here I dive into exactly how the asset pipeline works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/279-understanding-the-asset-pipeline", "published_on"=>2011-08-15 00:00:00 UTC, "guid"=>"understanding-the-asset-pipeline", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-with-sunspot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#278 Search with Sunspot", "deck"=>"Sunspot makes it easy to do full text searching through Solr. Here I show how to search on various attributes and add facets for filtering the search further.", "story"=>nil, "url"=>"http://railscasts.com/episodes/278-search-with-sunspot", "published_on"=>2011-08-08 00:00:00 UTC, "guid"=>"search-with-sunspot", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mountable-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#277 Mountable Engines", "deck"=>"Engines are receiving a major update in Rails 3.1. You can mount them at any path, embed assets, run generators and more. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/277-mountable-engines", "published_on"=>2011-08-01 00:00:00 UTC, "guid"=>"mountable-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-time-web-requests"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#276 Testing Time & Web Requests", "deck"=>"It can be difficult to test code that deals with the current time or an external web request. Here I show you how to do both using the Timecop and FakeWeb gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/276-testing-time-web-requests", "published_on"=>2011-07-25 00:00:00 UTC, "guid"=>"testing-time-web-requests", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-i-test"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#275 How I Test", "deck"=>"Here I show how I would add tests to the password reset feature created in the previous episode. I use RSpec, Capybara, Factory Girl, and Guard to make request, model, and mailer specs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/275-how-i-test", "published_on"=>2011-07-18 00:00:00 UTC, "guid"=>"how-i-test", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"remember-me-reset-password"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#274 Remember Me & Reset Password", "deck"=>"It is easy to create authentication from scratch, but how do we extend it with more features? Here I add a \"remember me\" check box and a \"forgotten password\" link.", "story"=>nil, "url"=>"http://railscasts.com/episodes/274-remember-me-reset-password", "published_on"=>2011-07-11 00:00:00 UTC, "guid"=>"remember-me-reset-password", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"geocoder"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#273 Geocoder", "deck"=>"If you need to work with geographic data, Geocoder is an excellent gem for converting addresses and coordinates, finding nearby locations, determining distances, and more!", "story"=>nil, "url"=>"http://railscasts.com/episodes/273-geocoder", "published_on"=>2011-07-04 00:00:00 UTC, "guid"=>"geocoder", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markdown-with-redcarpet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#272 Markdown with Redcarpet", "deck"=>"Redcarpet is an easy-to-use gem which interprets Markdown. Here I show how to customize it and add syntax highlighting through Pygments and Albino.", "story"=>nil, "url"=>"http://railscasts.com/episodes/272-markdown-with-redcarpet", "published_on"=>2011-06-27 00:00:00 UTC, "guid"=>"markdown-with-redcarpet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"resque"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#271 Resque", "deck"=>"Resque creates background jobs using Redis. It supports multiple queue and comes with an administration interface for monitoring and managing the queues.", "story"=>nil, "url"=>"http://railscasts.com/episodes/271-resque", "published_on"=>2011-06-20 00:00:00 UTC, "guid"=>"resque", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-in-rails-3-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#270 Authentication in Rails 3.1", "deck"=>"Here I show off three new features in Rails 3.1 that will help with authentication: easier HTTP Basic, SecurePassword in the database, and forcing SSL.", "story"=>nil, "url"=>"http://railscasts.com/episodes/270-authentication-in-rails-3-1", "published_on"=>2011-06-13 00:00:00 UTC, "guid"=>"authentication-in-rails-3-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"template-inheritance"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#269 Template Inheritance", "deck"=>"In Rails 3.1 the controller inheritance also applies to the view layer. Here I show how to add an application template which is shared by all views, and a lookup path for overriding templates based on the subdomain.", "story"=>nil, "url"=>"http://railscasts.com/episodes/269-template-inheritance", "published_on"=>2011-06-06 00:00:00 UTC, "guid"=>"template-inheritance", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sass-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#268 Sass Basics", "deck"=>"Sass extends CSS with variables, nesting, mixins and more. Here I show how to convert plain CSS to SCSS in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/268-sass-basics", "published_on"=>2011-05-30 00:00:00 UTC, "guid"=>"sass-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"coffeescript-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#267 CoffeeScript Basics", "deck"=>"CoffeeScript allows you to write JavaScript in a concise, elegant fashion. Here I convert JavaScript code to CoffeeScript in a Rails 3.1 app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/267-coffeescript-basics", "published_on"=>2011-05-23 00:00:00 UTC, "guid"=>"coffeescript-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-streaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#266 HTTP Streaming", "deck"=>"HTTP Streaming allows the browser to start processing the HTML response while the Rails app is still processing the rest of the request.", "story"=>nil, "url"=>"http://railscasts.com/episodes/266-http-streaming", "published_on"=>2011-05-16 00:00:00 UTC, "guid"=>"http-streaming", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-1-overview"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#265 Rails 3.1 Overview", "deck"=>"This is the first episode in a series covering Rails 3.1. Here I show how to install the beta and show some of the new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/265-rails-3-1-overview", "published_on"=>2011-05-09 00:00:00 UTC, "guid"=>"rails-3-1-overview", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"guard"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#264 Guard", "deck"=>"Guard watches files and runs a command after a file is modified. This allows you to automatically run tests in the background, restart your development server, reload the browser, and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/264-guard", "published_on"=>2011-05-02 00:00:00 UTC, "guid"=>"guard", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"client-side-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#263 Client Side Validations", "deck"=>"Showing validation errors inline as the user is filling out the form can lead to a better use experience. Learn how to do this using the Client Side Validations gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/263-client-side-validations", "published_on"=>2011-04-25 00:00:00 UTC, "guid"=>"client-side-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"trees-with-ancestry"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#262 Trees with Ancestry", "deck"=>"The Ancestry gem works like a tree but also allows us to fetch deeply nested messages in a single query. It provides a method to arrange them after fetching.", "story"=>nil, "url"=>"http://railscasts.com/episodes/262-trees-with-ancestry", "published_on"=>2011-04-18 00:00:00 UTC, "guid"=>"trees-with-ancestry", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-javascript-with-jasmine"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#261 Testing JavaScript with Jasmine", "deck"=>"Are you testing your JavaScript? Learn how to add specs using Jasmine. This episode also covers jQuery integration with jasmine-jquery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/261-testing-javascript-with-jasmine", "published_on"=>2011-04-11 00:00:00 UTC, "guid"=>"testing-javascript-with-jasmine", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"messaging-with-faye"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#260 Messaging with Faye", "deck"=>"Faye is a subscription/publishing server which makes it easy to do push notifications within a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/260-messaging-with-faye", "published_on"=>2011-04-04 00:00:00 UTC, "guid"=>"messaging-with-faye", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"decent-exposure"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#259 Decent Exposure", "deck"=>"The decent_exposure gem makes it convenient to share controller data with the view through methods instead of instance variables.", "story"=>nil, "url"=>"http://railscasts.com/episodes/259-decent-exposure", "published_on"=>2011-03-28 00:00:00 UTC, "guid"=>"decent-exposure", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"token-fields"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#258 Token Fields", "deck"=>"With the jQuery Tokeninput plugin it is easy to add an autocompleting list of entries for a many-to-many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/258-token-fields", "published_on"=>2011-03-21 00:00:00 UTC, "guid"=>"token-fields", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-specs-and-capybara"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#257 Request Specs and Capybara", "deck"=>"Request specs in RSpec are a great way to ensure the entire application stack is working properly. Here I also show how to use capybara with integrated JavaScript testing using Selenium.", "story"=>nil, "url"=>"http://railscasts.com/episodes/257-request-specs-and-capybara", "published_on"=>2011-03-14 00:00:00 UTC, "guid"=>"request-specs-and-capybara", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n-backends"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#256 I18n Backends", "deck"=>"Internationalization is easy to add in Rails, but the YAML files can be difficult to manage. In this episode I show how to use Redis for managing the translations through a web interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/256-i18n-backends", "published_on"=>2011-03-07 00:00:00 UTC, "guid"=>"i18n-backends", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"undo-with-paper-trail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#255 Undo with Paper Trail", "deck"=>"Undo and redo behavior is easy to add with a versioning gem such as Paper Trail. Learn how to add an undo link to any model's flash message.", "story"=>nil, "url"=>"http://railscasts.com/episodes/255-undo-with-paper-trail", "published_on"=>2011-02-28 00:00:00 UTC, "guid"=>"undo-with-paper-trail", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-kaminari"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#254 Pagination with Kaminari", "deck"=>"If you need pagination in Rails 3 try out Kaminari. It is a clean, flexible solution which uses scopes to flow nicely with Active Record queries. Did I mention it also works with Mongoid?", "story"=>nil, "url"=>"http://railscasts.com/episodes/254-pagination-with-kaminari", "published_on"=>2011-02-21 00:00:00 UTC, "guid"=>"pagination-with-kaminari", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"carrierwave-file-uploads"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#253 CarrierWave File Uploads", "deck"=>"CarrierWave makes it easy and clean to add file uploads to your application. It supports a variety of ORMs, frameworks and image processors.", "story"=>nil, "url"=>"http://railscasts.com/episodes/253-carrierwave-file-uploads", "published_on"=>2011-02-14 00:00:00 UTC, "guid"=>"carrierwave-file-uploads", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metrics-metrics-metrics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#252 Metrics Metrics Metrics", "deck"=>"Metric Fu, Metrical, SimpleCov, Rails Best Practices, and more are covered in this episode on metrics.", "story"=>nil, "url"=>"http://railscasts.com/episodes/252-metrics-metrics-metrics", "published_on"=>2011-02-07 00:00:00 UTC, "guid"=>"metrics-metrics-metrics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metawhere-metasearch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#251 MetaWhere & MetaSearch", "deck"=>"MetaWhere provides a way to do complex find conditions without SQL in Active Record. MetaSearch makes it easy to create search forms with many find options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/251-metawhere-metasearch", "published_on"=>2011-01-31 00:00:00 UTC, "guid"=>"metawhere-metasearch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authentication-from-scratch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#250 Authentication from Scratch", "deck"=>"Password authentication is not too complicated to make from scratch, it will also help to get a better understanding of how it works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/250-authentication-from-scratch", "published_on"=>2011-01-24 00:00:00 UTC, "guid"=>"authentication-from-scratch", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"notifications-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#249 Notifications in Rails 3", "deck"=>"Rails 3 comes with instrument support through the ActiveSupport::Notifications class. Call \"subscribe\" to listen to notifications, and \"instrument\" to send them.", "story"=>nil, "url"=>"http://railscasts.com/episodes/249-notifications-in-rails-3", "published_on"=>2011-01-17 00:00:00 UTC, "guid"=>"notifications-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#248 Offline Apps Part 2", "deck"=>"Learn how to make a site usable offline with HTML 5 localStorage. This last part of the series covers jquery-tmpl and jquery-offline.", "story"=>nil, "url"=>"http://railscasts.com/episodes/248-offline-apps-part-2", "published_on"=>2011-01-10 00:00:00 UTC, "guid"=>"offline-apps-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"offline-apps-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#247 Offline Apps Part 1", "deck"=>"Learn how to make a site usable offline through an HTML 5 cache manifest. This first part of the series covers rack-offline and problems you may run into.", "story"=>nil, "url"=>"http://railscasts.com/episodes/247-offline-apps-part-1", "published_on"=>2011-01-03 00:00:00 UTC, "guid"=>"offline-apps-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-state"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#246 AJAX History State", "deck"=>"The new pushState function in JavaScript allows us to change the full URL with AJAX. This means the back button, reloading, and bookmark support can be easily added.", "story"=>nil, "url"=>"http://railscasts.com/episodes/246-ajax-history-state", "published_on"=>2010-12-27 00:00:00 UTC, "guid"=>"ajax-history-state", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"new-gem-with-bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#245 New Gem with Bundler", "deck"=>"Creating new gems is easy with the `bundle gem` command. In this episode I will walk you through how this works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/245-new-gem-with-bundler", "published_on"=>2010-12-20 00:00:00 UTC, "guid"=>"new-gem-with-bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gravatar"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#244 Gravatar", "deck"=>"Gravatar is a service for providing user avatars. See how easy it is to use in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/244-gravatar", "published_on"=>2010-12-13 00:00:00 UTC, "guid"=>"gravatar", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beanstalkd-and-stalker"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#243 Beanstalkd and Stalker", "deck"=>"Beanstalk is a fast and easy way to queue background tasks. Stalker provides a nice wrapper interface for creating these jobs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/243-beanstalkd-and-stalker", "published_on"=>2010-12-06 00:00:00 UTC, "guid"=>"beanstalkd-and-stalker", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thor"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#242 Thor", "deck"=>"Thor is an alternative to Rake. It has better support for command line arguments and provides a way to add global scripts.", "story"=>nil, "url"=>"http://railscasts.com/episodes/242-thor", "published_on"=>2010-11-29 00:00:00 UTC, "guid"=>"thor", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-omniauth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#241 Simple OmniAuth", "deck"=>"Authentication is incredibly simple to add with just OmniAuth if you don't need username/password or multiple authentications per user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/241-simple-omniauth", "published_on"=>2010-11-22 00:00:00 UTC, "guid"=>"simple-omniauth", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"search-sort-paginate-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#240 Search, Sort, Paginate with AJAX", "deck"=>"Many administration pages have search, sorting, and pagination on the index page. See how to add all of this including AJAX.", "story"=>nil, "url"=>"http://railscasts.com/episodes/240-search-sort-paginate-with-ajax", "published_on"=>2010-11-15 00:00:00 UTC, "guid"=>"search-sort-paginate-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000fc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activerecord-relation-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#239 ActiveRecord::Relation Walkthrough", "deck"=>"The new Active Record query methods in Rails 3 might seem like magic at first. But in this episode I unravel how it works by browsing the Rails 3 source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/239-activerecord-relation-walkthrough", "published_on"=>2010-11-07 00:00:00 UTC, "guid"=>"activerecord-relation-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongoid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#238 Mongoid", "deck"=>"Mongoid is a polished, high-level Ruby gem for accessing MongoDB. Here I cover installation, adding fields, validations, associations, and keys.", "story"=>nil, "url"=>"http://railscasts.com/episodes/238-mongoid", "published_on"=>2010-11-01 00:00:00 UTC, "guid"=>"mongoid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000fe')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-attr-accessible"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#237 Dynamic attr_accessible", "deck"=>"It is important to use attr_accessible for security with mass assignment, but what if you need it to be dynamic based on user permissions? See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/237-dynamic-attr-accessible", "published_on"=>2010-10-25 00:00:00 UTC, "guid"=>"dynamic-attr-accessible", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660000ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#236 OmniAuth Part 2", "deck"=>"In this episode we continue our look at integrating OmniAuth with devise. Here I show how to set up new users with validations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/236-omniauth-part-2", "published_on"=>2010-10-13 00:00:00 UTC, "guid"=>"omniauth-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000100')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"omniauth-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#235 OmniAuth Part 1", "deck"=>"OmniAuth is an easy way to add many different authentication services to your app. In this episode we start integrating it with Devise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/235-omniauth-part-1", "published_on"=>2010-10-11 00:00:00 UTC, "guid"=>"omniauth-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000101')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#234 SimpleForm", "deck"=>"Simple Form is a convenient way to generate forms with many options to customize the generated markup.", "story"=>nil, "url"=>"http://railscasts.com/episodes/234-simple-form", "published_on"=>2010-10-04 00:00:00 UTC, "guid"=>"simple-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000102')}])
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:guid=>"engage-with-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#233 Engage with Devise", "deck"=>"Janrain Engage (aka RPX) makes it easy to support many authentication solutions through their one service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/233-engage-with-devise", "published_on"=>2010-09-27 00:00:00 UTC, "guid"=>"engage-with-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000103')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#232 Routing Walkthrough Part 2", "deck"=>"In this episode we continue our look into the Rails 3 router by exploring the Mapper class.", "story"=>nil, "url"=>"http://railscasts.com/episodes/232-routing-walkthrough-part-2", "published_on"=>2010-09-19 00:00:00 UTC, "guid"=>"routing-walkthrough-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000104')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-walkthrough"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#231 Routing Walkthrough Part 1", "deck"=>"How does routing work internally in Rails 3? In this episode I'll walk you through the Rails code that makes routing possible.", "story"=>nil, "url"=>"http://railscasts.com/episodes/231-routing-walkthrough", "published_on"=>2010-09-13 00:00:00 UTC, "guid"=>"routing-walkthrough", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000105')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"inherited-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#230 Inherited Resources", "deck"=>"Inherited Resource simplifies RESTful controllers by providing default actions which can be customized through inheritance.", "story"=>nil, "url"=>"http://railscasts.com/episodes/230-inherited-resources", "published_on"=>2010-09-06 00:00:00 UTC, "guid"=>"inherited-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000106')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polling-for-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#229 Polling for Changes", "deck"=>"If you have frequently changing data on the server side, it's helpful to automatically display this to the user as well. Here I show how to accomplish this with polling in jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/229-polling-for-changes", "published_on"=>2010-08-30 00:00:00 UTC, "guid"=>"polling-for-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000107')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-table-columns"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#228 Sortable Table Columns", "deck"=>"Here I walk you through adding the ability to sort table columns in ascending or descending order by clicking the header.", "story"=>nil, "url"=>"http://railscasts.com/episodes/228-sortable-table-columns", "published_on"=>2010-08-23 00:00:00 UTC, "guid"=>"sortable-table-columns", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000108')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#227 Upgrading to Rails 3 Part 3", "deck"=>"Here we finish up this upgrade series by removing all deprecation warnings and fixing some problems in the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/227-upgrading-to-rails-3-part-3", "published_on"=>2010-08-16 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000109')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#226 Upgrading to Rails 3 Part 2", "deck"=>"Here we continue upgrading an application to Rails 3 by getting our specs up and running and going through the rails_upgrade plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/226-upgrading-to-rails-3-part-2", "published_on"=>2010-08-09 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"upgrading-to-rails-3-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#225 Upgrading to Rails 3 Part 1", "deck"=>"In the first part of this series on upgrading a Rails 2 application to Rails 3, we'll start off by setting up Rails 3.0 Release Candidate in a clean environment. The rails_upgrade plugin will then help us determine what needs upgrading.", "story"=>nil, "url"=>"http://railscasts.com/episodes/225-upgrading-to-rails-3-part-1", "published_on"=>2010-08-02 00:00:00 UTC, "guid"=>"upgrading-to-rails-3-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"controllers-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#224 Controllers in Rails 3", "deck"=>"Embedded flash notices, permanent cookies, and the details of respond_with are in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/224-controllers-in-rails-3", "published_on"=>2010-07-26 00:00:00 UTC, "guid"=>"controllers-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"charts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#223 Charts", "deck"=>"There are a number of libraries to help create graphs. Here I show how to integrate Highcharts into a Rails app.", "story"=>nil, "url"=>"http://railscasts.com/episodes/223-charts", "published_on"=>2010-07-19 00:00:00 UTC, "guid"=>"charts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#222 Rack in Rails 3", "deck"=>"The router in Rails 3 is fully compatible with Rack. Learn how to embed Sinatra into an app, handle redirects, and improve on Rails Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/222-rack-in-rails-3", "published_on"=>2010-07-12 00:00:00 UTC, "guid"=>"rack-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#221 Subdomains in Rails 3", "deck"=>"It is now possible to add subdomains to Rails 3 without the use of additional plugins. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/221-subdomains-in-rails-3", "published_on"=>2010-07-05 00:00:00 UTC, "guid"=>"subdomains-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600010f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfkit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#220 PDFKit", "deck"=>"Generating PDFs in plain Ruby can be a lot of work. Instead, consider generating PDFs from HTML using PDFKit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/220-pdfkit", "published_on"=>2010-06-28 00:00:00 UTC, "guid"=>"pdfkit", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000110')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#219 Active Model", "deck"=>"In Rails 3 the non-database functionality of Active Record is extracted out into Active Model. This allows you to cleanly add validations and other features to tableless models.", "story"=>nil, "url"=>"http://railscasts.com/episodes/219-active-model", "published_on"=>2010-06-21 00:00:00 UTC, "guid"=>"active-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000111')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#218 Making Generators in Rails 3", "deck"=>"Generators in Rails 3 have been rewritten to use Thor which means the code used to create a generator is quite different. Here you will learn the new way to make generators in Rails 3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/218-making-generators-in-rails-3", "published_on"=>2010-06-14 00:00:00 UTC, "guid"=>"making-generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000112')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multistep-forms"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#217 Multistep Forms", "deck"=>"See how to create a multi-step (wizard) form from scratch in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/217-multistep-forms", "published_on"=>2010-06-07 00:00:00 UTC, "guid"=>"multistep-forms", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000113')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generators-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#216 Generators in Rails 3", "deck"=>"Generators in Rails 3 have been completely rewritten to be more modular. This allows you to customize any generator to fit your specific preferences.", "story"=>nil, "url"=>"http://railscasts.com/episodes/216-generators-in-rails-3", "published_on"=>2010-05-31 00:00:00 UTC, "guid"=>"generators-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000114')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#215 Advanced Queries in Rails 3", "deck"=>"Learn some advanced techniques regarding named scopes and get an introduction to Arel in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/215-advanced-queries-in-rails-3", "published_on"=>2010-05-24 00:00:00 UTC, "guid"=>"advanced-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000115')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"a-b-testing-with-a-bingo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#214 A/B Testing with A/Bingo", "deck"=>"A/B Testing (or Split Testing) is a way to experiment with variations in an application to see the most effective option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/214-a-b-testing-with-a-bingo", "published_on"=>2010-05-17 00:00:00 UTC, "guid"=>"a-b-testing-with-a-bingo", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000116')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"calendars"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#213 Calendars", "deck"=>"If dates play an important role in your application, consider adding a date picker or calendar view as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/213-calendars", "published_on"=>2010-05-10 00:00:00 UTC, "guid"=>"calendars", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000117')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-dynamic-delegator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#212 Refactoring & Dynamic Delegator", "deck"=>"Learn how to refactor a set of conditional Active Record queries using a Dynamic Delegator.", "story"=>nil, "url"=>"http://railscasts.com/episodes/212-refactoring-dynamic-delegator", "published_on"=>2010-05-03 00:00:00 UTC, "guid"=>"refactoring-dynamic-delegator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000118')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"validations-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#211 Validations in Rails 3", "deck"=>"Rails 3 offers several new additions to validations. Here learn how to make a custom error_messages partial, reflect on validations, and clean up complex validations in a model.", "story"=>nil, "url"=>"http://railscasts.com/episodes/211-validations-in-rails-3", "published_on"=>2010-04-26 00:00:00 UTC, "guid"=>"validations-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000119')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customizing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#210 Customizing Devise", "deck"=>"Here we dive deeper into Devise by customizing how the views, routing, validations, and authentication works.", "story"=>nil, "url"=>"http://railscasts.com/episodes/210-customizing-devise", "published_on"=>2010-04-19 00:00:00 UTC, "guid"=>"customizing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"introducing-devise"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#209 Introducing Devise", "deck"=>"Devise is a full-featured authentication solution which handles all of the controller logic and form views for you. Learn how to set it up in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/209-introducing-devise", "published_on"=>2010-04-12 00:00:00 UTC, "guid"=>"introducing-devise", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"erb-blocks-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#208 ERB Blocks in Rails 3", "deck"=>"Blocks in ERB templates are handled differently in Rails 3.0 Beta 2. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/208-erb-blocks-in-rails-3", "published_on"=>2010-04-05 00:00:00 UTC, "guid"=>"erb-blocks-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"syntax-highlighting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#207 Syntax Highlighting", "deck"=>"Here I talk about three popular choices for syntax highlighting in Rails: CodeRay, Ultraviolet and Pygments.", "story"=>nil, "url"=>"http://railscasts.com/episodes/207-syntax-highlighting", "published_on"=>2010-03-29 00:00:00 UTC, "guid"=>"syntax-highlighting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-mailer-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#206 Action Mailer in Rails 3", "deck"=>"Action Mailer has been rewritten for Rails 3 providing a much cleaner API with its use of the Mail gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/206-action-mailer-in-rails-3", "published_on"=>2010-03-22 00:00:00 UTC, "guid"=>"action-mailer-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"unobtrusive-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#205 Unobtrusive Javascript", "deck"=>"Keep JavaScript out of your HTML content with unobtrusive JavaScript. Here I show how Rails 3 works with this best practice.", "story"=>nil, "url"=>"http://railscasts.com/episodes/205-unobtrusive-javascript", "published_on"=>2010-03-15 00:00:00 UTC, "guid"=>"unobtrusive-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600011f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"xss-protection-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#204 XSS Protection in Rails 3", "deck"=>"It is easy to be vulnerable to cross site scripting attacks in earlier versions of Rails, but Rails 3 solves this by automatically escaping unsafe input.", "story"=>nil, "url"=>"http://railscasts.com/episodes/204-xss-protection-in-rails-3", "published_on"=>2010-03-08 00:00:00 UTC, "guid"=>"xss-protection-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000120')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"routing-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#203 Routing in Rails 3", "deck"=>"Rails 3 sports a new routing interface. In this episode I show how to translate the old interface into the new one and show off a few new features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/203-routing-in-rails-3", "published_on"=>2010-03-01 00:00:00 UTC, "guid"=>"routing-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000121')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-record-queries-in-rails-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#202 Active Record Queries in Rails 3", "deck"=>"Rails 3 introduces a new query interface for performing finds in Active Record. See how it works along with the changes in named scopes.", "story"=>nil, "url"=>"http://railscasts.com/episodes/202-active-record-queries-in-rails-3", "published_on"=>2010-02-22 00:00:00 UTC, "guid"=>"active-record-queries-in-rails-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000122')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"bundler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#201 Bundler", "deck"=>"Bundler is the way to manage gem dependencies in Rails 3.0. Learn how to install gems and lock them down in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/201-bundler", "published_on"=>2010-02-15 00:00:00 UTC, "guid"=>"bundler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000123')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-3-beta-and-rvm"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#200 Rails 3 Beta and RVM", "deck"=>"Get started with Rails 3.0 Beta and install Ruby 1.9.1 using RVM: Ruby Version Manager. Stay tuned to the end for a challenge on giving back to open source.", "story"=>nil, "url"=>"http://railscasts.com/episodes/200-rails-3-beta-and-rvm", "published_on"=>2010-02-08 00:00:00 UTC, "guid"=>"rails-3-beta-and-rvm", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000124')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mobile-devices"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#199 Mobile Devices", "deck"=>"Change the look and behavior of a Rails app on mobile devices. Also use jQTouch to build a native-looking interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/199-mobile-devices", "published_on"=>2010-02-01 00:00:00 UTC, "guid"=>"mobile-devices", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000125')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple-individually"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#198 Edit Multiple Individually", "deck"=>"Use checkboxes to edit multiple records in one form, where each one has an individual set of form fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/198-edit-multiple-individually", "published_on"=>2010-01-25 00:00:00 UTC, "guid"=>"edit-multiple-individually", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000126')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#197 Nested Model Form Part 2", "deck"=>"Add and remove nested model fields dynamically through JavaScript using either Prototype or jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/197-nested-model-form-part-2", "published_on"=>2010-01-18 00:00:00 UTC, "guid"=>"nested-model-form-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000127')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-model-form-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#196 Nested Model Form Part 1", "deck"=>"Handling multiple models in a single form is much easier with the accepts_nested_attributes_for method. See how to use this method to handle nested model fields.", "story"=>nil, "url"=>"http://railscasts.com/episodes/196-nested-model-form-part-1", "published_on"=>2010-01-11 00:00:00 UTC, "guid"=>"nested-model-form-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000128')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"my-favorite-web-apps-in-2009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#195 My Favorite Web Apps in 2009", "deck"=>"Here I show several of my favorite web applications which I found most helpful as a Ruby developer over the past year.", "story"=>nil, "url"=>"http://railscasts.com/episodes/195-my-favorite-web-apps-in-2009", "published_on"=>2010-01-04 00:00:00 UTC, "guid"=>"my-favorite-web-apps-in-2009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000129')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mongodb-and-mongomapper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#194 MongoDB and MongoMapper", "deck"=>"MongoDB is a document based database engine. Learn how to access it through MongoMapper in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/194-mongodb-and-mongomapper", "published_on"=>2009-12-28 00:00:00 UTC, "guid"=>"mongodb-and-mongomapper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tableless-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#193 Tableless Model", "deck"=>"If you want to create a model without a database backend, you simply need to define a couple methods in the model like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/193-tableless-model", "published_on"=>2009-12-21 00:00:00 UTC, "guid"=>"tableless-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authorization-with-cancan"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#192 Authorization with CanCan", "deck"=>"CanCan is a simple authorization plugin that offers a lot of flexibility. See how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/192-authorization-with-cancan", "published_on"=>2009-12-14 00:00:00 UTC, "guid"=>"authorization-with-cancan", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"mechanize"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#191 Mechanize", "deck"=>"Mechanize extends the power of Nokogiri allowing you to interact with multiple pages on the site: click links, submit forms, etc.", "story"=>nil, "url"=>"http://railscasts.com/episodes/191-mechanize", "published_on"=>2009-12-07 00:00:00 UTC, "guid"=>"mechanize", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-nokogiri"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#190 Screen Scraping with Nokogiri", "deck"=>"Screen scraping is easy with Nokogiri and SelectorGadget.", "story"=>nil, "url"=>"http://railscasts.com/episodes/190-screen-scraping-with-nokogiri", "published_on"=>2009-11-30 00:00:00 UTC, "guid"=>"screen-scraping-with-nokogiri", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"embedded-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#189 Embedded Association", "deck"=>"Learn how to set up a one-to-many or many-to-many association which is entirely embedded into a single column through a string or bitmask.", "story"=>nil, "url"=>"http://railscasts.com/episodes/189-embedded-association", "published_on"=>2009-11-23 00:00:00 UTC, "guid"=>"embedded-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600012f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"declarative-authorization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#188 Declarative Authorization", "deck"=>"Declarative authorization provides an advanced and powerful solution for role based authorization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/188-declarative-authorization", "published_on"=>2009-11-16 00:00:00 UTC, "guid"=>"declarative-authorization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000130')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#187 Testing Exceptions", "deck"=>"Sometimes bad code slips into production and triggers a 500 error. Learn how to be notified of this and resolve it through integration tests.", "story"=>nil, "url"=>"http://railscasts.com/episodes/187-testing-exceptions", "published_on"=>2009-11-09 00:00:00 UTC, "guid"=>"testing-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000131')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pickle-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#186 Pickle with Cucumber", "deck"=>"Pickle adds many convenient Cucumber steps for generating models. Also learn about table diffs in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/186-pickle-with-cucumber", "published_on"=>2009-11-02 00:00:00 UTC, "guid"=>"pickle-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000132')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#185 Formtastic Part 2", "deck"=>"Learn about some of the more advanced functionality of Formtastic including handling many-to-many associations, required fields, and styling.", "story"=>nil, "url"=>"http://railscasts.com/episodes/185-formtastic-part-2", "published_on"=>2009-10-26 00:00:00 UTC, "guid"=>"formtastic-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000133')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formtastic-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#184 Formtastic Part 1", "deck"=>"Formtastic is a concise way to generate form views. In this episode (part 1 of 2) I show how to generate both a simple form and a more complex one which is customized with options.", "story"=>nil, "url"=>"http://railscasts.com/episodes/184-formtastic-part-1", "published_on"=>2009-10-19 00:00:00 UTC, "guid"=>"formtastic-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000134')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gemcutter-jeweler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#183 Gemcutter & Jeweler", "deck"=>"Gemcutter is a new service for hosting RubyGems, and Jeweler provides an automated way to release versions of a gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/183-gemcutter-jeweler", "published_on"=>2009-10-12 00:00:00 UTC, "guid"=>"gemcutter-jeweler", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000135')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cropping-images"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#182 Cropping Images", "deck"=>"Present a slick user interface for cropping image attachments using Jcrop and Paperclip.", "story"=>nil, "url"=>"http://railscasts.com/episodes/182-cropping-images", "published_on"=>2009-10-05 00:00:00 UTC, "guid"=>"cropping-images", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000136')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"include-vs-joins"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#181 Include vs Joins", "deck"=>"The :include and :joins options for the find method can be a little confusing because they are so similar. In this episode I show specifically when to use which option.", "story"=>nil, "url"=>"http://railscasts.com/episodes/181-include-vs-joins", "published_on"=>2009-09-28 00:00:00 UTC, "guid"=>"include-vs-joins", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000137')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"finding-unused-css"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#180 Finding Unused CSS", "deck"=>"Over time a CSS file can become large and filled with unused selectors. In this episode I show how to use the Deadweight gem to determine which CSS selects you can remove.", "story"=>nil, "url"=>"http://railscasts.com/episodes/180-finding-unused-css", "published_on"=>2009-09-21 00:00:00 UTC, "guid"=>"finding-unused-css", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000138')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seed-data"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#179 Seed Data", "deck"=>"Rails 2.3.4 includes a conventional way to add seed data to your application - no more including it in the migration files.", "story"=>nil, "url"=>"http://railscasts.com/episodes/179-seed-data", "published_on"=>2009-09-14 00:00:00 UTC, "guid"=>"seed-data", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000139')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"seven-security-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#178 7 Security Tips", "deck"=>"Security is important! Here I show seven different security flaws which are common to Rails applications ranging from mass assignment to CSRF protection.", "story"=>nil, "url"=>"http://railscasts.com/episodes/178-seven-security-tips", "published_on"=>2009-09-07 00:00:00 UTC, "guid"=>"seven-security-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-versioning"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#177 Model Versioning", "deck"=>"If you need to keep track of a model's history of changes and switch between versions, consider using the vestal_versions gem like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/177-model-versioning", "published_on"=>2009-08-31 00:00:00 UTC, "guid"=>"model-versioning", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"searchlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#176 Searchlogic", "deck"=>"Searchlogic makes searching models easier than ever with its assortment of named scopes. In this episode I show you how to create simple and advanced searches.", "story"=>nil, "url"=>"http://railscasts.com/episodes/176-searchlogic", "published_on"=>2009-08-24 00:00:00 UTC, "guid"=>"searchlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-history-and-bookmarks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#175 AJAX History and Bookmarks", "deck"=>"Browser page history and bookmarks do not usually work with AJAX requests, but in this episode I show you how to remedy this problem using a simple jQuery plugin.", "story"=>nil, "url"=>"http://railscasts.com/episodes/175-ajax-history-and-bookmarks", "published_on"=>2009-08-17 00:00:00 UTC, "guid"=>"ajax-history-and-bookmarks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pagination-with-ajax"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#174 Pagination with AJAX", "deck"=>"Learn an easy, unobtrusive way to add AJAX functionality to an existing set of pagination links using jQuery.", "story"=>nil, "url"=>"http://railscasts.com/episodes/174-pagination-with-ajax", "published_on"=>2009-08-10 00:00:00 UTC, "guid"=>"pagination-with-ajax", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"screen-scraping-with-scrapi"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#173 Screen Scraping with ScrAPI", "deck"=>"Screen scraping is not pretty, but sometimes it's your only option to extract content from an external site. In this episode I show you how to fetch product prices using ScrAPI.", "story"=>nil, "url"=>"http://railscasts.com/episodes/173-screen-scraping-with-scrapi", "published_on"=>2009-08-03 00:00:00 UTC, "guid"=>"screen-scraping-with-scrapi", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600013f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"touch-and-cache"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#172 Touch and Cache", "deck"=>"Rails 2.3.3 brings us a new feature called \"touch\". See how to use this to auto-expire associated caches in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/172-touch-and-cache", "published_on"=>2009-07-27 00:00:00 UTC, "guid"=>"touch-and-cache", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000140')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"delayed-job"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#171 Delayed Job", "deck"=>"Is there a long running task which should be handled in the background? One of the best ways is using the delayed_job plugin like I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/171-delayed-job", "published_on"=>2009-07-20 00:00:00 UTC, "guid"=>"delayed-job", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000141')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-with-authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#170 OpenID with Authlogic", "deck"=>"Learn how to apply OpenID to an existing Authlogic setup as I show in this episode. This builds upon the app from episode 160.", "story"=>nil, "url"=>"http://railscasts.com/episodes/170-openid-with-authlogic", "published_on"=>2009-07-13 00:00:00 UTC, "guid"=>"openid-with-authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000142')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#169 Dynamic Page Caching", "deck"=>"Use JavaScript to allow dynamic content in a page cache. In this episode I show you how to insert the user-specific content into a page through JavaScript.", "story"=>nil, "url"=>"http://railscasts.com/episodes/169-dynamic-page-caching", "published_on"=>2009-07-06 00:00:00 UTC, "guid"=>"dynamic-page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000143')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"feed-parsing"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#168 Feed Parsing", "deck"=>"Learn two different techniques for parsing an RSS feed using Feedzirra in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/168-feed-parsing", "published_on"=>2009-06-29 00:00:00 UTC, "guid"=>"feed-parsing", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000144')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#167 More on Virtual Attributes", "deck"=>"Use a virtual attribute to implement a simple tagging feature. In this episode I show you how to assign virtual attributes through a callback instead of a setter method.", "story"=>nil, "url"=>"http://railscasts.com/episodes/167-more-on-virtual-attributes", "published_on"=>2009-06-22 00:00:00 UTC, "guid"=>"more-on-virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000145')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"metric-fu"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#166 Metric Fu", "deck"=>"Metric Fu is a compilation of several tools to help find areas of code that could be improved. In this episode I show you how to setup this tool on the railscasts.com source code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/166-metric-fu", "published_on"=>2009-06-15 00:00:00 UTC, "guid"=>"metric-fu", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000146')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"edit-multiple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#165 Edit Multiple", "deck"=>"Use checkboxes to select multiple records and edit them all in one form as shown in this episode. With virtual attributes you can even edit values relatively!", "story"=>nil, "url"=>"http://railscasts.com/episodes/165-edit-multiple", "published_on"=>2009-06-08 00:00:00 UTC, "guid"=>"edit-multiple", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000147')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cron-in-ruby"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#164 Cron in Ruby", "deck"=>"Cron is great for handling recurring tasks, but it is an external dependency with a crazy syntax. In this episode I show you how to use Whenever to create cron jobs with Ruby.", "story"=>nil, "url"=>"http://railscasts.com/episodes/164-cron-in-ruby", "published_on"=>2009-06-01 00:00:00 UTC, "guid"=>"cron-in-ruby", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000148')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"self-referential-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#163 Self-Referential Association", "deck"=>"Creating a social networking site often requires a self-referential association on the User model to define friends/followers. In this episode I show how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/163-self-referential-association", "published_on"=>2009-05-25 00:00:00 UTC, "guid"=>"self-referential-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000149')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tree-based-navigation"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#162 Tree Based Navigation", "deck"=>"The acts_as_tree plugin provides many methods for handling a tree based association. In this episode I show how to build a navigation system with tabs, subpages, and breadcrumbs.", "story"=>nil, "url"=>"http://railscasts.com/episodes/162-tree-based-navigation", "published_on"=>2009-05-18 00:00:00 UTC, "guid"=>"tree-based-navigation", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"three-profiling-tools"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#161 Three Profiling Tools", "deck"=>"Ever want to know what Rails is doing under the hood during a request? In this episode I show three different profiling tools: New Relic RPM, FiveRuns TuneUp, and Rack::Bug.", "story"=>nil, "url"=>"http://railscasts.com/episodes/161-three-profiling-tools", "published_on"=>2009-05-11 00:00:00 UTC, "guid"=>"three-profiling-tools", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"authlogic"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#160 Authlogic", "deck"=>"Authentication can get very complex. In this episode I show how Authlogic can handle this complexity while you stay in control of how it is presented to the user.", "story"=>nil, "url"=>"http://railscasts.com/episodes/160-authlogic", "published_on"=>2009-05-04 00:00:00 UTC, "guid"=>"authlogic", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#159 More on Cucumber", "deck"=>"There is a lot more to Cucumber than I showed in an earlier episode. See how to refactor complex scenarios in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/159-more-on-cucumber", "published_on"=>2009-04-27 00:00:00 UTC, "guid"=>"more-on-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"factories-not-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#158 Factories not Fixtures", "deck"=>"Fixtures are external dependencies which can make tests brittle and difficult to read. In this episode I show a better alternative using factories to generate the needed records.", "story"=>nil, "url"=>"http://railscasts.com/episodes/158-factories-not-fixtures", "published_on"=>2009-04-20 00:00:00 UTC, "guid"=>"factories-not-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rspec-matchers-macros"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#157 RSpec Matchers & Macros", "deck"=>"You can improve the readability and remove duplication in RSpec by adding matchers and macros. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/157-rspec-matchers-macros", "published_on"=>2009-04-13 00:00:00 UTC, "guid"=>"rspec-matchers-macros", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600014f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"webrat"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#156 Webrat", "deck"=>"If you prefer writing integration tests in ruby instead of Cucumber's plain english, consider interacting with Webrat directly as I show in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/156-webrat", "published_on"=>2009-04-06 00:00:00 UTC, "guid"=>"webrat", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000150')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beginning-with-cucumber"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#155 Beginning with Cucumber", "deck"=>"Cucumber is a high-level testing framework. In this episode we will create a new Rails application from scratch using behavior driven development.", "story"=>nil, "url"=>"http://railscasts.com/episodes/155-beginning-with-cucumber", "published_on"=>2009-03-30 00:00:00 UTC, "guid"=>"beginning-with-cucumber", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000151')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"polymorphic-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#154 Polymorphic Association", "deck"=>"Polymorphic associations can be perplexing. In this episode I show you how to set it up in Active Record and then move to the controller and view layer.", "story"=>nil, "url"=>"http://railscasts.com/episodes/154-polymorphic-association", "published_on"=>2009-03-23 00:00:00 UTC, "guid"=>"polymorphic-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000152')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pdfs-with-prawn"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#153 PDFs with Prawn", "deck"=>"Prawn is an excellent Ruby library for generating PDF documents. Learn how to use it along with the Prawnto plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/153-pdfs-with-prawn", "published_on"=>2009-03-16 00:00:00 UTC, "guid"=>"pdfs-with-prawn", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000153')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-3-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#152 Rails 2.3 Extras", "deck"=>"This episode finishes up this series on Rails 2.3. Here you will learn about several smaller additions in 2.3.", "story"=>nil, "url"=>"http://railscasts.com/episodes/152-rails-2-3-extras", "published_on"=>2009-03-09 00:00:00 UTC, "guid"=>"rails-2-3-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000154')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rack-middleware"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#151 Rack Middleware", "deck"=>"Rack middleware is a way to filter a request and response coming into your application. In this episode I show how to modify the response body using middleware.", "story"=>nil, "url"=>"http://railscasts.com/episodes/151-rack-middleware", "published_on"=>2009-03-02 00:00:00 UTC, "guid"=>"rack-middleware", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000155')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-metal"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#150 Rails Metal", "deck"=>"Rails Metal is a way to bypass the standard Rails request process for a performance boost. In this episode you will learn how to shave off a few milliseconds using Metal.", "story"=>nil, "url"=>"http://railscasts.com/episodes/150-rails-metal", "published_on"=>2009-02-23 00:00:00 UTC, "guid"=>"rails-metal", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000156')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-engines"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#149 Rails Engines", "deck"=>"Rails 2.3 brings us much of the same functionality as the Rails Engines plugin. Learn how to embed one application into another in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/149-rails-engines", "published_on"=>2009-02-16 00:00:00 UTC, "guid"=>"rails-engines", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000157')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"app-templates-in-rails-2-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#148 App Templates in Rails 2.3", "deck"=>"In Rails 2.3 you can provide a template when generating a new Rails application. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/148-app-templates-in-rails-2-3", "published_on"=>2009-02-09 00:00:00 UTC, "guid"=>"app-templates-in-rails-2-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000158')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sortable-lists"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#147 Sortable Lists", "deck"=>"Creating drag & drop sortable lists is fairly easy using Prototype and the built in helper methods. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/147-sortable-lists", "published_on"=>2009-02-02 00:00:00 UTC, "guid"=>"sortable-lists", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000159')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-express-checkout"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#146 PayPal Express Checkout", "deck"=>"PayPal Express Checkout is easy to add to an existing ordering system. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/146-paypal-express-checkout", "published_on"=>2009-01-26 00:00:00 UTC, "guid"=>"paypal-express-checkout", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"integrating-active-merchant"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#145 Integrating Active Merchant", "deck"=>"In this episode I show how to add Active Merchant's functionality to a Rails application to make a fully-functional checkout process.", "story"=>nil, "url"=>"http://railscasts.com/episodes/145-integrating-active-merchant", "published_on"=>2009-01-19 00:00:00 UTC, "guid"=>"integrating-active-merchant", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"active-merchant-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#144 Active Merchant Basics", "deck"=>"Active Merchant is a great library for handling credit card transactions. In this episode I will show you the basics of using it to communicate with PayPal's gateway.", "story"=>nil, "url"=>"http://railscasts.com/episodes/144-active-merchant-basics", "published_on"=>2009-01-12 00:00:00 UTC, "guid"=>"active-merchant-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-security"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#143 PayPal Security", "deck"=>"This episode shows how to encrypt the variables passed to PayPal and verify the authenticity of the payment notifications (IPN).\n", "story"=>nil, "url"=>"http://railscasts.com/episodes/143-paypal-security", "published_on"=>2009-01-05 00:00:00 UTC, "guid"=>"paypal-security", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#142 PayPal Notifications", "deck"=>"PayPal's IPN (Instant Payment Notification) service allows your app to get confirmation when an order is processed. In this episode I use IPN to mark a cart as purchased.", "story"=>nil, "url"=>"http://railscasts.com/episodes/142-paypal-notifications", "published_on"=>2008-12-29 00:00:00 UTC, "guid"=>"paypal-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paypal-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#141 PayPal Basics", "deck"=>"This episode is the first in a series on handling the checkout process for orders. Here we show how to complete purchases through PayPal's Website Payments Standard service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/141-paypal-basics", "published_on"=>2008-12-22 00:00:00 UTC, "guid"=>"paypal-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600015f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rails-2-2-extras"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#140 Rails 2.2 Extras", "deck"=>"This episode finishes up the Rails 2.2 series by showing a few miscellaneous additions that I find useful.", "story"=>nil, "url"=>"http://railscasts.com/episodes/140-rails-2-2-extras", "published_on"=>2008-12-15 00:00:00 UTC, "guid"=>"rails-2-2-extras", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000160')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"nested-resources"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#139 Nested Resources", "deck"=>"In this episode I show how to nest resources through routing and go into some new additions in Rails 2.2.", "story"=>nil, "url"=>"http://railscasts.com/episodes/139-nested-resources", "published_on"=>2008-12-08 00:00:00 UTC, "guid"=>"nested-resources", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000161')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"i18n"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#138 I18n", "deck"=>"Internationalization is one of the biggest additions in Rails 2.2. See how the basics work in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/138-i18n", "published_on"=>2008-12-01 00:00:00 UTC, "guid"=>"i18n", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000162')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"memoization"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#137 Memoization", "deck"=>"Rails 2.2 is out! In this episode I show how to upgrade Rails and then demonstrate one of the new additions: Memoization.", "story"=>nil, "url"=>"http://railscasts.com/episodes/137-memoization", "published_on"=>2008-11-24 00:00:00 UTC, "guid"=>"memoization", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000163')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"jquery"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#136 jQuery", "deck"=>"How do you use jQuery with Rails? In this episode I redo episode #43 using jQuery instead of Prototype/RJS.", "story"=>nil, "url"=>"http://railscasts.com/episodes/136-jquery", "published_on"=>2008-11-17 00:00:00 UTC, "guid"=>"jquery", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000164')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-gem"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#135 Making a Gem", "deck"=>"Want to create a Ruby Gem instead of a Rails plugin? In this episode I will walk you through creating a gem to extend Rails.", "story"=>nil, "url"=>"http://railscasts.com/episodes/135-making-a-gem", "published_on"=>2008-11-10 00:00:00 UTC, "guid"=>"making-a-gem", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000165')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"paperclip"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#134 Paperclip", "deck"=>"Need to add image attachments to a model? See how with paperclip in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/134-paperclip", "published_on"=>2008-11-03 00:00:00 UTC, "guid"=>"paperclip", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000166')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"capistrano-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#133 Capistrano Tasks", "deck"=>"Do you know how to make Capistrano tasks? See how to change default deployment behavior with custom tasks in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/133-capistrano-tasks", "published_on"=>2008-10-27 00:00:00 UTC, "guid"=>"capistrano-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000167')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"helpers-outside-views"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#132 Helpers Outside Views", "deck"=>"Have you ever wanted to access helper methods outside of the view layer? In this episode I show you a couple ways to do just that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/132-helpers-outside-views", "published_on"=>2008-10-20 00:00:00 UTC, "guid"=>"helpers-outside-views", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000168')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"going-back"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#131 Going Back", "deck"=>"This episode demonstrates a couple ways to redirect the user back to a previous page. Applying this to your site can help minimize the user's need to press the back button.", "story"=>nil, "url"=>"http://railscasts.com/episodes/131-going-back", "published_on"=>2008-10-12 00:00:00 UTC, "guid"=>"going-back", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000169')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"monitoring-with-god"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#130 Monitoring with God", "deck"=>"Need to ensure your background processes stay up and running and don't use too many resources? Check out the god gem as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/130-monitoring-with-god", "published_on"=>2008-10-05 00:00:00 UTC, "guid"=>"monitoring-with-god", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-daemon"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#129 Custom Daemon", "deck"=>"Creating a custom daemon to handle background tasks is surprisingly simple. In this episode I will make a daemon to handle dynamically scheduled tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/129-custom-daemon", "published_on"=>2008-09-29 00:00:00 UTC, "guid"=>"custom-daemon", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"starling-and-workling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#128 Starling and Workling", "deck"=>"Need to run a task frequently in the background? Starling and Workling is a killer combination for doing just that. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/128-starling-and-workling", "published_on"=>2008-09-22 00:00:00 UTC, "guid"=>"starling-and-workling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rake-in-background"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#127 Rake in Background", "deck"=>"In need of a background process? You may be able to accomplish this with a simple Rake task. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/127-rake-in-background", "published_on"=>2008-09-15 00:00:00 UTC, "guid"=>"rake-in-background", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"populating-a-database"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#126 Populating a Database", "deck"=>"Have you ever wanted to fill up a database with a lot of test data? See how to do that in this episode using the populator and faker gems.", "story"=>nil, "url"=>"http://railscasts.com/episodes/126-populating-a-database", "published_on"=>2008-09-08 00:00:00 UTC, "guid"=>"populating-a-database", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#125 Dynamic Layouts", "deck"=>"Discover how to dynamically change the layout using content in the database. Check out this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/125-dynamic-layouts", "published_on"=>2008-09-01 00:00:00 UTC, "guid"=>"dynamic-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600016f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"beta-invitations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#124 Beta Invitations", "deck"=>"You know those invitation systems where a given user can invite a number of other people to join? That's what I show you how to make in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/124-beta-invitations", "published_on"=>2008-08-25 00:00:00 UTC, "guid"=>"beta-invitations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000170')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subdomains"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#123 Subdomains", "deck"=>"Learn how to unleash the full potential of subdomains with the subdomain-fu Rails plugin in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/123-subdomains", "published_on"=>2008-08-18 00:00:00 UTC, "guid"=>"subdomains", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000171')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"passenger-in-development"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#122 Passenger in Development", "deck"=>"Tired of juggling multiple Rails apps around with script/server? See how to set up Passenger in development so each one has its own local domain name.", "story"=>nil, "url"=>"http://railscasts.com/episodes/122-passenger-in-development", "published_on"=>2008-08-11 00:00:00 UTC, "guid"=>"passenger-in-development", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000172')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"non-active-record-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#121 Non Active Record Model", "deck"=>"This episode will show you how to make a model which isn't based on Active Record. You may want to do this if a resource isn't backed by the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/121-non-active-record-model", "published_on"=>2008-08-04 00:00:00 UTC, "guid"=>"non-active-record-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000173')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"thinking-sphinx"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#120 Thinking Sphinx", "deck"=>"If you need a full text search engine, Thinking Sphinx is a great solution. See why in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/120-thinking-sphinx", "published_on"=>2008-07-28 00:00:00 UTC, "guid"=>"thinking-sphinx", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000174')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"session-based-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#119 Session Based Model", "deck"=>"If you have a lot of logic associated with the data inside a session, you'll need some central location to put this logic. See how to create a session based model in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/119-session-based-model", "published_on"=>2008-07-21 00:00:00 UTC, "guid"=>"session-based-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000175')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"liquid"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#118 Liquid", "deck"=>"Liquid is a safe way to provide a powerful template language to the site's users. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/118-liquid", "published_on"=>2008-07-14 00:00:00 UTC, "guid"=>"liquid", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000176')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"semi-static-pages"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#117 Semi-Static Pages", "deck"=>"Static pages can sometimes be a little awkward to add to a Rails app. See a couple different solutions to this problem in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/117-semi-static-pages", "published_on"=>2008-07-07 00:00:00 UTC, "guid"=>"semi-static-pages", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000177')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"selenium"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#116 Selenium", "deck"=>"Selenium is a great way to test your app automatically through a browser. See how it works in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/116-selenium", "published_on"=>2008-06-30 00:00:00 UTC, "guid"=>"selenium", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000178')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#115 Caching in Rails 2.1", "deck"=>"Rails 2.1 brings some new caching features which makes it very easy to cache any values including models. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/115-caching-in-rails-2-1", "published_on"=>2008-06-23 00:00:00 UTC, "guid"=>"caching-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000179')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"endless-page"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#114 Endless Page", "deck"=>"Ever wondered how some sites seem to have endless scrolling page with no pagination? Find out how easy it is to do this in Rails in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/114-endless-page", "published_on"=>2008-06-16 00:00:00 UTC, "guid"=>"endless-page", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails-with-git"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#113 Contributing to Rails with Git", "deck"=>"If you want Rails to behave a certain way, try changing it and submitting a patch. This episode will show how to do exactly this using Git.", "story"=>nil, "url"=>"http://railscasts.com/episodes/113-contributing-to-rails-with-git", "published_on"=>2008-06-09 00:00:00 UTC, "guid"=>"contributing-to-rails-with-git", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"anonymous-scopes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#112 Anonymous Scopes", "deck"=>"The scoped method allows you to generate named scopes on the fly. In this episode I show how to use anonymous scopes to improve the conditional logic which was used in the previous episode on advanced search form.", "story"=>nil, "url"=>"http://railscasts.com/episodes/112-anonymous-scopes", "published_on"=>2008-06-02 00:00:00 UTC, "guid"=>"anonymous-scopes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"advanced-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#111 Advanced Search Form", "deck"=>"If you need to create an advanced search with a lot of fields, it may not be ideal to use a GET request as I showed in episode 37. In this episode I will show you how to handle this by creating a Search resource.", "story"=>nil, "url"=>"http://railscasts.com/episodes/111-advanced-search-form", "published_on"=>2008-05-26 00:00:00 UTC, "guid"=>"advanced-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gem-dependencies"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#110 Gem Dependencies", "deck"=>"In Rails 2.1 we now have the ability to set gem dependencies. Now it's easier than ever to specify which ruby gems our rails app relies on.", "story"=>nil, "url"=>"http://railscasts.com/episodes/110-gem-dependencies", "published_on"=>2008-05-23 00:00:00 UTC, "guid"=>"gem-dependencies", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"tracking-attribute-changes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#109 Tracking Attribute Changes", "deck"=>"Rails 2.1 keeps track of the changes you make to a model's attributes. It also allows you to see what the previous value was. But watch out for the gotcha! See this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/109-tracking-attribute-changes", "published_on"=>2008-05-21 00:00:00 UTC, "guid"=>"tracking-attribute-changes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600017f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#108 named_scope", "deck"=>"The named_scope method in Rails 2.1 makes performing finds on models very elegant and convenient. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/108-named-scope", "published_on"=>2008-05-19 00:00:00 UTC, "guid"=>"named-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000180')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#107 Migrations in Rails 2.1", "deck"=>"Migrations now have a timestamp as their version number in Rails 2.1. In this episode I will explain this change as well as show you some other cool additions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/107-migrations-in-rails-2-1", "published_on"=>2008-05-16 00:00:00 UTC, "guid"=>"migrations-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000181')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-zones-in-rails-2-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#106 Time Zones in Rails 2.1", "deck"=>"In the past, time zones have been very difficult to work with, but no longer! Rails 2.1 brings with it great time zone support as you can see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/106-time-zones-in-rails-2-1", "published_on"=>2008-05-14 00:00:00 UTC, "guid"=>"time-zones-in-rails-2-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000182')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"gitting-rails-2-1-rc1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#105 Gitting Rails 2.1 RC1", "deck"=>"Rails 2.1 Release Candidate 1 was just released! In this episode I will show you how to install it into your Rails project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/105-gitting-rails-2-1-rc1", "published_on"=>2008-05-12 00:00:00 UTC, "guid"=>"gitting-rails-2-1-rc1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000183')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"exception-notifications"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#104 Exception Notifications", "deck"=>"If you're running a production site, it's a good idea to record all exceptions which occur. See how to set up a notification system which does that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/104-exception-notifications", "published_on"=>2008-05-05 00:00:00 UTC, "guid"=>"exception-notifications", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000184')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"site-wide-announcements"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#103 Site Wide Announcements", "deck"=>"Sometimes you need to display an administrative announcement to every page on the site and give the users the ability to hide the announcement. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/103-site-wide-announcements", "published_on"=>2008-04-28 00:00:00 UTC, "guid"=>"site-wide-announcements", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000185')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"auto-complete-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#102 Auto-Complete Association", "deck"=>"Usually a select menu is used for setting a belongs_to association, but in this episode I will show you how to use a text field with auto completion.", "story"=>nil, "url"=>"http://railscasts.com/episodes/102-auto-complete-association", "published_on"=>2008-04-21 00:00:00 UTC, "guid"=>"auto-complete-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000186')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-out-helper-object"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#101 Refactoring Out Helper Object", "deck"=>"If you have complex view logic, this can easily lead to helper methods which call each other. See how to refactor this out into another object in this episode. This is also known as the presenter pattern.", "story"=>nil, "url"=>"http://railscasts.com/episodes/101-refactoring-out-helper-object", "published_on"=>2008-04-14 00:00:00 UTC, "guid"=>"refactoring-out-helper-object", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000187')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"5-view-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#100 5 View Tips", "deck"=>"Here's five quick tips to use in views. Be sure to catch the end of the episode where I reveal an exciting contest!", "story"=>nil, "url"=>"http://railscasts.com/episodes/100-5-view-tips", "published_on"=>2008-04-07 00:00:00 UTC, "guid"=>"5-view-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000188')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-partials"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#99 Complex Partials", "deck"=>"How do you handle partials which have differences depending on the action which is rendering them? Here's three suggestions for this problem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/99-complex-partials", "published_on"=>2008-03-31 00:00:00 UTC, "guid"=>"complex-partials", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000189')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"request-profiling"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#98 Request Profiling", "deck"=>"You can use profiling to determine where the performance bottlenecks are in specific Rails actions. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/98-request-profiling", "published_on"=>2008-03-24 00:00:00 UTC, "guid"=>"request-profiling", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"analyzing-the-production-log"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#97 Analyzing the Production Log", "deck"=>"In order to improve performance of your Rails application you need to find the bottlenecks. A great starting point is your production log. In this episode you will see how to use RAWK to analyze your log file and determine which controller actions take up the most processing time.", "story"=>nil, "url"=>"http://railscasts.com/episodes/97-analyzing-the-production-log", "published_on"=>2008-03-17 00:00:00 UTC, "guid"=>"analyzing-the-production-log", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"git-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#96 Git on Rails", "deck"=>"Git has been getting a lot of buzz lately, and for good reason. It's an excellent SCM which in many ways is more simple and powerful than subversion. See how to set up a Rails project with Git in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/96-git-on-rails", "published_on"=>2008-03-10 00:00:00 UTC, "guid"=>"git-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"more-on-activeresource"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#95 More on ActiveResource", "deck"=>"See how to handle authentication and custom actions using ActiveResource in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/95-more-on-activeresource", "published_on"=>2008-03-03 00:00:00 UTC, "guid"=>"more-on-activeresource", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"activeresource-basics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#94 ActiveResource Basics", "deck"=>"ActiveResource allows you to easily communicate between multiple Rails applications. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/94-activeresource-basics", "published_on"=>2008-02-25 00:00:00 UTC, "guid"=>"activeresource-basics", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"action-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#93 Action Caching", "deck"=>"Action caching behaves much like page caching except it processes the controller filters. You can also make it conditional as seen in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/93-action-caching", "published_on"=>2008-02-18 00:00:00 UTC, "guid"=>"action-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600018f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"make-resourceful"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#92 make_resourceful", "deck"=>"The make_resourceful plugin is a great way to DRY up the 7 RESTful actions common in most controllers. Learn how to use it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/92-make-resourceful", "published_on"=>2008-02-11 00:00:00 UTC, "guid"=>"make-resourceful", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000190')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-long-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#91 Refactoring Long Methods", "deck"=>"In this episode I walk you through an exercise in refactoring by taking a long method and making it more concise.", "story"=>nil, "url"=>"http://railscasts.com/episodes/91-refactoring-long-methods", "published_on"=>2008-02-04 00:00:00 UTC, "guid"=>"refactoring-long-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000191')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fragment-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#90 Fragment Caching", "deck"=>"Sometimes you only want to cache a section of a page instead of the entire page. Fragment caching is the answer as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/90-fragment-caching", "published_on"=>2008-01-27 00:00:00 UTC, "guid"=>"fragment-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000192')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"page-caching"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#89 Page Caching", "deck"=>"Page caching is an efficient way to cache stateless content. In this episode I will show you how to cache the dynamic javascript we created last week.", "story"=>nil, "url"=>"http://railscasts.com/episodes/89-page-caching", "published_on"=>2008-01-20 00:00:00 UTC, "guid"=>"page-caching", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000193')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-select-menus"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#88 Dynamic Select Menus", "deck"=>"See how to dynamically change a select menu based on another select menu using Javascript. In this episode everything is kept client side which leads to a more responsive user interface.", "story"=>nil, "url"=>"http://railscasts.com/episodes/88-dynamic-select-menus", "published_on"=>2008-01-13 00:00:00 UTC, "guid"=>"dynamic-select-menus", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000194')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-rss-feeds"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#87 Generating RSS Feeds", "deck"=>"See how to easily generate and link to an RSS feed using new features in Rails 2.0. Watch this episode or details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/87-generating-rss-feeds", "published_on"=>2008-01-06 00:00:00 UTC, "guid"=>"generating-rss-feeds", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000195')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"logging-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#86 Logging Variables", "deck"=>"Have you ever wanted to easily log all variables? Now you can by using some advanced Ruby concepts as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/86-logging-variables", "published_on"=>2007-12-31 00:00:00 UTC, "guid"=>"logging-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000196')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"yaml-configuration-file"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#85 YAML Configuration File", "deck"=>"Application configuration shouldn't be spread throughout your code base. Instead a much better place to put it is an external YAML file. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/85-yaml-configuration-file", "published_on"=>2007-12-24 00:00:00 UTC, "guid"=>"yaml-configuration-file", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000197')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cookie-based-session-store"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#84 Cookie Based Session Store", "deck"=>"In Rails 1.2 the default session store is file based. This is inefficient and difficult to maintain. In Rails 2.0 the default is now cookie based which has several benefits as you will see in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/84-cookie-based-session-store", "published_on"=>2007-12-17 00:00:00 UTC, "guid"=>"cookie-based-session-store", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000198')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"migrations-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#83 Migrations in Rails 2.0", "deck"=>"Migrations are now sexy in Rails 2.0! In this episode we will take a look at these improvements and the related rake tasks.", "story"=>nil, "url"=>"http://railscasts.com/episodes/83-migrations-in-rails-2-0", "published_on"=>2007-12-10 00:00:00 UTC, "guid"=>"migrations-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f66000199')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http-basic-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#82 HTTP Basic Authentication", "deck"=>"Rails 2.0 offers an extremely easy way to do HTTP basic authentication. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/82-http-basic-authentication", "published_on"=>2007-12-02 00:00:00 UTC, "guid"=>"http-basic-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019a')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fixtures-in-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#81 Fixtures in Rails 2.0", "deck"=>"In Rails 2.0, fixtures see many improvements which makes them much easier to manage. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/81-fixtures-in-rails-2-0", "published_on"=>2007-11-26 00:00:00 UTC, "guid"=>"fixtures-in-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simplify-views-with-rails-2-0"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#80 Simplify Views with Rails 2.0", "deck"=>"Rails 2.0 is almost here. One of the many features in this release is the smarter helper methods which can make your views much cleaner. Learn all about it in this Episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/80-simplify-views-with-rails-2-0", "published_on"=>2007-11-19 00:00:00 UTC, "guid"=>"simplify-views-with-rails-2-0", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generate-named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#79 Generate Named Routes", "deck"=>"This more advanced episode will show you how to dynamically generate named routes by adding a method to the map object.", "story"=>nil, "url"=>"http://railscasts.com/episodes/79-generate-named-routes", "published_on"=>2007-11-12 00:00:00 UTC, "guid"=>"generate-named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019d')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"generating-pdf-documents"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#78 Generating PDF Documents", "deck"=>"In this episode I will show you how to create PDF documents using the excellent PDF::Writer gem.", "story"=>nil, "url"=>"http://railscasts.com/episodes/78-generating-pdf-documents", "published_on"=>2007-11-05 00:00:00 UTC, "guid"=>"generating-pdf-documents", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"destroy-without-javascript"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#77 Destroy Without JavaScript", "deck"=>"If the user has JavaScript disabled, the \"Destroy\" link might not work properly. In this episode I will explore a number of ways to work around this issue.", "story"=>nil, "url"=>"http://railscasts.com/episodes/77-destroy-without-javascript", "published_on"=>2007-10-29 00:00:00 UTC, "guid"=>"destroy-without-javascript", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f6600019f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"scope-out"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#76 scope_out", "deck"=>"The scope_out plugin will generate several helpful find methods for you automatically! It's the best way to move the find conditions into your model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/76-scope-out", "published_on"=>2007-10-22 00:00:00 UTC, "guid"=>"scope-out", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#75 Complex Forms Part 3", "deck"=>"In this third and final episode on complex forms I will show you how to edit a project and multiple tasks all in one form. This includes removing and adding tasks dynamically as well. See the show notes for updated code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/75-complex-forms-part-3", "published_on"=>2007-10-15 00:00:00 UTC, "guid"=>"complex-forms-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#74 Complex Forms Part 2", "deck"=>"See how to use Javascript and RJS to add and remove form fields dynamically. This episode will build upon the previous episode allowing you to create any number of tasks in one form the same time a project is created.", "story"=>nil, "url"=>"http://railscasts.com/episodes/74-complex-forms-part-2", "published_on"=>2007-10-08 00:00:00 UTC, "guid"=>"complex-forms-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"complex-forms-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#73 Complex Forms Part 1", "deck"=>"Complex forms often lead to complex controllers, but that doesn't have to be the case. In this episode see how you can create multiple models through a single form while keeping the controller clean.", "story"=>nil, "url"=>"http://railscasts.com/episodes/73-complex-forms-part-1", "published_on"=>2007-10-01 00:00:00 UTC, "guid"=>"complex-forms-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"adding-an-environment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#72 Adding an Environment", "deck"=>"Rails comes with three environments: development, test, and production. But, you aren't restricted to just these. You can add your own! See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/72-adding-an-environment", "published_on"=>2007-09-24 00:00:00 UTC, "guid"=>"adding-an-environment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-controllers-with-rspec"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#71 Testing Controllers with RSpec", "deck"=>"Controllers are tricky to test, and there's no perfect way to do it. In this episode you will see how I test controllers, and my reasoning behind it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/71-testing-controllers-with-rspec", "published_on"=>2007-09-17 00:00:00 UTC, "guid"=>"testing-controllers-with-rspec", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#70 Custom Routes", "deck"=>"In this episode you will learn how to add custom routes, make some parameters optional, and add requirements for other parameters.", "story"=>nil, "url"=>"http://railscasts.com/episodes/70-custom-routes", "published_on"=>2007-09-10 00:00:00 UTC, "guid"=>"custom-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"markaby-in-helper"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#69 Markaby in Helper", "deck"=>"Do you ever need to generate HTML code in a helper method? Placing it directly in Ruby strings is not very pretty. Learn a great way to generate HTML through Markaby in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/69-markaby-in-helper", "published_on"=>2007-09-03 00:00:00 UTC, "guid"=>"markaby-in-helper", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"openid-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#68 OpenID Authentication", "deck"=>"Ever wonder how to implement OpenID authentication in your Rails app? This episode will show you how to add it to a site with an existing authentication system.", "story"=>nil, "url"=>"http://railscasts.com/episodes/68-openid-authentication", "published_on"=>2007-08-27 00:00:00 UTC, "guid"=>"openid-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restful-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#67 restful_authentication", "deck"=>"Need multiple user authentication? If so, the restful_authentication plugin is a great way to go. It will generate some basic authentication code for you which is good starting point to your authentication system. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/67-restful-authentication", "published_on"=>2007-08-20 00:00:00 UTC, "guid"=>"restful-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rake-tasks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#66 Custom Rake Tasks", "deck"=>"Rake is one of those tools that you don't realize how powerful it is until you start using it. In this episode you will learn how to create custom rake tasks and improve them by using rake features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/66-custom-rake-tasks", "published_on"=>2007-08-13 00:00:00 UTC, "guid"=>"custom-rake-tasks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001aa')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"stopping-spam-with-akismet"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#65 Stopping Spam with Akismet", "deck"=>"The Railscasts site has been getting a lot of comment spam in the past, but no longer. In this episode I will show you how I solved this problem by using the Akismet web service.", "story"=>nil, "url"=>"http://railscasts.com/episodes/65-stopping-spam-with-akismet", "published_on"=>2007-08-06 00:00:00 UTC, "guid"=>"stopping-spam-with-akismet", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-helper-modules"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#64 Custom Helper Modules", "deck"=>"Rails designates one helper module per controller, but that shouldn't stop you from making custom helper modules to help structure the code. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/64-custom-helper-modules", "published_on"=>2007-07-30 00:00:00 UTC, "guid"=>"custom-helper-modules", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ac')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"model-name-in-url"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#63 Model Name in URL", "deck"=>"By default, Rails uses the model's id in the URL. What if you want to use the name of the model instead? You can change this behavior by overriding the to_param method in the model. Watch this episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/63-model-name-in-url", "published_on"=>2007-07-27 00:00:00 UTC, "guid"=>"model-name-in-url", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ad')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hacking-activerecord"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#62 Hacking ActiveRecord", "deck"=>"Have you ever wanted to temporarily disable all validations? Well, ActiveRecord doesn't support this, but that doesn't mean we can't add it. This episode will show you how to open up an existing class and change its behavior.", "story"=>nil, "url"=>"http://railscasts.com/episodes/62-hacking-activerecord", "published_on"=>2007-07-25 00:00:00 UTC, "guid"=>"hacking-activerecord", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ae')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sending-email"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#61 Sending Email", "deck"=>"This is a brief guide to sending email in Rails. See how to configure the environment, generate a mailer, create a template, and deliver the mail.", "story"=>nil, "url"=>"http://railscasts.com/episodes/61-sending-email", "published_on"=>2007-07-23 00:00:00 UTC, "guid"=>"sending-email", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001af')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"testing-without-fixtures"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#60 Testing without Fixtures", "deck"=>"Tests which rely heavily on fixtures are brittle and can be difficult to maintain. This episode will show a couple techniques for creating tests which don't use fixtures.", "story"=>nil, "url"=>"http://railscasts.com/episodes/60-testing-without-fixtures", "published_on"=>2007-07-20 00:00:00 UTC, "guid"=>"testing-without-fixtures", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"optimistic-locking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#59 Optimistic Locking", "deck"=>"When two people attempt to update the same record near the same time, one of the updates will likely be overwritten. You can solve this problem with optimistic locking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/59-optimistic-locking", "published_on"=>2007-07-18 00:00:00 UTC, "guid"=>"optimistic-locking", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"how-to-make-a-generator"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#58 How to Make a Generator", "deck"=>"Rails comes with many built-in generators, but what if you want to customize them or make your own? Rails gives you a great way to do this which you will learn in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/58-how-to-make-a-generator", "published_on"=>2007-07-16 00:00:00 UTC, "guid"=>"how-to-make-a-generator", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"create-model-through-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#57 Create Model Through Text Field", "deck"=>"Let's say you provide a select menu for setting which category a given product belongs to, but you also want the option of creating a new category by typing the name in a text field. See a great way to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/57-create-model-through-text-field", "published_on"=>2007-07-13 00:00:00 UTC, "guid"=>"create-model-through-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-logger"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#56 The Logger", "deck"=>"Learn all about the logger in this episode. See how to send messages to the log and how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/56-the-logger", "published_on"=>2007-07-11 00:00:00 UTC, "guid"=>"the-logger", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cleaning-up-the-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#55 Cleaning Up the View", "deck"=>"This episode starts off with a big, messy template. Watch as this code shrinks and becomes more readable while the interface stays the same.", "story"=>nil, "url"=>"http://railscasts.com/episodes/55-cleaning-up-the-view", "published_on"=>2007-07-09 00:00:00 UTC, "guid"=>"cleaning-up-the-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-with-ruby-debug"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#54 Debugging with ruby-debug", "deck"=>"This episode will show you how to debug a rails app using ruby-debug: set a breakpoint, inspect variables, change the code and more.", "story"=>nil, "url"=>"http://railscasts.com/episodes/54-debugging-with-ruby-debug", "published_on"=>2007-07-06 00:00:00 UTC, "guid"=>"debugging-with-ruby-debug", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"handling-exceptions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#53 Handling Exceptions", "deck"=>"When an exception is raised in development you get the full error along with the stack trace. In production, only a simple message is displayed. Learn why this is and how to customize the handling of exceptions.", "story"=>nil, "url"=>"http://railscasts.com/episodes/53-handling-exceptions", "published_on"=>2007-07-04 00:00:00 UTC, "guid"=>"handling-exceptions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"update-through-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#52 Update through Checkboxes", "deck"=>"See how to select multiple items using checkboxes and perform an action on the selected items in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/52-update-through-checkboxes", "published_on"=>2007-07-02 00:00:00 UTC, "guid"=>"update-through-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"will-paginate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#51 will_paginate", "deck"=>"In edge rails (soon to be Rails 2.0), the built-in pagination has been moved into a plugin: classic_pagination. I recommend jumping over to the will_paginate plugin as shown in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/51-will-paginate", "published_on"=>2007-06-29 00:00:00 UTC, "guid"=>"will-paginate", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"contributing-to-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#50 Contributing to Rails", "deck"=>"The best way to contribute to the Rails project is to submit a patch. This episode shows how to do exactly that. There's also a surprise at the end that you don't want to miss!", "story"=>nil, "url"=>"http://railscasts.com/episodes/50-contributing-to-rails", "published_on"=>2007-06-27 00:00:00 UTC, "guid"=>"contributing-to-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ba')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"reading-the-api"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#49 Reading the API", "deck"=>"The Rails API docs are very useful but can be difficult to read. This episode will give some tips on reading the docs and mention a few alternative sites for accessing the API. Update: sorry about the broken movie, it should work now.", "story"=>nil, "url"=>"http://railscasts.com/episodes/49-reading-the-api", "published_on"=>2007-06-25 00:00:00 UTC, "guid"=>"reading-the-api", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001bb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"console-tricks"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#48 Console Tricks", "deck"=>"The Rails console is one of my favorite tools. This episode is packed with tips and tricks on how to get the most out of the console.", "story"=>nil, "url"=>"http://railscasts.com/episodes/48-console-tricks", "published_on"=>2007-06-22 00:00:00 UTC, "guid"=>"console-tricks", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001bc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"two-many-to-many"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#47 Two Many-to-Many", "deck"=>"There are two different ways to set up a many-to-many association in Rails. In this episode you will see how to implement both ways along with some tips on choosing the right one for your project.", "story"=>nil, "url"=>"http://railscasts.com/episodes/47-two-many-to-many", "published_on"=>2007-06-20 00:00:00 UTC, "guid"=>"two-many-to-many", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"catch-all-route"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#46 Catch-all Route", "deck"=>"Sometimes you need to add complex/dynamic routes. This is often impossible to do in routes.rb, but do not worry. It can be accomplished with a catch-all route. See how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/46-catch-all-route", "published_on"=>2007-06-18 00:00:00 UTC, "guid"=>"catch-all-route", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001be')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"rjs-tips"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#45 RJS Tips", "deck"=>"This episode is packed with little RJS goodies. Learn the different ways to access an element, how to add \"if\" conditions and how to apply an effect to multiple elements.", "story"=>nil, "url"=>"http://railscasts.com/episodes/45-rjs-tips", "published_on"=>2007-06-15 00:00:00 UTC, "guid"=>"rjs-tips", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"debugging-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#44 Debugging RJS", "deck"=>"RJS and AJAX can be difficult to debug. Many times you don't get any error message in the browser. Learn different techniques for solving these tricky problems in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/44-debugging-rjs", "published_on"=>2007-06-13 00:00:00 UTC, "guid"=>"debugging-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"ajax-with-rjs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#43 AJAX with RJS", "deck"=>"This episode will walk you through adding AJAX functionality to a form using RJS. See how to easily update multiple elements on a page.", "story"=>nil, "url"=>"http://railscasts.com/episodes/43-ajax-with-rjs", "published_on"=>2007-06-11 00:00:00 UTC, "guid"=>"ajax-with-rjs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"with-options"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#42 with_options", "deck"=>"Several methods in rails take a hash of options as the last argument. If you are passing the same options to several methods, you can remove this duplication by using with_options. Learn all about it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/42-with-options", "published_on"=>2007-06-08 00:00:00 UTC, "guid"=>"with-options", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"conditional-validations"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#41 Conditional Validations", "deck"=>"By default, validations will take place every time the model is saved. Sometimes you only want a validation to happen when certain conditions are met. See how to do that in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/41-conditional-validations", "published_on"=>2007-06-06 00:00:00 UTC, "guid"=>"conditional-validations", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"blocks-in-view"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#40 Blocks in View", "deck"=>"If you try to create a helper method which accepts a block, you will run into a few gotchas. Learn the secrets of blocks in views in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/40-blocks-in-view", "published_on"=>2007-06-04 00:00:00 UTC, "guid"=>"blocks-in-view", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"customize-field-error"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#39 Customize Field Error", "deck"=>"When a validation error occurs, Rails helpfully wraps the field in a div tag so you can style it. But sometimes you don't want this behavior. In this episode you will see how to customize it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/39-customize-field-error", "published_on"=>2007-06-01 00:00:00 UTC, "guid"=>"customize-field-error", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"multibutton-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#38 Multibutton Form", "deck"=>"If you have a form with multiple buttons, you can detect which button was clicked by checking the passed parameters. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/38-multibutton-form", "published_on"=>2007-05-30 00:00:00 UTC, "guid"=>"multibutton-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"simple-search-form"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#37 Simple Search Form", "deck"=>"A search form is quite different than other forms, this is because it does not deal with model's attributes. See a good way to add a simple search form in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/37-simple-search-form", "published_on"=>2007-05-28 00:00:00 UTC, "guid"=>"simple-search-form", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"subversion-on-rails"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#36 Subversion on Rails", "deck"=>"This episode will walk you through setting up a Rails project on subversion. It covers some helpful tips and gotchas you may experience along the way.", "story"=>nil, "url"=>"http://railscasts.com/episodes/36-subversion-on-rails", "published_on"=>2007-05-25 00:00:00 UTC, "guid"=>"subversion-on-rails", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"custom-rest-actions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#35 Custom REST Actions", "deck"=>"REST adds many constraints. It restricts your controllers to seven actions. Normally this is okay, but sometimes you need to add your own custom actions. Learn how in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/35-custom-rest-actions", "published_on"=>2007-05-23 00:00:00 UTC, "guid"=>"custom-rest-actions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"named-routes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#34 Named Routes", "deck"=>"When you add a custom route, make it a named route so you have url helper methods to easily link to that new route. See episode for details.", "story"=>nil, "url"=>"http://railscasts.com/episodes/34-named-routes", "published_on"=>2007-05-21 00:00:00 UTC, "guid"=>"named-routes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ca')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"making-a-plugin"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#33 Making a Plugin", "deck"=>"You can sometimes remove a lot of duplication by generating methods dynamic. In this episode I will show you how to create a plugin which does exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/33-making-a-plugin", "published_on"=>2007-05-18 00:00:00 UTC, "guid"=>"making-a-plugin", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"time-in-text-field"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#32 Time in Text Field", "deck"=>"Although Rails does allow you to edit time attributes with text fields, it's not very flexible. In this episode you will learn how to use a virtual attribute to format the time to your liking.", "story"=>nil, "url"=>"http://railscasts.com/episodes/32-time-in-text-field", "published_on"=>2007-05-16 00:00:00 UTC, "guid"=>"time-in-text-field", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001cc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"formatting-time"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#31 Formatting Time", "deck"=>"Learn how to use the trusty strftime method to format a time, and see how Rails allows you to save this format for later use.", "story"=>nil, "url"=>"http://railscasts.com/episodes/31-formatting-time", "published_on"=>2007-05-14 00:00:00 UTC, "guid"=>"formatting-time", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"pretty-page-title"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#30 Pretty Page Title", "deck"=>"If you are like me, you avoid creating page titles because it is kind of a pain. But in this episode I will show you a clean way to add titles to your pages.", "story"=>nil, "url"=>"http://railscasts.com/episodes/30-pretty-page-title", "published_on"=>2007-05-11 00:00:00 UTC, "guid"=>"pretty-page-title", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ce')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"group-by-month"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#29 group_by Month", "deck"=>"Learn how to use the very useful group_by method to group an array by anything you want! In this episode I group an array of tasks by month then sort it properly.", "story"=>nil, "url"=>"http://railscasts.com/episodes/29-group-by-month", "published_on"=>2007-05-09 00:00:00 UTC, "guid"=>"group-by-month", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"in-groups-of"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#28 in_groups_of", "deck"=>"Have you ever wanted to visually line up items in rows and columns? The in_groups_of method makes this a cinch. Just watch out for the gotcha.", "story"=>nil, "url"=>"http://railscasts.com/episodes/28-in-groups-of", "published_on"=>2007-05-07 00:00:00 UTC, "guid"=>"in-groups-of", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"cross-site-scripting"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#27 Cross Site Scripting", "deck"=>"Another common security issue is cross site scripting. In this episode you will see why it is so important to escape any HTML a user may submit.", "story"=>nil, "url"=>"http://railscasts.com/episodes/27-cross-site-scripting", "published_on"=>2007-05-04 00:00:00 UTC, "guid"=>"cross-site-scripting", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"hackers-love-mass-assignment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#26 Hackers Love Mass Assignment", "deck"=>"Your site may be at risk! When using mass assignment, you are giving the user complete control over that model and its associations. See how a hacker might use this vulnerability and learn how to stop it in this episode.", "story"=>nil, "url"=>"http://railscasts.com/episodes/26-hackers-love-mass-assignment", "published_on"=>2007-05-02 00:00:00 UTC, "guid"=>"hackers-love-mass-assignment", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"sql-injection"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#25 SQL Injection", "deck"=>"One of the most common security problems for dynamic sites is SQL Injection. Thankfully Rails does everything it can in solving this issue, but you still need to be aware of it.", "story"=>nil, "url"=>"http://railscasts.com/episodes/25-sql-injection", "published_on"=>2007-04-30 00:00:00 UTC, "guid"=>"sql-injection", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"the-stack-trace"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#24 The Stack Trace", "deck"=>"The stack trace can be a very useful tool when it comes to debugging. Learn the ins and outs of how the stack trace works in this episode. Note: I am using an older version of the Rails bundle here so it might be a little different than yours. The command in the newer version is called Install Plugin and requires you to type textmate_footnotes in the search.", "story"=>nil, "url"=>"http://railscasts.com/episodes/24-the-stack-trace", "published_on"=>2007-04-27 00:00:00 UTC, "guid"=>"the-stack-trace", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"counter-cache-column"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#23 Counter Cache Column", "deck"=>"If you need to display the record count for a has_many association, you can improve performance by caching that number in a column.", "story"=>nil, "url"=>"http://railscasts.com/episodes/23-counter-cache-column", "published_on"=>2007-04-25 00:00:00 UTC, "guid"=>"counter-cache-column", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"eager-loading"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#22 Eager Loading", "deck"=>"One way to improve performance is to cut down on the number of SQL queries. You can do this through eager loading. Learn all about it in this episode!", "story"=>nil, "url"=>"http://railscasts.com/episodes/22-eager-loading", "published_on"=>2007-04-23 00:00:00 UTC, "guid"=>"eager-loading", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"super-simple-authentication"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#21 Super Simple Authentication", "deck"=>"The final piece of the administration puzzle: authentication. There are many different approaches which is why I saved this step for last. This episode will cover a few techniques including the simple solution used for this site.", "story"=>nil, "url"=>"http://railscasts.com/episodes/21-super-simple-authentication", "published_on"=>2007-04-20 00:00:00 UTC, "guid"=>"super-simple-authentication", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"restricting-access"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#20 Restricting Access", "deck"=>"In this second part of the series on administration, you will learn how to lock down the site to keep the public from accessing the administration features.", "story"=>nil, "url"=>"http://railscasts.com/episodes/20-restricting-access", "published_on"=>2007-04-18 00:00:00 UTC, "guid"=>"restricting-access", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"where-administration-goes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#19 Where Administration Goes", "deck"=>"This is the first part of a three part series on building an administration system. Many developers choose to separate it completely from the public side of the site by placing it into an admin subdirectory. This episode will show you an alternative and often better solution.", "story"=>nil, "url"=>"http://railscasts.com/episodes/19-where-administration-goes", "published_on"=>2007-04-16 00:00:00 UTC, "guid"=>"where-administration-goes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001d9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"looping-through-flash"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#18 Looping Through Flash", "deck"=>"Displaying flash messages in the layout can be a pain at times. In this episode you will learn an easy way to display any kind of flash message by looping through the hash.", "story"=>nil, "url"=>"http://railscasts.com/episodes/18-looping-through-flash", "published_on"=>2007-04-13 00:00:00 UTC, "guid"=>"looping-through-flash", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001da')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"habtm-checkboxes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#17 HABTM Checkboxes", "deck"=>"It is often asked: how do I create a list of checkboxes for managing a HABTM association? Ask no more because this episode will show you how to do exactly that.", "story"=>nil, "url"=>"http://railscasts.com/episodes/17-habtm-checkboxes", "published_on"=>2007-04-11 00:00:00 UTC, "guid"=>"habtm-checkboxes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"virtual-attributes"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#16 Virtual Attributes", "deck"=>"Keep your controllers clean and forms flexible by adding virtual attributes to your model. This very powerful technique allows you to create form fields which may not directly relate to the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/16-virtual-attributes", "published_on"=>2007-04-09 00:00:00 UTC, "guid"=>"virtual-attributes", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001dc')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"fun-with-find-conditions"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#15 Fun with Find Conditions", "deck"=>"You can pass more than simple strings to find conditions. Arrays, ranges, and nil values can be passed as well. In this episode you will see the tricks involved with passing these odd objects to find conditions. (Update: audio fixed).", "story"=>nil, "url"=>"http://railscasts.com/episodes/15-fun-with-find-conditions", "published_on"=>2007-04-06 00:00:00 UTC, "guid"=>"fun-with-find-conditions", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"performing-calculations-on-models"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#14 Performing Calculations on Models", "deck"=>"Did you know ActiveRecord provides class methods for performing calculations on models? You can even use these methods through associations.", "story"=>nil, "url"=>"http://railscasts.com/episodes/14-performing-calculations-on-models", "published_on"=>2007-04-04 00:00:00 UTC, "guid"=>"performing-calculations-on-models", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001de')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dangers-of-model-in-session"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#13 Dangers of Model in Session", "deck"=>"Be careful when storing a model in a session. It will behave differently than you expect and can easily get out of sync with the database. Instead of storing the model directly in the session, store the id to the model and use that to fetch it from the database.", "story"=>nil, "url"=>"http://railscasts.com/episodes/13-dangers-of-model-in-session", "published_on"=>2007-04-02 00:00:00 UTC, "guid"=>"dangers-of-model-in-session", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001df')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-3"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#12 Refactoring User Name Part 3", "deck"=>"In the final part of this series you will see how to refactor your tests. Keeping tests clean is important because it will make testing easier to do in the future.", "story"=>nil, "url"=>"http://railscasts.com/episodes/12-refactoring-user-name-part-3", "published_on"=>2007-03-30 00:00:00 UTC, "guid"=>"refactoring-user-name-part-3", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#11 Refactoring User Name Part 2", "deck"=>"Testing and refactoring go hand in hand. Refactoring is all about improving code without changing its behavior. Testing is all about making sure you don't change the behavior while you are improving the code.", "story"=>nil, "url"=>"http://railscasts.com/episodes/11-refactoring-user-name-part-2", "published_on"=>2007-03-28 00:00:00 UTC, "guid"=>"refactoring-user-name-part-2", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"refactoring-user-name-part-1"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#10 Refactoring User Name Part 1", "deck"=>"Learn how to clean up your code through refactoring. This episode will show you how to move code from the view into the model to remove duplication and simplify the view.", "story"=>nil, "url"=>"http://railscasts.com/episodes/10-refactoring-user-name-part-1", "published_on"=>2007-03-26 00:00:00 UTC, "guid"=>"refactoring-user-name-part-1", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e2')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"filtering-sensitive-logs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#9 Filtering Sensitive Logs", "deck"=>"Are you accepting sensitive user data? Passwords, credit card numbers, etc. By default, Rails stores all submitted parameters in plain text in the logs. This episode will show you how to filter this sensitive input so it doesn't show up in the log file.", "story"=>nil, "url"=>"http://railscasts.com/episodes/9-filtering-sensitive-logs", "published_on"=>2007-03-23 00:00:00 UTC, "guid"=>"filtering-sensitive-logs", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"layouts-and-content-for"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#8 Layouts and content_for", "deck"=>"If you want to change something in the layout on a per-template basis, content_for is your answer! This allows templates to specify view code that can be placed anywhere in a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/8-layouts-and-content-for", "published_on"=>2007-03-21 00:00:00 UTC, "guid"=>"layouts-and-content-for", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"all-about-layouts"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#7 All About Layouts", "deck"=>"Everything you wanted to know about layouts: global layouts, controller layouts, shared layouts, dynamic layouts and action layouts. Yes, there really are that many ways to specify a layout.", "story"=>nil, "url"=>"http://railscasts.com/episodes/7-all-about-layouts", "published_on"=>2007-03-19 00:00:00 UTC, "guid"=>"all-about-layouts", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"shortcut-blocks-with-symbol-to-proc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#6 Shortcut Blocks with Symbol to_proc", "deck"=>"It may have a goofy syntax, but the Symbol#to_proc feature Rails adds allows you to do simple blocks very quickly and easily.", "story"=>nil, "url"=>"http://railscasts.com/episodes/6-shortcut-blocks-with-symbol-to-proc", "published_on"=>2007-03-16 00:00:00 UTC, "guid"=>"shortcut-blocks-with-symbol-to-proc", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e6')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"using-with-scope"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#5 Using with_scope", "deck"=>"Learn how to use with_scope - a very powerful method which will allow your custom find methods to accept any find options. Just like magic!", "story"=>nil, "url"=>"http://railscasts.com/episodes/5-using-with-scope", "published_on"=>2007-03-14 00:00:00 UTC, "guid"=>"using-with-scope", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"move-find-into-model"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#4 Move Find into Model", "deck"=>"Move a find into the model to clean up the controllers and remove duplication. Also see how you can call these custom find methods through an association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/4-move-find-into-model", "published_on"=>2007-03-12 00:00:00 UTC, "guid"=>"move-find-into-model", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e8')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"find-through-association"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#3 Find Through Association", "deck"=>"No need to pass foreign keys in find conditions, just do the find through a has_many association.", "story"=>nil, "url"=>"http://railscasts.com/episodes/3-find-through-association", "published_on"=>2007-03-09 00:00:00 UTC, "guid"=>"find-through-association", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"dynamic-find-by-methods"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#2 Dynamic find_by Methods", "deck"=>"Shorten simple finds considerably and improve readability by using the dynamic find_all_by and find_by methods.", "story"=>nil, "url"=>"http://railscasts.com/episodes/2-dynamic-find-by-methods", "published_on"=>2007-03-07 00:00:00 UTC, "guid"=>"dynamic-find-by-methods", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001ea')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"caching-with-instance-variables"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"#1 Caching with Instance Variables", "deck"=>"Learn a quick way to improve performance. Just store the end result of an expensive command in an instance variable!", "story"=>nil, "url"=>"http://railscasts.com/episodes/1-caching-with-instance-variables", "published_on"=>2007-03-04 00:00:00 UTC, "guid"=>"caching-with-instance-variables", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a21d44b60f660001eb')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503145"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Uncategorized"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Uncategorized", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001ee'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ec'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Apple Has Approved 1 Million Apps for the App Store", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/Apps.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Apple's App Store has now received more than 1 million app submissions since launching in 2008, according to data from Appsfire.</p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/apple-app-store-1-million-submissions/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/Apps.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Apple's App Store has now received more than 1 million app submissions since launching in 2008, according to data from Appsfire.</p>\n\n<p><a href=\"http://feedads.g.doubleclick.net/~at/YrfC8AGx8vc9pcxcIwPdW1I_kDY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/YrfC8AGx8vc9pcxcIwPdW1I_kDY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/YrfC8AGx8vc9pcxcIwPdW1I_kDY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/YrfC8AGx8vc9pcxcIwPdW1I_kDY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=B8mjkhscMkc:EeI4Uu92B60:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=B8mjkhscMkc:EeI4Uu92B60:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=B8mjkhscMkc:EeI4Uu92B60:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=B8mjkhscMkc:EeI4Uu92B60:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=B8mjkhscMkc:EeI4Uu92B60:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=B8mjkhscMkc:EeI4Uu92B60:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/B8mjkhscMkc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/B8mjkhscMkc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503145", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a31d44b60f660001ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1432837"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001f0'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Small Business"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Small Business"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Small Business", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001f2'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"contributors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"contributors", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001f4'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"credit-card"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"credit-card"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"credit-card", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001f6'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"features"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"features", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001f8'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mashable"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mashable", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001fa'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mobile payments"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"mobile payments"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"mobile payments", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001fc'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001fb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"nfc"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"nfc"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"nfc", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f660001fe'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001fd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"open forum"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"open forum"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"open forum", "_id"=>BSON::ObjectId('50aa48a31d44b60f660001ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000200'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ff')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"surcharge"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"surcharge"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"surcharge", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000201')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000202'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000201')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Charging a Credit Surcharge Will Cost You Customers", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/credit-card-surcharges/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/credit-card-surcharges/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/02/credit-cards-600-275x140.jpg\" alt=\"\" title=\"credit cards\" width=\"275\" height=\"140\" class=\"alignright size-medium wp-image-917509\" /></a></p>\n<p>In July, card issuers and banks reached a <a href=\"http://online.wsj.com/article/SB10001424052702303919504577525284273006706.html?mod=dist_smartbrief\" target=\"_blank\">$7.25 billon settlement</a> with merchants. As a result of the settlement, nearly seven million merchants in the U.S. will receive paid damages and lower processing interchange fees for an eight-month period. The settlement, which is viewed as a major ‘win’ for merchants, also allows merchants to surcharge the customer when they choose to pay with credit.</p>\n<p>To surcharge or not to surcharge -– it’s the question you’ll need to answer. On the surface, surcharging may seem like an obvious choice for merchants. Merchants now have the opportunity to earn the same from all customers, regardless of the payment method. Some may even consider it a c&#8230; <br /><a href=\"http://mashable.com/2012/11/19/credit-card-surcharges/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/small-business/\">Small Business</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/credit-card/\">credit-card</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/mobile-payments/\">mobile payments</a>, <a href=\"http://mashable.com/tag/nfc/\">nfc</a>, <a href=\"http://mashable.com/tag/open-forum/\">open forum</a>, <a href=\"http://mashable.com/tag/surcharge/\">surcharge</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5QnynhzGQB1KXx2Bd-tgmCNI6E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=wnVtDwFm9t8:jbjPpYnPlDw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/wnVtDwFm9t8\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/wnVtDwFm9t8/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1432837", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a31d44b60f660001ef')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501125"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000204'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Jobs"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Jobs", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000206'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Mashable Job Board"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Mashable Job Board"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Mashable Job Board", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000207')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000208'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000207')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"boombox"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"boombox"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"boombox", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000209')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f6600020a'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000209')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"sonico"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"sonico"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"sonico", "_id"=>BSON::ObjectId('50aa48a31d44b60f6600020b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f6600020c'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f6600020b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"the onion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"the onion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"the onion", "_id"=>BSON::ObjectId('50aa48a31d44b60f6600020d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f6600020e'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f6600020d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"weekly jobs roundup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"weekly jobs roundup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"weekly jobs roundup", "_id"=>BSON::ObjectId('50aa48a31d44b60f6600020f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000210'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000203'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f6600020f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Hunting for a Job? Check 160+ Listings From The Onion and More", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/job-listings-onion-gap/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/job-listings-onion-gap/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/job-listings-onion-gap/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/10/help-wanted.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>When the world's best companies are looking to fill open positions, they post them on the Mashable Job Board. New jobs are added every day.</p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/mashable-job-board/\">Mashable Job Board</a>, <a href=\"http://mashable.com/tag/boombox/\">boombox</a>, <a href=\"http://mashable.com/tag/sonico/\">sonico</a>, <a href=\"http://mashable.com/tag/the-onion/\">the onion</a>, <a href=\"http://mashable.com/tag/weekly-jobs-roundup/\">weekly jobs roundup</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/N_BjadZJfDBbWplzhTC6PkAyaAQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=p2L1XojY2T0:jHUkNG_s_Go:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/p2L1XojY2T0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/p2L1XojY2T0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501125", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a31d44b60f66000203')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503009"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000212'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Dyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Dyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Dyle", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000213')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000214'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000213')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elgato"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elgato"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elgato", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000215')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000216'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000215')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"eyetv"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"eyetv"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"eyetv", "_id"=>BSON::ObjectId('50aa48a31d44b60f66000217')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a31d44b60f66000218'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000217')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iOS"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iOS"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iOS", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000219')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600021a'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000219')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iPod Touch"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iPod Touch"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iPod Touch", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600021b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600021c'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600021b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"ipad"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ipad"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"ipad", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600021d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600021e'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600021d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"iphone"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"iphone"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"iphone", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600021f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000220'), "article_id"=>BSON::ObjectId('50aa48a31d44b60f66000211'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600021f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Broadcast TV Comes to the iPhone and iPad", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/eyetv-mobile/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/eyetv-mobile/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/eyetv-ipad-640.jpg\" alt=\"EyeTV Mobile\" title=\"eyetv-ipad-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1503013\" /></a></p>\n<p><a href=\"http://mashable.com/category/iphone/\">iPhones</a> and <a href=\"http://mashable.com/tag/ipad/\">iPads</a> can perform wondrous feats with various media, but one thing they can't do is tune into live TV over the air. With the new EyeTV Mobile tuner, however, broadcast TV becomes just another app.</p>\n<p>EyeTV Mobile, made by elgato, is a tiny accessory that plugs into the 30-pin dock connector on your iPhone, iPad or iPod touch. Yep, it's the old one, not the <a href=\"http://mashable.com/2012/09/14/apple-lightning-what-we-know/\">Lightning</a>, but it should work with newer iDevices via one of the available adapters. The tuner receives digital TV broadcasts made specifically for mobile devices, and you can view them with the <a href=\"http://www.dyle.tv/\" target=\"_blank\">Dyle</a> mobile TV app.</p>\n<p>Turning your iPhone into a <a href=\"http://en.wikipedia.org/wiki/Sony_Watchman\" target=\"_blank\">Sony Watchman</a> sounds like an odd throwback in the age of digital, but it's actua&#8230; <br /><a href=\"http://mashable.com/2012/11/19/eyetv-mobile/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/dyle/\">Dyle</a>, <a href=\"http://mashable.com/tag/elgato/\">elgato</a>, <a href=\"http://mashable.com/tag/eyetv/\">eyetv</a>, <a href=\"http://mashable.com/tag/ios/\">iOS</a>, <a href=\"http://mashable.com/tag/ipod-touch/\">iPod Touch</a>, <a href=\"http://mashable.com/tag/ipad/\">ipad</a>, <a href=\"http://mashable.com/tag/iphone/\">iphone</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/VjXsSu770RBJnuIXU58woykHltI/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=txermFfF-9I:aFXYtvmiVyw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/txermFfF-9I\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/txermFfF-9I/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503009", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a31d44b60f66000211')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500437"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000222'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000221'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"alexa von tobel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"alexa von tobel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"alexa von tobel", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000224'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000221'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000223')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"topted"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"topted", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000226'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000221'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Alexa von Tobel: 4 TEDTalks That Impart True Insight", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/alexa-von-tobel-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/alexa-von-tobel-640.jpg\" alt=\"\" title=\"Alexa von Tobel\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1500455\" /></a></p>\n<p>As founder and CEO of personal finance site <a href=\"http://www.learnvest.com/\" taget=\"_blank\">LearnVest</a>, Alexa von Tobel is teaching people new things everyday.  She knows that the best TEDTalks are the ones that can deliver eye-opening information in a way that's accessible to the audience.</p>\n<p>She explains, \"When I had the privilege of giving a <a href=\"http://www.youtube.com/watch?v=8jkri0AeZWQ\" target=\"_blank\">TED talk</a> on the importance of financial literacy at TEDxWallStreet, I spent hours reviewing the latest talks and re-watched all of my favorites. I think a quintessential TEDTalk delivers an innovative idea with true insight and a sense of humor.\"</p>\n<p>Here are her four favorite TEDTalks, and notes on why she chose each one.</p>\n<p>Ken Robinson says schools kill creativity</p>\n<p>\"The first on my list&#8230; <br /><a href=\"http://mashable.com/2012/11/19/alexa-von-tobel-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/alexa-von-tobel/\">alexa von tobel</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OWwCmUifS1jD98kftAt2bCOLg_0/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=E4Cj0YJ43xI:968y7KAuVcA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/E4Cj0YJ43xI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/E4Cj0YJ43xI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500437", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000221')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497215"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000228'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000227'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tim O'Reilly"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tim O'Reilly"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tim O'Reilly", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600022a'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000227'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000229')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600022b'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000227'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Tim O’Reilly: 9 TEDTalks That Stretched My Mind", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tim-oreilly-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tim-oreilly-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/tim-oreilly-640.jpg\" alt=\"\" title=\"Tim O&#039;Reilly\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1497573\" /></a></p>\n<p>Tim O'Reilly founded <a href=\"http://oreilly.com/\" target=\"_blank\">O'Reilly Media</a> with the long-term vision of changing the world by spreading the knowledge of tech innovators. It’s a mission that very much dovetails with TED. Below, O'Reilly picks his favorite TEDTalks and give notes about why each one had a major impact on him. </p>\n<p>Willie Smits: How to restore a rainforest</p>\n<p>“I loved the deep systems thinking in Willie Smits' talk. If we want to get <em>there</em>, we need to start here...”</p>\n<p>Jen Pahlka: Coding a better government</p>\n<p>“‘Are we just a crowd of voices, or are we a crowd of hands?’ Jen Pahlka puts the notion of government participation in a new and powerful context.”</p>\n<p>Bonnie Bassler: How bacteria \"ta&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tim-oreilly-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/tim-oreilly/\">Tim O'Reilly</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6yJsTQf9Qj8u3W1hbo5DysSbK8E/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=OVDQo6XpeKA:NicbcTxvwOo:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/OVDQo6XpeKA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/OVDQo6XpeKA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497215", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000227')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494993"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600022d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600022c'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"elif shafak"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"elif shafak"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"elif shafak", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600022f'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600022c'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600022e')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000230'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600022c'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Elif Shafak: 8 Talks That Captivated Me", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/elif-shafak-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/elif-shafak-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/elif-shafak-640.jpg\" alt=\"\" title=\"Elif Shafak\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1495017\" /></a></p>\n<p>An acclaimed author in both Turkey and the United States, Elif Shafak champions in her TEDTalk, “<a href=\"http://www.ted.com/talks/elif_shafak_the_politics_of_fiction.html\" target=\"_blank\">The politics of fiction</a>,” the idea that stories can transcend identity politics. Transcendence appears to be the theme that links together the talks that Shafak calls her favorites. </p>\n<p>She explains, “I have chosen these speakers because even long after I listened to their talks I noticed I was carrying their words with me wherever I traveled. I usually like the kind of talks that combine the intellectual and the emotional, the mind and the heart. In all of these talks there is a desire to expand, to transcend the boundaries of the Self, to understand and connect, to debunk clichés and&#8230; <br /><a href=\"http://mashable.com/2012/11/19/elif-shafak-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/elif-shafak/\">elif shafak</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/poPeM1SBlkfzuSuu1KZhV4IyFuo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WdNd3V99t9k:uOXgYHy2510:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WdNd3V99t9k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WdNd3V99t9k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494993", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f6600022c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494755"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000232'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000231'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"damon lindelof"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"damon lindelof"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"damon lindelof", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000234'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000231'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000233')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"topted"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000235'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000231'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000225')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Damon Lindelof: 5 TEDTalks I Sent to My Friends", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/damon-lindelof-ted/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/damon-lindelof-ted/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/damon-lindelof-640.jpg\" alt=\"\" title=\"Damon Lindelof\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1494839\" /></a></p>\n<p>Damon Lindelof, co-creator of the series <i>Lost</i>, didn’t need to go down “the rabbit hole that is TED” in order to pick his favorite talks. </p>\n<p>The co-writer of the movie <i>Prometheus</i>, which featured a TEDTalk from the year 2023, explains, “Why these talks? Well, truth be told, there are probably a couple dozen more on this list, but I didn't want to dilute the impact of those I remembered off the top of my head. These are the ones that stayed with me. That I watched more than once. That I felt were truly original, impactful, entertaining and emotional. These talks transcended the message and highlighted the messenger ... and in the immortal words of Roy Neary from <i>Close Encounters of</i>&#8230; <br /><a href=\"http://mashable.com/2012/11/19/damon-lindelof-ted/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/damon-lindelof/\">damon lindelof</a>, <a href=\"http://mashable.com/tag/topted/\">topted</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JygzWDCPGwLVfWO-4EKqh_Ek5xU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=I0YszqNvoSM:HHV9ZZ7Xuww:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/I0YszqNvoSM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/I0YszqNvoSM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494755", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000231')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502809"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000237'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000236'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"irobot"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"irobot"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"irobot", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000238')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000239'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000236'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000238')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"robots"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"robots"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"robots", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600023b'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000236'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600023a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"trending"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"trending", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600023d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000236'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Robot Hand Picks Up Nyan Cat, What Else is Possible?", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/robot-and-nyan-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1974432716001&amp;autoStart=false\"></iframe> </p>\n<p>Humans take their hands for granted. We’re just as quick to make an obscene gesture with them as we are to paint the next Mona Lisa. For those building robots, however, dexterous hands are a never--ending conundrum. Building them is tough and expensive. <a href=\"http://mashable.com/follow/topics/roomba/\">Roomba</a> manufacturer <a href=\"http://mashable.com/follow/topics/irobot/\">iRobot</a> is working on innovating its way around at least a few of these major obstacles to build effective, affordable, and maybe even intuitive digits.</p>\n<p>Take the hand in the video above. Actually, it looks nothing like a traditional appendage, but according to iRobot scientists, this “Jamming Gripper\" (part of iRobot’s HANDLE-- Hardened, Adaptive, Novel, Low-Cost, End Effect&#8230; <br /><a href=\"http://mashable.com/2012/11/19/robot-hand-picks-up-nyan-cat/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/irobot/\">irobot</a>, <a href=\"http://mashable.com/tag/robots/\">robots</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/6oH1qTlNBCwt2uaITOlDjR5CI1o/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=WDBiv5gmBkc:hIQirMC5r1s:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/WDBiv5gmBkc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/WDBiv5gmBkc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502809", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000236')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502857"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600023f'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600023e'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"SkinnyScoop"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"SkinnyScoop"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"SkinnyScoop", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000241'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600023e'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000240')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"pinterest"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"pinterest", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000243'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600023e'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"SkinnyScoop Brings the Conversation Into Pinterest-Style Recommendations", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/skinnyscoop/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/skinnyscoop/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/skinnyscoop/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/02/online-shopping-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Where virtual bulletin board Pinterest is great for setting goals and daydreaming, SkinnyScoop wants to take these dreams and turn them into action. </p>\n<p>More About: <a href=\"http://mashable.com/tag/skinnyscoop/\">SkinnyScoop</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/f7N-KWZijarD0D4LMfgiCJeHVFs/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=m9cHYJETtLE:YcadmvcMkDY:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/m9cHYJETtLE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/m9cHYJETtLE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502857", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f6600023e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502515"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000245'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"dear kate"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"dear kate"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"dear kate", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000247'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000246')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"fashion"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"fashion"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"fashion", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000249'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000248')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"julie sygiel"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"julie sygiel"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"julie sygiel", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600024b'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600024a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"lingerie"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"lingerie"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"lingerie", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600024d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600024c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"underwear"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"underwear"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"underwear", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600024f'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000244'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600024e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Leak-Resistant Lingerie Could Revolutionize ‘That Time of the Month’", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/dear-kate/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/dear-kate/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/dear-kate/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/dear-kate-600.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Ladies, we've all been there. In the middle of class or on a date. While wearing white jeans at a Memorial Day barbecue. Wouldn't it be great if you could get seamless backup protection on the days of your period, or during a pregnancy -- <em>just in case</em>?</p>\n<p>More About: <a href=\"http://mashable.com/tag/dear-kate/\">dear kate</a>, <a href=\"http://mashable.com/tag/fashion/\">fashion</a>, <a href=\"http://mashable.com/tag/julie-sygiel/\">julie sygiel</a>, <a href=\"http://mashable.com/tag/lingerie/\">lingerie</a>, <a href=\"http://mashable.com/tag/underwear/\">underwear</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/TGrmsvSmrJUXeewQGc7_3BPsWcA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Qubde4H6Jro:-keQlzDOWRU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Qubde4H6Jro\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Qubde4H6Jro/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502515", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000244')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1503063"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000251'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000250'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"acquisition"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"acquisition"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"acquisition", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000252')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000253'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000250'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000252')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cisco"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cisco"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cisco", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000255'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000250'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000254')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"meraki"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"meraki"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"meraki", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000257'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000250'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000256')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Cisco Acquires Cloud Networking Firm Meraki for $1.2 Billion", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/cisco-acquires-meraki/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/cisco-acquires-meraki/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/meraki-275x171.jpg\" alt=\"meraki\" title=\"meraki\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1503065\" /></a><a href=\"http://mashable.com/follow/topics/cisco/\">Cisco</a> has acquired cloud networking company Meraki for $1.2 billion in cash, the companies have announced. </p>\n<p>The acquisition is subject to regulatory approval and is expected to close in the second quarter of Cisco's 2013 fiscal year.</p>\n<p>\"When compared to other opportunities, Meraki built a unique cloud-based business from the ground up that addresses the broader networking shift towards cloud, not just within wireless. Meraki created a massively scalable architecture that offers easy to deploy, secure, and manage networks,\" wrote Cisco in a <a href=\"http://blogs.cisco.com/news/cisco-announces-intent-to-acquire-meraki/\" target=\"_blank\">blog post</a> announcing the acquisition. </p>\n<p><a href=\"http://www.meraki.com/company/cisco-acquisition-faq\" target=\"_blank\">Meraki</a> is a San Francisco-based company, founded in 2006 by MIT PhD candidates, and was funded by Sequoia Ca&#8230; <br /><a href=\"http://mashable.com/2012/11/19/cisco-acquires-meraki/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/acquisition/\">acquisition</a>, <a href=\"http://mashable.com/tag/cisco/\">cisco</a>, <a href=\"http://mashable.com/tag/meraki/\">meraki</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/5zx8P-G65OZRtyOVruC60sRCXz4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=eiqIH_m9YyM:UJrRsebhFfQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/eiqIH_m9YyM\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/eiqIH_m9YyM/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1503063", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000250')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502455"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000259'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000258'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Video"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Video", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600025b'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000258'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Viral Video Recap"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Viral Video Recap"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Viral Video Recap", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600025d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000258'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600025e'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000258'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"viral videos"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"viral videos", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000260'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000258'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Viral Video Recap: Funniest Memes of the Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/viral-video-recap-13/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/viral-video-recap-13/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/viral-video-recap-13/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/skydiving-cat.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Feel like you missed out on all the viral video fun from last week? What, you were actually working during the week?</p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/viral-video-recap/\">Viral Video Recap</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/QLWfBjVzKf9PEdVzFnrXca_5Rzo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=7rgKdRzUxb0:9bsRtprfuaA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/7rgKdRzUxb0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/7rgKdRzUxb0/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502455", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000258')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502953"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000262'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000261'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Kohler"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Kohler"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Kohler", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000264'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000261'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000263')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"speakers"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"speakers", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000266'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000261'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Impressive Kohler Shower Head Doubles as Wireless Speaker [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kohler-shower-head/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kohler-shower-head/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kohler-shower-head/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kohler.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975602420001&amp;autoStart=false\"></iframe></p>\n<p>While it may seem counterintuitive at first sight, Kohler's \"Moxie\" shower head pumps out sound while water flows through it.</p>\n<p>Integrated with a wireless speaker, the Moxie pairs with any Bluetooth-enabled device, up to 32 feet away. From playlists to podcasts, it can deliver up to seven hours of sound, <a href=\"http://www.us.kohler.com/us/Moxie%22-Showerhead-+-Wireless-Speaker/content/CNT16200089.htm?_requestid=581213\" target=\"_blank\">according to Kohler's official website</a>.</p>\n<p>Users pop the capsule-like magnetic speaker into the center of the shower head, docking it securely in place. To see the Moxie in action, check out the video, above. </p>\n<p>Would you use this product? Tell us in the comments below.</p>\n<p>More About: <a href=\"http://mashable.com/tag/kohler/\">Kohler</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/pYtApv60scrDODjKi5utbL5R8Js/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=ZlY5SIVXHGQ:W-hLQDnaRxg:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/ZlY5SIVXHGQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/ZlY5SIVXHGQ/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502953", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000261')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1494889"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000268'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000269'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"YouTube"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"YouTube"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"YouTube", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600026b'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600026a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"cooking"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"cooking"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"cooking", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600026c')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600026d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600026c')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600026e'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"food"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"food"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"food", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000270'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600026f')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holidays 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holidays 2012", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000271')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000272'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000271')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"thanksgiving"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"thanksgiving"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"thanksgiving", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000273')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000274'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000267'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000273')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Cook a Complete Thanksgiving Meal Using YouTube", "deck"=>"<br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>", "story"=>"      <br/>\n      <h4>1. Turkey</h4>\n      <br/>\n              <object width=\"616\" height=\"400\">\n          <param value=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\" name=\"movie\"/>\n          <param name=\"allowFullScreen\" value=\"true\"/>\n          <param value=\"always\" name=\"allowscriptaccess\"/>\n          <param value=\"transparent\" name=\"wmode\"/>\n          <embed width=\"616\" height=\"400\" allowfullscreen=\"true\" allowscriptaccess=\"always\" type=\"application/x-shockwave-flash\" src=\"http://www.youtube.com/v/ipxs3GvNw8w&amp;border=0&amp;rel=0&amp;loop=0\"/>\n        </object>\n      <p>The pièce de résistance of Thanksgiving is the turkey. For a first-timer, the bird can seem intimidating, but there are dozens of YouTube tutorials, depending whether you choose to stuff the bird. \n\nDon't forget to buy the turkey a couple days ahead of time, or you'll be stuck with a frozen block of ice bird.</p><p><a href='http://mashable.com/2012/11/19/youtube-thanksgiving-meal/#1016111-Turkey'>Click here to view this gallery.</a></p><div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/youtube-thanksgiving-meal/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/thanksgiving-turkey.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>For many, <a href=\"http://www.mashable.com/follow/topics/thanksgiving\">Thanksgiving</a> kicks off the most stressful time of year. Getting together with family and friends during the holidays is always enjoyable, but playing host can be a burden -- especially if you're not prepared.</p>\n<p>If you've yet to pin a single recipe on your well-intended Thanksgiving Pinterest board, don't panic. There's still plenty of time to prepare a meal fit for two, or twelve. <a href=\"http://mashable.com/category/youtube/\">YouTube</a> is chock-full of cooking videos that will show you how to make all of the classic dishes served on Thanksgiving.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2011/11/19/thanksgiving-online-resources/\">16 Online Resources for Preparing the Perfect Thanksgiving</a></strong></p>\n<p>While the gallery above will take you step-by-step through the perfect meal, it's important to grab the ingre&#8230; <br /><a href=\"http://mashable.com/2012/11/19/youtube-thanksgiving-meal/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/youtube/\">YouTube</a>, <a href=\"http://mashable.com/tag/cooking/\">cooking</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/food/\">food</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/thanksgiving/\">thanksgiving</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/OC6fFz3DYxXYrWXjKjUj1l_HfeQ/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=cONrshwgQ58:ibRX-A_nULI:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/cONrshwgQ58\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/cONrshwgQ58/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1494889", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000267')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499819"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000276'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000277'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000278'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"infographics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"infographics", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600027a'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"job search series"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"job search series", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600027c'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600027d'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"talent"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"talent"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"talent", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600027f'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000275'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600027e')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Find Top Tech Talent on Social Media", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/tech-talent-social-media/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/tech-talent-social-media/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/03/socialmediaccounts600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>In today’s world of serial applicants, recruiters are having trouble finding top talent.</p>\n<p>Most recruitment processes are costly and ineffective. Hiring managers are bogged down by unqualified applicants and an excess of resumes. In fact, Bradford Smart, president of the recruiting firm Smart &#038; Associates, says that only <a href=\"http://www.openforum.com/articles/a-recruiters-tips-for-finding-top-talent\" target=\"_blank\">25% of hires are considered top performers</a>.</p>\n<p>Worldwide, companies spend an estimated <a href=\"http://www.microsoft.com/en-us/news/Features/2012/Aug12/08-28Careerify.aspx\" target=\"_blank\">$120 billion</a> per year on recruiting. The <a href=\"http://www.thenovogroup.com/blog/?Tag=passive%20recruiting\" target=\"_blank\">Novo Group's 2012 HR and Recruiting Trends Survey</a> reported that 78% of HR leaders naming the search for top talent as their number one challenge. But if all of this money and effort results in only one in four top performers, there has to be a&#8230; <br /><a href=\"http://mashable.com/2012/11/19/tech-talent-social-media/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/talent/\">talent</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/8JhApI748QNaAndqDTAdLBV4daU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=XEQuj5cSrnc:UAO3jsdFDjA:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/XEQuj5cSrnc\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/XEQuj5cSrnc/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499819", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000275')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499123"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000281'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000280'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Lifestyle"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Lifestyle"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Lifestyle", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000283'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000280'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000282')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"health"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"health"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"health", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000285'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000280'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000284')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"infographics"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000286'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000280'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000279')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"smartphones"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"smartphones"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"smartphones", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000288'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000280'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000287')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Late-Night Gadget Use Damages Your Sleep Cycle [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/gadgets-sleep/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/gadgets-sleep/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\"><img src=\"http://5.mshcdn.com/wp-content/uploads/2012/11/sleep-phone-thumb.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Does this sound familiar? You're lying in bed, ostensibly ready for dreamland. But first, you grab your smartphone and set the requisite six alarms (all of them blaring the <em>Star Wars theme</em>). But while you've got your phone out, you might as well text your buddy back like you meant to. Plus, now is the perfect time to plow through those 11 games of <em>Gems With Friends</em> that have been on hold. Oh, and there was that sloth video you never got around to watching on <a href=\"http://www.mashable.com/follow/topics/youtube/\">YouTube</a>. Then, maybe it's time for bed. But you should probably throw something on <a href=\"http://www.mashable.com/follow/topics/netflix/\">Netflix</a> to help you pass out. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/07/11/zeo-sleep-101/\">Free iPhone App Tracks Sleep, Gives Expert Advice</a></strong></p>\n<p>It's a perfectly normal routine. In fact, 95% of people s&#8230; <br /><a href=\"http://mashable.com/2012/11/19/gadgets-sleep/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/lifestyle/\">Lifestyle</a>, <a href=\"http://mashable.com/tag/health/\">health</a>, <a href=\"http://mashable.com/tag/infographics/\">infographics</a>, <a href=\"http://mashable.com/tag/smartphones/\">smartphones</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/qBWMFgVS0jf4-0xZj50skHGouUg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=uNYW_P3_gqo:MMcxqTLwCck:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/uNYW_P3_gqo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/uNYW_P3_gqo/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499123", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000280')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501261"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600028a'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000289'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"apple"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"apple", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600028c'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000289'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kickstarter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kickstarter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kickstarter", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600028e'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000289'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600028d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"toys"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"toys"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"toys", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000290'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000289'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600028f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Ex-Apple Employee Wants to Create the Best Toy Blocks Ever", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/19/kickstarter-atoms/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/19/kickstarter-atoms/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/kickstarter-atoms-640.jpg\" alt=\"ATOMS Kickstarter\" title=\"kickstarter-atoms-640\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1501385\" /></a></p>\n<p>Imagine a child's building blocks. Now imagine them moving around, lighting up and even interacting with each other, while being controlled by your iPhone. That's the idea behind ATOMS, a <a href=\"http://mashable.com/follow/topics/kickstarter/\" target=\"_blank\">Kickstarter</a> project that launched Monday.</p>\n<p>Ex-Apple employee Michael Rosenblatt assembled the Seamless Toy Company from the startup scene in Boulder, Colo. over the past few months. In four weeks, the company has cranked out 13 prototypes of ATOMS, tiny devices that kids of all ages can use to build working interactive toys.</p>\n<p>If the idea sounds like <a href=\"http://mashable.com/2012/04/13/lego-robots-synthetic-bones/\" target=\"_blank\">Lego</a> Mindstorms, you're not far off. Rosenblatt, whose day job is at Samsung, says he aims to help kids build toys that actually <em>do</em> things, rather than&#8230; <br /><a href=\"http://mashable.com/2012/11/19/kickstarter-atoms/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/kickstarter/\">kickstarter</a>, <a href=\"http://mashable.com/tag/toys/\">toys</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/tahfA1N1vVOtKxQ4gYHebZ0U1Ps/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=w9cjso57EEA:xD6zMfahrnM:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/w9cjso57EEA\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/w9cjso57EEA/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501261", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000289')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502859"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000292'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000291'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note 2", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000294'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000291'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000293')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Galaxy Note II"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Galaxy Note II"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Galaxy Note II", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000296'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000291'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000295')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"american music awards"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"american music awards"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"american music awards", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000297')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000298'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000291'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000297')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"samsung"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"samsung"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"samsung", "_id"=>BSON::ObjectId('50aa48a41d44b60f66000299')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600029a'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f66000291'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000299')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"American Music Awards Goes Paperless, Uses Galaxy Note II to Announce Winners", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/american-music-awards-galaxy-note/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\"><img src=\"http://7.mshcdn.com/wp-content/uploads/2012/11/samsung-galaxy-note-ii-600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>And the winner is ... <a href=\"http://mashable.com/follow/topics/samsung/\">Samsung</a>'s <a href=\"http://mashable.com/2012/08/29/samsung-galaxy-note-ii/\">Galaxy Note II</a>. </p>\n<p>The smartphone took center stage -- literally -- at the <a href=\"http://mashable.com/follow/topics/american-music-awards/\">American Music Awards</a> Sunday night, as presenters used it to announce winners, <a href=\"http://www.runaroundtech.com/2012/11/18/may-i-have-the-envelope-i-mean-the-galaxy-note-2-please/\" target=\"_blank\">according to website Run Around Tech</a>.</p>\n<p>In the video above, U.S. Olympian Apolo Anton Ohno and actress Kerry Washington present Linkin Park with the Alternative Rock Award after reading the band's name from a Galaxy Note II. Product placement at its most visible.</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/10/24/samsung-galaxy-note-ii-review/\">Samsung Galaxy Note II: A Giant Phone That Grows on You [REVIEW]</a></strong></p>\n<p>By replacing old-fashioned envelopes and notecards, Samsung is likely promoting the Galaxy Note II just in time for the holiday gift-buying season. </p>\n<p>What do you&#8230; <br /><a href=\"http://mashable.com/2012/11/18/american-music-awards-galaxy-note/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/galaxy-note-2/\">Galaxy Note 2</a>, <a href=\"http://mashable.com/tag/galaxy-note-ii/\">Galaxy Note II</a>, <a href=\"http://mashable.com/tag/american-music-awards/\">american music awards</a>, <a href=\"http://mashable.com/tag/samsung/\">samsung</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/dHjgNT8_VdDYkedobZJ8-mwgDoE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=o_kY8ncjR6k:aE8UA1CHQFQ:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/o_kY8ncjR6k\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/o_kY8ncjR6k/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502859", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f66000291')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502805"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600029c'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600029b'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Black Ops 2"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Black Ops 2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Black Ops 2", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600029d')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f6600029e'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600029b'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600029d')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call of Duty"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call of Duty"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call of Duty", "_id"=>BSON::ObjectId('50aa48a41d44b60f6600029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002a0'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f6600029b'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600029f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"‘Call of Duty: Black Ops 2′ Sales Smash Records, Makes $500M in One Day [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-ops-2/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-ops-2/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-ops-2/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/blackops.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><iframe frameborder=\"0\" height=\"342\" width=\"608\" scrolling=\"no\" allowfullscreen=\"true\" src=\"http://video.mashable.com/services/player/bcpid1265504713001?bctid=1975704181001&amp;autoStart=false\"></iframe></p>\n<p><em><a href=\"http://mashable.com/follow/topics/call-of-duty-black-ops/\">Call of Duty</a>: Black Ops II</em> delivered the \"biggest entertainment launch of the year,\" after sales of the popular video game hit $500 million worldwide in 24 hours, according to publisher Activision.</p>\n<p>\"We believe <em>Call of Duty</em> is the biggest entertainment launch of the year for the fourth year in a row,\" Activision Blizzard CEO Bobby Kotick <a href=\"http://investor.activision.com/releasedetail.cfm?ReleaseID=721903\" target=\"_blank\">said in a release Friday</a>. \"Life-to-date sales for the <em>Call of Duty</em> franchise have exceeded worldwide theatrical box office receipts for <em>Harry Potter</em> and <em>Star Wars</em>, the two most successful movie franchises of all time.\"</p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/12/call-of-duty-black-ops-2/\">‘Call of Duty: Black Ops 2′ Will Be Holiday Season’s Best-Selling Game, Bookies </a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/black-ops-2/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-ops-2/\">Black Ops 2</a>, <a href=\"http://mashable.com/tag/call-of-duty/\">Call of Duty</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/LMUKc8pYZEmfc1E7fOo9qo_mqTY/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=4uDLi6Bm8KE:IyTuWh66mDU:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/4uDLi6Bm8KE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/4uDLi6Bm8KE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502805", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f6600029b')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1497659"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002a2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gadgets"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gadgets"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gadgets", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002a4'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002a3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gift of the Day"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gift of the Day"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gift of the Day", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002a6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002a5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Music"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Music"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Music", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002a8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002a7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Tech"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Tech"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Tech", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002aa'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002a9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"bluetooth"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"bluetooth"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"bluetooth", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ac'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002ab')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holidays 2012"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ad'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000271')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"speakers"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ae'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000265')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Your Favorite Music Fan Will Treasure This Twistable Wireless Speaker", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/hiddenradio/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/hiddenradio/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/hiddenradio/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://8.mshcdn.com/wp-content/uploads/2012/11/HiddenRadio.png\" alt=\"HiddenRadio\" title=\"HiddenRadio\" width=\"640\" height=\"400\" class=\"aligncenter size-full wp-image-1498393\" /></a></p>\n<p>Give the gift of noise this holiday season. HiddenRadio is a uniquely designed, portable wireless speaker that you can \"unwrap\" each time you use it. </p>\n<p>Rather than traditional button volume adjustment, twist HiddenRadio's outer shell to increase or decrease volume. As you would expect, the volume increase as more of the speaker becomes exposed.</p>\n<p>In a promo video, co-creator John Van Den Nieuwenhuizen call's HiddenRadio \"the world's simplest and most intuitive Bluetooth and radio speaker, ever.\" The device itself looks like a futuristic canister. It comes in three colors -- pure white, graphite black or metallic silver, which matches <a href=\"http://mashable.com/follow/topics/macbook/\">Mac laptops</a>. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/09/25/hiddenradio-review/#91107Outdoor-Shot\">HiddenRadio Wireless Spe</a></strong>&#8230; <br /><a href=\"http://mashable.com/2012/11/18/hiddenradio/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/gadgets/\">Gadgets</a>, <a href=\"http://mashable.com/tag/gift-of-the-day/\">Gift of the Day</a>, <a href=\"http://mashable.com/tag/music/\">Music</a>, <a href=\"http://mashable.com/tag/tech/\">Tech</a>, <a href=\"http://mashable.com/tag/bluetooth/\">bluetooth</a>, <a href=\"http://mashable.com/tag/holidays-2012/\">holidays 2012</a>, <a href=\"http://mashable.com/tag/speakers/\">speakers</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/JHssPXmXCQk8apd6xz9qQXwytec/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=QJ41FmQvibk:xs9a9U4yN6Y:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/QJ41FmQvibk\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/QJ41FmQvibk/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1497659", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002a1')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502719"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002b0'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002af'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Twitter"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Twitter"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Twitter", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002b2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002af'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002b1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"facetime"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"facetime"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"facetime", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002b4'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002af'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002b3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"imessage"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"imessage"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"imessage", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002b6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002af'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002b5')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"iMessage and FaceTime Back Up, Apple Users Complain About Outage on Twitter", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/imessage-facetime-twitter/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/imessage-facetime-twitter/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/facetime-600.jpg\" alt=\"\" title=\"facetime-600\" width=\"600\" height=\"375\" class=\"aligncenter size-full wp-image-1483595\" /></a></p>\n<p><a href=\"http://mashable.com/follow/topics/apple/\">Apple</a> users took to <a href=\"http://mashable.com/follow/topics/twitter/\">Twitter</a> to vent their frustrations over <a href=\"http://mashable.com/follow/topics/imessage/\">iMessage</a> and FaceTime service interruptions.</p>\n<p><a href=\"http://mashable.com/follow/topics/ios/\">iOS</a> devices and <a href=\"http://mashable.com/follow/topics/mac/\">Macs</a> with OS X 10.6.6 or higher experienced a nearly five-hour outage, from 11:45 a.m. to 4:32 p.m. PT (2:45 to 7:45 p.m. ET) after the Cupertino, Calif. company's instant messenger service and video-calling app suffered from downtime.  </p>\n<p><a href=\"http://www.apple.com/support/icloud/systemstatus/\" target=\"_blank\">Apple confirmed the outages</a> on its status page around 1:30 p.m. PT (4:30 p.m. ET), saying that some \"users are unable to use\" use iMessage or place FaceTime calls.</p>\n<p>At the time of writing, the company's system status page says, \"Normal service has been restored.\" It's unclear what caused the downtime. Apple did not immediately&#8230; <br /><a href=\"http://mashable.com/2012/11/18/imessage-facetime-twitter/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/twitter/\">Twitter</a>, <a href=\"http://mashable.com/tag/facetime/\">facetime</a>, <a href=\"http://mashable.com/tag/imessage/\">imessage</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/0aLuolnYR0gKZObGktpsID8po-8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=_K4IZeyVWbE:OTSRv2Fd0NE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/_K4IZeyVWbE\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/_K4IZeyVWbE/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502719", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002af')}])
MONGODB (26ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1500533"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002b8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Top Kids Apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Top Kids Apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Top Kids Apps", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ba'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002b9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"contributors"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002bb'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002bc'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"kids apps"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"kids apps"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"kids apps", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002be'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002bd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Top 5 Apps Your Kids Will Love This Week", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/top-5-kids-apps-4/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/top-5-kids-apps-4/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><em></em></p>\n<p><a href=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\"><a href=\"http://mashable.com/2012/11/18/top-5-kids-apps-4/\"><img class=\"aligncenter size-full wp-image-1339953\" title=\"kid-apps-banner\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://6.mshcdn.com/wp-content/uploads/2012/09/kid-apps-banner.jpg\" alt=\"\" width=\"640\" height=\"100\" /></a></a></p>\n<p>In this day and age, learning a different language -- especially at a young age -- is essential. This week, take a look at an app that helps your kids learn Spanish; plus, a few others sure to get their creative juices flowing. </p>\n<p><strong>SEE ALSO: <a href=\"http://mashable.com/2012/11/02/media-student-performance/\">Teachers Say Media-Use Is Harming Kids' Performance</a></strong></p>\n<p>The folks at <a href=\"http://childrenstech.com/\" target=\"_blank\"><em>Children's Technology Review</em></a> shared with us these 5 top apps from their comprehensive monthly database of kid-tested reviews. The site covers everything from math and counting to reading and phonics. </p>\n<p>Check back next week for more <a href=\"http://mashable.com/follow/topics/top-kids-apps/\">Top Kids Apps</a> from <em>Children's Technology Review</em>.</p>\n<p>More About: <a href=\"http://mashable.com/tag/top-kids-apps/\">Top Kids Apps</a>, <a href=\"http://mashable.com/tag/contributors/\">contributors</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/kids-apps/\">kids apps</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/k4Z_jYsdGdpYB-YFtDzDTB-N53I/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=M_sP0aF6zOI:c8CWjaaUgg4:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/M_sP0aF6zOI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/M_sP0aF6zOI/", "published_on"=>2012-11-19 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1500533", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002b7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1474387"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002c0'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"black friday"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"black friday", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002c2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"deals"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"deals"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"deals", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002c4'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c3')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"holiday 2012"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"holiday 2012"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"holiday 2012", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002c6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"shopping"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"shopping", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002c8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Money-Saving Apps for Black Friday", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/money-saving-appsblack-friday/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\"><img src=\"\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a><a href=\"http://mashable.com/follow/topics/black-friday/\" target=\"_blank\">Black Friday</a> comes once a year and for most of us, once is enough. The sleep-sucking mega shopping day has morphed into a major shopping weekend. With the growing popularity of <a href=\"http://mashable.com/2012/10/31/shoppers-retailers-cyber-monday/\" target=\"_blank\">Cyber Monday</a>, and brick-and-mortar retailers clamoring for a piece of the pie by offering deals all weekend, it has turned into a four day shopping extravaganza. </p>\n<p>For those of you who plan to leave your Thanksgiving parties early to hit the stores at midnight, or maybe wake-up at the crack of dawn with a turkey hangover, you know how packed the stores can be with shoppers, but the deals make it worthwhile. </p>\n<p>To make your shopping trip as efficient and hassle-free as possible, use these apps to find the items you'&#8230; <br /><a href=\"http://mashable.com/2012/11/18/money-saving-appsblack-friday/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/deals/\">deals</a>, <a href=\"http://mashable.com/tag/holiday-2012/\">holiday 2012</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/ZIEvYkGslkLci4rG1-jZwOIIopE/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=-lh-h83Hfdw:k55GIlZ3viw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/-lh-h83Hfdw\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/-lh-h83Hfdw/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1474387", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002bf')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1501469"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ca'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Drobo Mini"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Drobo Mini"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Drobo Mini", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002cc'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002cb')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Hard Drives"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Hard Drives"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Hard Drives", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ce'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002cd')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Thunderbolt"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Thunderbolt"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Thunderbolt", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d0'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002cf')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"backup"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"backup"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"backup", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002d1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d3'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Drobo Mini, the Sophisticated Backup System In a Small Package [REVIEW]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/drobo-mini/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/drobo-mini/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/drobo-mini/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/drobo-mini600.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>The Drobo Mini is a backup system that's scarcely larger than your hand, and with its Thunderbolt ports, it can back up boatloads of data at blazing speed.</p>\n<p>More About: <a href=\"http://mashable.com/tag/drobo-mini/\">Drobo Mini</a>, <a href=\"http://mashable.com/tag/hard-drives/\">Hard Drives</a>, <a href=\"http://mashable.com/tag/thunderbolt/\">Thunderbolt</a>, <a href=\"http://mashable.com/tag/backup/\">backup</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m8zg01SLZ50b0jJsvSteqfUJrZo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=r4vs_Z3Mil0:WYSh2QK_HC0:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/r4vs_Z3Mil0\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/r4vs_Z3Mil0/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1501469", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002c9')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1499833"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d5'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Jobs"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f66000205')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"features"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d7'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"job search series"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600027b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"mashable"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002d9'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001f9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"pinterest"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002da'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f66000242')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"recruit"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"recruit"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"recruit", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002db')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002dc'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002db')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"How to Use Pinterest to Recruit", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\"><img style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" src=\"http://4.mshcdn.com/wp-content/uploads/2012/04/pinterest-pinboard-600-275x171.jpg\" alt=\"pinterest-pinboard-600\" title=\"pinterest-pinboard-600\" width=\"275\" height=\"171\" class=\"alignright size-medium wp-image-1026479\" /></a></p>\n<p>We are a visual society. We enjoy looking at beautiful and interesting things. A <a href=\"http://www.slideshare.net/performics_us/performics-life-on-demand-2012-summary-deck\">2012 study by ROI Research</a> confirmed this. They found when users engage friends on social media sites, it's the pictures they enjoyed the most. If brands post pictures over any other media, 54% of respondents said they’re more likely to engage.</p>\n<p>If this is how we respond to our friends and the companies we like, then why wouldn’t we want it to be the same for jobs? Instead of just telling people about a job or making them read a job description, we now have the ability to show people the job, the company, and the corporate culture using the social media platform Pinterest.</p>\n<p>The Advantages of P&#8230; <br /><a href=\"http://mashable.com/2012/11/18/how-to-use-pinterest-to-recruit/\" >Continue reading...</a></p>\n<p>More About: <a href=\"http://mashable.com/tag/jobs/\">Jobs</a>, <a href=\"http://mashable.com/tag/features/\">features</a>, <a href=\"http://mashable.com/tag/job-search-series/\">job search series</a>, <a href=\"http://mashable.com/tag/mashable/\">mashable</a>, <a href=\"http://mashable.com/tag/pinterest/\">pinterest</a>, <a href=\"http://mashable.com/tag/recruit/\">recruit</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/idMzRKDqYxP6C7sWCa0ftTz6FQ4/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=Kxg0b61g8pI:fcYdaDW2SJ8:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/Kxg0b61g8pI\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/Kxg0b61g8pI/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1499833", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002d4')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502593"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002de'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002dd'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"black friday"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002df'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002dd'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c1')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"retail"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"retail"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"retail", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002e1'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002dd'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002e0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"shopping"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002e2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002dd'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002c7')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Many Black Friday Shoppers to Begin Before 3 A.M. [INFOGRAPHIC]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/black-friday-shopping/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/black-friday-shopping/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/black-friday-shopping/\"><img src=\"http://9.mshcdn.com/wp-content/uploads/2012/11/target-shopping-cart.png\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Which do you prefer -- Black Friday or Cyber Monday? Is Black Friday as money-saving as it used to be? Find out what your fellow shoppers think.</p>\n<p>More About: <a href=\"http://mashable.com/tag/black-friday/\">black friday</a>, <a href=\"http://mashable.com/tag/retail/\">retail</a>, <a href=\"http://mashable.com/tag/shopping/\">shopping</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/y0i_uT44knIgtBsf197N4VA6pdg/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=SH2JdkxepvQ:nxtxb1usulw:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/SH2JdkxepvQ\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/SH2JdkxepvQ/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502593", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002dd')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502519"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002e4'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Call Me Maybe"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Call Me Maybe"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Call Me Maybe", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002e6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002e5')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Carly Rae Jepsen"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Carly Rae Jepsen"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Carly Rae Jepsen", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002e8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002e7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Entertainment"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Entertainment"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Entertainment", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ea'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002e9')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"viral videos"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002eb'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025f')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Man Controls ‘Call Me Maybe’ With His Actual Heart", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/call-me-maybe-heartbeat/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/call-me-maybe-heartbeat/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/callmemaybe-heart.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>This is what happens when you control the tempo of \"Call Me Maybe\" with your heartbeat.</p>\n<p>More About: <a href=\"http://mashable.com/tag/call-me-maybe/\">Call Me Maybe</a>, <a href=\"http://mashable.com/tag/carly-rae-jepsen/\">Carly Rae Jepsen</a>, <a href=\"http://mashable.com/tag/entertainment/\">Entertainment</a>, <a href=\"http://mashable.com/tag/viral-videos/\">viral videos</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/u7sYJ3vQWrUIbjNotIlNY6mMm9k/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1-9B7hN2x8Q:-mfNL4ZTpuE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1-9B7hN2x8Q\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1-9B7hN2x8Q/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502519", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002e3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502393"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ed'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Gaming"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Gaming"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Gaming", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ef'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002ee')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Nintendo"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Nintendo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Nintendo", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f1'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002f0')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Video"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f2'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600025a')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Wii U"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Wii U"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Wii U", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f4'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002f3')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Meet the Super Fan Who Waited in Line for a Month for a Wii U [VIDEO]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/wii-u-first-in-line/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/wii-u-first-in-line/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/wii-u-first-in-line/\"><img src=\"http://6.mshcdn.com/wp-content/uploads/2012/11/Triforce-Johnson-640.jpg\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>Triforce Johnson spent almost a month outside the Nintendo World store to be first in line for the Wii U launch.</p>\n<p>More About: <a href=\"http://mashable.com/tag/gaming/\">Gaming</a>, <a href=\"http://mashable.com/tag/nintendo/\">Nintendo</a>, <a href=\"http://mashable.com/tag/video/\">Video</a>, <a href=\"http://mashable.com/tag/wii-u/\">Wii U</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/m5hGY6OrWIChJcJIMX4qBUDYxGM/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=1qg-znEVZxo:h22u9pWIl4U:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/1qg-znEVZxo\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/1qg-znEVZxo/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502393", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002ec')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:guid=>"http://mashable.com/?p=1502543"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Uncategorized"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f6'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5'), "category_id"=>BSON::ObjectId('50aa48a31d44b60f660001ed')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"Sunday Comics"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"Sunday Comics"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"Sunday Comics", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f8'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002f7')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"apple"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002f9'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600028b')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"investors"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"investors"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"name"=>"investors", "_id"=>BSON::ObjectId('50aa48a41d44b60f660002fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002fb'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f660002fa')}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}, {:_id=>1}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({:name=>"trending"}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002fc'), "article_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5'), "category_id"=>BSON::ObjectId('50aa48a41d44b60f6600023c')}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"Is Apple Bipolar? [SUNDAY COMICS]", "deck"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>", "story"=>"<div style=\"float:right;margin-bottom:10px;margin-left:5px;\"><a target=\"_blank\" type=\"box_count\" name=\"fb_share\" href=\"http://www.facebook.com/sharer.php?u=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&src=sp\" style=\"text-decoration: none;\"><img style=\"border:none;margin-right:5px;\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/share-buttons/fb.jpg\" align=\"right\" /></a><br />\n<a target=\"_blank\" href=\"http://twitter.com/share?url=http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/&amp;via=mashable\"><img style=\"border:none;margin-right:5px;\" width=\"51\" height=\"51\" src=\"http://6.mshcdn.com/wp-content/themes/v7/img/tweet.jpg\" align=\"right\"/></a></div>\n<p><a href=\"http://mashable.com/2012/11/18/is-apple-bipolar-sunday-comics/\"><img src=\"http://4.mshcdn.com/wp-content/uploads/2012/11/1769mashablethumb.gif\" style=\"max-width:575px;height:auto;margin:0 auto 10px auto;display:block;\" /></a>With Apple's stock going up and down like a roller coaster, investors are skittish. Is the company bipolar? Isn't there medicine for this?</p>\n<p>More About: <a href=\"http://mashable.com/tag/sunday-comics/\">Sunday Comics</a>, <a href=\"http://mashable.com/tag/apple/\">apple</a>, <a href=\"http://mashable.com/tag/investors/\">investors</a>, <a href=\"http://mashable.com/tag/trending/\">trending</a></p>\n<p><a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>\n<a href=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/da\"><img src=\"http://feedads.g.doubleclick.net/~at/O-9Qy0nobdsGxLw-fVZ34tMFOnA/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"feedflare\">\n<a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:D7DqB2pKExk\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:qj6IDK7rITs\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=qj6IDK7rITs\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_e0tkf89iUM\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=_e0tkf89iUM\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:gIN9vFwOqvQ\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:P0ZAIrC63Ok\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=P0ZAIrC63Ok\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:I9og5sOYxJI\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=I9og5sOYxJI\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:CC-BsrAYo0A\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?d=CC-BsrAYo0A\" border=\"0\"></img></a> <a href=\"http://feeds.mashable.com/~ff/Mashable?a=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\"><img src=\"http://feeds.feedburner.com/~ff/Mashable?i=MO4j9uWcB1c:iseyZq41zCE:_cyp7NeR2Rw\" border=\"0\"></img></a>\n</div><img src=\"http://feeds.feedburner.com/~r/Mashable/~4/MO4j9uWcB1c\" height=\"1\" width=\"1\"/>", "url"=>"http://feeds.mashable.com/~r/Mashable/~3/MO4j9uWcB1c/", "published_on"=>2012-11-18 00:00:00 UTC, "guid"=>"http://mashable.com/?p=1502543", "is_published"=>false, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0, "_id"=>BSON::ObjectId('50aa48a41d44b60f660002f5')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user21@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002fd'), "name"=>"user22", "email"=>"user21@example.com", "role"=>"reader", "password_salt"=>"$2a$10$x1ot9MFh9xCTfKPzGHw2iO", "password_hash"=>"$2a$10$x1ot9MFh9xCTfKPzGHw2iOWN3nCs1m43v.tJIJww6gCBh5f.1I2oq"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
Completed 200 OK in 43ms (Views: 42.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user21@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user21@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48a41d44b60f660002fd')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user22@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002fe'), "name"=>"user23", "email"=>"user22@example.com", "role"=>"reader", "password_salt"=>"$2a$10$CRrwishwJRF703z2KGjRs.", "password_hash"=>"$2a$10$CRrwishwJRF703z2KGjRs.M81ATX.jgQd9N0muYQAVZdb6qv4SBjm"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user22@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user22@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48a41d44b60f660002fe')}).limit(-1)
Completed 200 OK in 6ms (Views: 4.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user23@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f660002ff'), "name"=>"user24", "email"=>"user23@example.com", "role"=>"reader", "password_salt"=>"$2a$10$59OMVOLmezLIeIZiMho8bu", "password_hash"=>"$2a$10$59OMVOLmezLIeIZiMho8buonrPaWUXUIP4z9QJ2uuDYLuOnzNQ3BC"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user24@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000301'), "name"=>"user25", "email"=>"user24@example.com", "role"=>"reader", "password_salt"=>"$2a$10$zs0Wb5.J6xfyApD8sWCiku", "password_hash"=>"$2a$10$zs0Wb5.J6xfyApD8sWCiku0Q6TOECRWHRoBVIT7Fq0P5dtE.gICqC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:36 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user24@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:36 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user24@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user25@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a41d44b60f66000302'), "name"=>"user26", "email"=>"user25@example.com", "role"=>"reader", "password_salt"=>"$2a$10$h4zPy8tXMncedaaCOWE5H.", "password_hash"=>"$2a$10$h4zPy8tXMncedaaCOWE5H.xGnMX7gpC3ZUEptsqqCwSxCuI5UZlY."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user25@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user25@example.com"}).limit(-1)
Completed 200 OK in 73ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user26@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000303'), "name"=>"user27", "email"=>"user26@example.com", "role"=>"reader", "password_salt"=>"$2a$10$IYB01dtsXi7ISlBlaEbtpe", "password_hash"=>"$2a$10$IYB01dtsXi7ISlBlaEbtpexv0pc9fSk22GYNWLrFOQLgF/8DXqWMK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user27@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000304'), "name"=>"user28", "email"=>"user27@example.com", "role"=>"reader", "password_salt"=>"$2a$10$oxQ9UktOfRpW/l9N6USwau", "password_hash"=>"$2a$10$oxQ9UktOfRpW/l9N6USwaueTSROn1CzqC8RbIRNY/Q6UrAgh3Dmke"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user28@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000305'), "name"=>"user29", "email"=>"user28@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hdsLT4M/tpupSeCGqseJ0.", "password_hash"=>"$2a$10$hdsLT4M/tpupSeCGqseJ0.5Ec9O0H61R7XxdtPGQNPwJz82swTbz2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user28@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user28@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48a51d44b60f66000305')}).limit(-1)
Completed 200 OK in 5ms (Views: 4.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user29@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000306'), "name"=>"user30", "email"=>"user29@example.com", "role"=>"reader", "password_salt"=>"$2a$10$FaNDKQo.1Yjc0TZLBT27Au", "password_hash"=>"$2a$10$FaNDKQo.1Yjc0TZLBT27Au3uDR7tDMkBPfMADK8kYirf5EYDz5j.m"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 3.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user30@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000308'), "name"=>"user31", "email"=>"user30@example.com", "role"=>"reader", "password_salt"=>"$2a$10$gFQzyxY60B3rA1cELRNwfe", "password_hash"=>"$2a$10$gFQzyxY60B3rA1cELRNwfekb.wMD3I8GCiL3EfO9DwCCVjQh8mj4e"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user30@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user30@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa48a51d44b60f66000308')}).limit(-1)
Completed 200 OK in 5ms (Views: 4.3ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 5ms (Views: 4.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa489d1d44b60f66000099')})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa489d1d44b60f6600009a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest_unique.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agency_unique", "feed_url"=>"http://urltest_unique.com", "_id"=>BSON::ObjectId('50aa48a51d44b60f6600030c')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f6600030c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"url"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000310'), "name"=>"2Agency", "feed_url"=>"http://urltestx2.com"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltestx2.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000310')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48491d44b60f63000550')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000315'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000315')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000316')}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000316')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo2"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000317'), "slave"=>"Esclavo2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000317')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000318'), "boss"=>"Jefe2"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000318')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['chiefs'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031a'), "slave"=>"Esclavo", "boss"=>"Jefe"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"chiefs", "query"=>{:slave=>"Esclavo"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031c'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031c')}, {"$set"=>{"guid"=>"50aa48a51d44b60f6600031c"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (3ms) rails3_mongoid_devise_test['articles'].find({:is_published=>false})
MONGODB [DEBUG] cursor.refresh() for cursor 1244056785450157941
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 94ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aa48a51d44b60f6600031d", "headline"=>"Article 3", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031d'), "headline"=>"Article 3", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031d')}, {"$set"=>{"guid"=>"50aa48a51d44b60f6600031d"}})
Redirected to http://www.example.com/articles/50aa48a51d44b60f6600031d
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48a51d44b60f6600031d" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48a51d44b60f6600031d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48a51d44b60f6600031d')}).limit(-1)
Completed 200 OK in 48ms (Views: 46.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031f'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f6600031f')}, {"$set"=>{"guid"=>"50aa48a51d44b60f6600031f"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.8ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa48a51d44b60f66000321'), "headline"=>"i get published at once, 7", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f66000321')}, {"$set"=>{"guid"=>"50aa48a51d44b60f66000321"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 6ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 6ms (Views: 4.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aa48a51d44b60f66000324'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f66000324')}, {"$set"=>{"guid"=>"50aa48a51d44b60f66000324"}})
Redirected to http://www.example.com/articles/50aa48a51d44b60f66000324
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48a51d44b60f66000324" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48a51d44b60f66000324"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48a51d44b60f66000324')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48a51d44b60f66000326')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48a51d44b60f66000326')})
Completed 200 OK in 17ms (Views: 15.8ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aa48a51d44b60f66000327'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa48a51d44b60f66000327')}, {"$set"=>{"guid"=>"50aa48a51d44b60f66000327"}})
Redirected to http://www.example.com/articles/50aa48a51d44b60f66000327
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa48a51d44b60f66000327" for 127.0.0.1 at 2012-11-19 11:56:37 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa48a51d44b60f66000327"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 14:55:37 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa48a51d44b60f66000327')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 11:56:38 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 14:55:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48a61d44b60f66000329')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48a61d44b60f66000329')})
Completed 200 OK in 14ms (Views: 12.3ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 11:56:38 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 14:55:38 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa48a61d44b60f6600032a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa48a61d44b60f6600032a')})
Completed 200 OK in 15ms (Views: 13.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (2ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600027e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000282')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000284')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000287')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600028b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600028d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600028f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000299')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600029d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002a3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002a7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002a9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600022e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000238')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600023a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600023c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000240')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000242')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000246')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000248')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600024c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600024e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000252')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000254')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000256')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600025a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000263')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000265')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600026a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600026c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600026f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600006d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600006f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000071')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600007a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600007d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600007e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000081')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000085')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000087')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000088')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f6600008a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001ed')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001f1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001f3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001f5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001f7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001f9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001fb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001fd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f660001ff')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000201')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000205')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000207')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000209')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f6600020b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f6600020d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f6600020f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000213')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000215')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a31d44b60f66000217')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000219')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600021b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600021d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600021f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000223')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000225')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000229')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000233')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600024a')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600025c')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600025f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000271')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000273')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000279')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600027b')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000293')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000295')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000297')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f6600029f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002a5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002ab')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002b1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002b3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002b5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002b9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002bd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002c1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002c3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002c5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002c7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002cb')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002cd')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002cf')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002d1')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002db')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002e0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002e5')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002e7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002e9')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002ee')})
MONGODB [DEBUG] cursor.refresh() for cursor 6677946230350006442
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002f0')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002f3')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002f7')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002fa')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"category"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48a61d44b60f6600032b'), "name"=>"category"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a61d44b60f6600032b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"aNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48a61d44b60f6600032d'), "name"=>"aNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].remove({:_id=>BSON::ObjectId('50aa48a61d44b60f6600032d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>nil}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['categories'].insert([{"_id"=>BSON::ObjectId('50aa48a61d44b60f66000330'), "name"=>"ThisNewCategory"}])
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"categories", "query"=>{:name=>"ThisNewCategory"}, "fields"=>nil}).limit(-1)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (1ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa5b0a9df8380faf000001'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.9ms)
  Rendered news_agencies/index.html.erb within layouts/application (12.7ms)
Completed 200 OK in 78ms (Views: 75.6ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aa5b0a9df8380faf000001" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aa5b0a9df8380faf000001"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000001')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000001')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/index.html.erb within layouts/application (0.6ms)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa5b0a9df8380faf000002'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa5b0a9df8380faf000002/edit" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aa5b0a9df8380faf000002"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000002')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0a9df8380faf000002')})
  Rendered news_agencies/_form.html.erb (10.3ms)
Completed 200 OK in 15ms (Views: 13.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000002')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa5b0a9df8380faf000003'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 40ms (Views: 38.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa5b0a9df8380faf000003" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa5b0a9df8380faf000003"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 16:14:06 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000003')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa5b0a9df8380faf000003')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 13:15:06 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf000005')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 9ms (Views: 7.2ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aa5b0b9df8380faf000006')}])
Redirected to http://www.example.com/news_agencies/50aa5b0b9df8380faf000006
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aa5b0b9df8380faf000006" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aa5b0b9df8380faf000006"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000006')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000006')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf000008')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 8ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf000009')})
  Rendered news_agencies/_form.html.erb (5.1ms)
Completed 200 OK in 9ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00000a'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf00000b')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 45ms (Views: 43.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf00000c')})
  Rendered news_agencies/_form.html.erb (5.2ms)
Completed 200 OK in 9ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf00000a')})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf00000e')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf000010')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 8ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aa5b0b9df8380faf000011')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 10ms (Views: 7.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.9ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000013')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000013')})
Completed 200 OK in 57ms (Views: 55.4ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000014')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000014')})
Completed 200 OK in 16ms (Views: 12.9ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (1ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000015')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aa5b0b9df8380faf000015')})
Completed 200 OK in 50ms (Views: 48.5ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aa5b0b9df8380faf000016'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000016')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf000016"}})
Redirected to http://www.example.com/articles/50aa5b0b9df8380faf000016
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa5b0b9df8380faf000016" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa5b0b9df8380faf000016"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000016')}).limit(-1)
Completed 200 OK in 15ms (Views: 13.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aa5b0b9df8380faf000018'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000018')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf000018"}})
Redirected to http://www.example.com/articles/50aa5b0b9df8380faf000018
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa5b0b9df8380faf000018" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa5b0b9df8380faf000018"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000018')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001a'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001a')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf00001a"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 2ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aa5b0b9df8380faf00001b", "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001b'), "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001b')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf00001b"}})
Redirected to http://www.example.com/articles/50aa5b0b9df8380faf00001b
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aa5b0b9df8380faf00001b" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aa5b0b9df8380faf00001b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf00001b')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001d'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf00001d')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf00001d"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.8ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000020'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000020')}, {"$set"=>{"guid"=>"50aa5b0b9df8380faf000020"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000022'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$UZEREgFYbch5aWOQGjrJZ.", "password_hash"=>"$2a$10$UZEREgFYbch5aWOQGjrJZ.JeYNuorbYc922exLHQx3o7UFgXqmQce"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Completed 200 OK in 5ms (Views: 4.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000022')}).limit(-1)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000024'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$WhSihY2FySIByFqNEb.z2u", "password_hash"=>"$2a$10$WhSihY2FySIByFqNEb.z2uUeInwK.q9bZsJ0auEMby7ogypXT2POK"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000026'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$F1pb/0db6e9neDSAYl/XiO", "password_hash"=>"$2a$10$F1pb/0db6e9neDSAYl/XiOAUc9z73bfFJdpPT2UszwVUE272rUg6K"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Completed 200 OK in 41ms (Views: 39.7ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user3@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user3@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 70ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000026')}).limit(-1)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000027'), "name"=>"user4", "email"=>"user4@example.com", "role"=>"reader", "password_salt"=>"$2a$10$dYOaK3u6LvzDfvc48UgkXO", "password_hash"=>"$2a$10$dYOaK3u6LvzDfvc48UgkXOPYqm0nBGjrJ5ay/B89PvoWlXHgStl5G"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 13:15:07 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 16:14:07 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0b9df8380faf000028'), "name"=>"user5", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$JqEW2MJtf2IFWQ3OGxvbRO", "password_hash"=>"$2a$10$JqEW2MJtf2IFWQ3OGxvbROG2eS89ETovuastUhEloErW0fPbN19PK"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user5@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user5@example.com"}).limit(-1)
Completed 200 OK in 72ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf000029'), "name"=>"user6", "email"=>"user6@example.com", "role"=>"reader", "password_salt"=>"$2a$10$SdTDhzeO45EQjsltiXMR9e", "password_hash"=>"$2a$10$SdTDhzeO45EQjsltiXMR9eKCTUH2XfZW3P2XhTPpQAimUB9QunuW2"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 5.8ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00002b'), "name"=>"user7", "email"=>"user7@example.com", "role"=>"reader", "password_salt"=>"$2a$10$YfYvfJHxSOGq4wgBfTStGO", "password_hash"=>"$2a$10$YfYvfJHxSOGq4wgBfTStGOMj.1pqf8TTZyytMT7sHAXz9RlByKKkW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user7@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user7@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00002c'), "name"=>"user8", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$DnItXNxCw05LEhXDin8Dke", "password_hash"=>"$2a$10$DnItXNxCw05LEhXDin8Dke4b8/.FgR13AsP/Xp55jALhZQkE.iBXi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00002d'), "name"=>"user9", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$WoXOO4Biwhu/W2EHj7pi2e", "password_hash"=>"$2a$10$WoXOO4Biwhu/W2EHj7pi2e4e83w6APjruE2G.DL7INgJhttOaJrE2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 40ms (Views: 39.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002d')}).limit(-1)
Completed 200 OK in 7ms (Views: 6.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00002e'), "name"=>"user10", "email"=>"user10@example.com", "role"=>"reader", "password_salt"=>"$2a$10$UpQwCRwoTOwdueBDE1gnHO", "password_hash"=>"$2a$10$UpQwCRwoTOwdueBDE1gnHOuouJ7ZERkD0pU3OMttNwQLz.0LqON9i"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002e')}).limit(-1)
Completed 200 OK in 8ms (Views: 6.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa48971d44b60f66000092')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00002f'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aa5b0c9df8380faf00002f" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aa5b0c9df8380faf00002f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002f')})
Redirected to http://www.example.com/areas
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf000030'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa5b0c9df8380faf000030/edit" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aa5b0c9df8380faf000030"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000030')}).limit(-1)
  Rendered areas/_form.html.erb (2.1ms)
Completed 200 OK in 7ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000030')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf000031'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aa5b0c9df8380faf000031" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa5b0c9df8380faf000031"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000031')}).limit(-1)
Completed 200 OK in 43ms (Views: 40.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000031')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aa5b0c9df8380faf000034')}])
Redirected to http://www.example.com/areas/50aa5b0c9df8380faf000034
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aa5b0c9df8380faf000034" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aa5b0c9df8380faf000034"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000034')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000034')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 5ms (Views: 3.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf000038'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000038')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 13:15:08 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 16:14:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0c9df8380faf00003e'), "name"=>"user11", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$E7QGNY0j6Jn4tkPqAwqlfu", "password_hash"=>"$2a$10$E7QGNY0j6Jn4tkPqAwqlfuKuDjLadqlnxpvpNqE7xrBkDN2E1cMR."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 71ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00003e')}).limit(-1)
Completed 200 OK in 7ms (Views: 6.2ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00003e')}).limit(-1)
Completed 200 OK in 7ms (Views: 6.3ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 6ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002fd')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002fe')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f660002ff')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000301')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a41d44b60f66000302')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000303')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000304')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000305')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000306')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa48a51d44b60f66000308')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000022')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000024')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000026')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000027')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0b9df8380faf000028')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf000029')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00002e')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0c9df8380faf00003e')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user12", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 9ms (Views: 6.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 45ms (Views: 43.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user13", "email"=>"user13@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0d9df8380faf000049'), "name"=>"user14", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$f4KB/ls7VkS4vGUOuveM4O", "password_hash"=>"$2a$10$f4KB/ls7VkS4vGUOuveM4O329nLScHwp6EO.mz1Z9o0d7oBp2Yr8u"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 5ms (Views: 3.8ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aa5b0d9df8380faf000049" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aa5b0d9df8380faf000049"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0d9df8380faf000049')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0d9df8380faf000049')})
Redirected to http://www.example.com/users
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0d9df8380faf00004b'), "name"=>"user15", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$N23M0Ktk4gHWCtnpSvLkV.", "password_hash"=>"$2a$10$N23M0Ktk4gHWCtnpSvLkV.9acxaUWkqbZitnL.Fq0Kam0FICj3I8W"}])


Started GET "/users/50aa5b0d9df8380faf00004b?method=delete" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aa5b0d9df8380faf00004b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0d9df8380faf00004b')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0d9df8380faf00004b')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user16", "email"=>"user16@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0d9df8380faf000054'), "name"=>"user17", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$6uf/2Kirv6JQE1j/w.1aje", "password_hash"=>"$2a$10$6uf/2Kirv6JQE1j/w.1ajexTJHt2P1lRre5Gwi8HgFWcobqBcBIiq"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/users/50aa5b0d9df8380faf000054" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa5b0d9df8380faf000054"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0d9df8380faf000054')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0d9df8380faf000054')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aa5b0d9df8380faf000056'), "name"=>"user18", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$HPq2fQmuktqpcApA4z.wX.", "password_hash"=>"$2a$10$HPq2fQmuktqpcApA4z.wX.9wnrh/SDF/cH5j7PACxOcWREAdQYcx."}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 43ms (Views: 41.7ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user18", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0d9df8380faf000056')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user19", "email"=>"user18@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user19", "email"=>"user18@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aa5b0d9df8380faf00005c'), "password_salt"=>"$2a$10$VyukLJFSd2FV7eqJnvUImu", "password_hash"=>"$2a$10$VyukLJFSd2FV7eqJnvUImuDWx6JhEwmKkfaJfrygQLx1wIIKBjxYi"}])
Redirected to http://www.example.com/users/50aa5b0d9df8380faf00005c
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/users/50aa5b0d9df8380faf00005c" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aa5b0d9df8380faf00005c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0d9df8380faf00005c')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aa5b0d9df8380faf00005c')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aa5b0d9df8380faf00005c')})


Started GET "/users" for 127.0.0.1 at 2012-11-19 13:15:09 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 16:14:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (1934ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:48 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (24ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:48 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/index.html.erb within layouts/application (4.2ms)
Completed 200 OK in 154ms (Views: 107.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (29ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c0000003')})
  Rendered news_agencies/_form.html.erb (144.0ms)
Completed 200 OK in 193ms (Views: 192.0ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c0000004')})
  Rendered news_agencies/_form.html.erb (5.5ms)
Completed 200 OK in 11ms (Views: 7.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 39ms (Views: 37.8ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c0000006')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c0000008')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 8ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c0000009')})
  Rendered news_agencies/_form.html.erb (5.3ms)
Completed 200 OK in 9ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ad1d44b611c000000b')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 8ms (Views: 6.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aac4ad1d44b611c000000c')}])
Redirected to http://www.example.com/news_agencies/50aac4ad1d44b611c000000c
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac4ad1d44b611c000000c" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac4ad1d44b611c000000c"}
MONGODB (59ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac4ad1d44b611c000000c')}).limit(-1)
Completed 200 OK in 85ms (Views: 22.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac4ad1d44b611c000000c')})
MONGODB (35ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac4ad1d44b611c000000d'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:45:49 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (152ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:44:49 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ae1d44b611c000000e')})
  Rendered news_agencies/_form.html.erb (43.6ms)
Completed 200 OK in 199ms (Views: 45.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ae1d44b611c000000f')})
  Rendered news_agencies/_form.html.erb (5.2ms)
Completed 200 OK in 9ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac4ad1d44b611c000000d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000010'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.5ms)
Completed 200 OK in 17ms (Views: 16.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac4ae1d44b611c0000010" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c0000010"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000010')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000010')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000011'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac4ae1d44b611c0000011/edit" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c0000011"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000011')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac4ae1d44b611c0000011')})
  Rendered news_agencies/_form.html.erb (5.4ms)
Completed 200 OK in 21ms (Views: 19.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000011')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000012'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aac4ae1d44b611c0000012" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c0000012"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000012')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000012')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000013'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000013')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c0000013"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#index as HTML
MONGODB (87ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (59.6ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 203ms (Views: 114.6ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 7ms (Views: 6.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aac4ae1d44b611c0000016", "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000016'), "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000016')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c0000016"}})
Redirected to http://www.example.com/articles/50aac4ae1d44b611c0000016
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac4ae1d44b611c0000016" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c0000016"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000016')}).limit(-1)
Completed 200 OK in 19ms (Views: 17.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000018'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000018')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c0000018"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 2ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000019'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000019')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c0000019"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB [DEBUG] Cursor#close 7819799269259364809
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 14ms (Views: 12.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aac4ae1d44b611c000001b'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c000001b')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c000001b"}})
Redirected to http://www.example.com/articles/50aac4ae1d44b611c000001b
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac4ae1d44b611c000001b" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c000001b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c000001b')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (1.1ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c000001d')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c000001d')})
Completed 200 OK in 93ms (Views: 90.9ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aac4ae1d44b611c000001e'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac4ae1d44b611c000001e')}, {"$set"=>{"guid"=>"50aac4ae1d44b611c000001e"}})
Redirected to http://www.example.com/articles/50aac4ae1d44b611c000001e
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac4ae1d44b611c000001e" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac4ae1d44b611c000001e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c000001e')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c0000020')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c0000020')})
Completed 200 OK in 14ms (Views: 12.6ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c0000021')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac4ae1d44b611c0000021')})
Completed 200 OK in 53ms (Views: 50.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4ae1d44b611c0000022'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hHXpQaIyZN1L35d9zPjRCO", "password_hash"=>"$2a$10$hHXpQaIyZN1L35d9zPjRCObjN7ZYQcKJCYdUybMimWcp83W3rZ1Iu"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
Completed 200 OK in 33ms (Views: 31.4ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB [DEBUG] Cursor#close 4991391583460936583
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000022')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:50 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:50 UTC}})
MONGODB [DEBUG] Cursor#close 4231494689205799832
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000022')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB [DEBUG] Cursor#close 8904496511154408358
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (1.1ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 28ms (Views: 26.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4ae1d44b611c0000022')})


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 36ms (Views: 34.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c0000026'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$AP3G2xtuMPgeshIH0ubiR.", "password_hash"=>"$2a$10$AP3G2xtuMPgeshIH0ubiR.F587.2qtioxR4KmfRGdLQLPJkqOPRNS"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 5ms (Views: 3.9ms | ActiveRecord: 0.0ms)


Started GET "/users/50aac4af1d44b611c0000026" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac4af1d44b611c0000026"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4af1d44b611c0000026')}).limit(-1)
Completed 200 OK in 17ms (Views: 14.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c0000026')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c0000028'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$XRimRYC/VBcnuhP/9zMsFe", "password_hash"=>"$2a$10$XRimRYC/VBcnuhP/9zMsFeo9JWnKvIToWz5y0aNVd7JoKJkSVvnYe"}])


Started GET "/users/50aac4af1d44b611c0000028?method=delete" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aac4af1d44b611c0000028"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4af1d44b611c0000028')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c0000028')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c000002a'), "name"=>"user4", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$1YyrtYF6aJFITEURnoii2u", "password_hash"=>"$2a$10$1YyrtYF6aJFITEURnoii2uxy7j5B3CAnnpFR/OAEHwTSDQxBKrFBi"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 24ms (Views: 22.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user4", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c000002a')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 45ms (Views: 44.0ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user5", "email"=>"user4@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user6", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 45ms (Views: 43.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user7", "email"=>"user6@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 44ms (Views: 42.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user8", "email"=>"user7@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user8", "email"=>"user7@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aac4af1d44b611c000003f'), "password_salt"=>"$2a$10$WioTYV9w0/mdTrCrOnEW.u", "password_hash"=>"$2a$10$WioTYV9w0/mdTrCrOnEW.uKxnpeID/uVqfAZhIZ.g8Ar2R6meo8Ce"}])
Redirected to http://www.example.com/users/50aac4af1d44b611c000003f
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/users/50aac4af1d44b611c000003f" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac4af1d44b611c000003f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4af1d44b611c000003f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4af1d44b611c000003f')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c000003f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c0000041'), "name"=>"user9", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$5MVqdiFyA0rk8Pf2Agkjx.", "password_hash"=>"$2a$10$5MVqdiFyA0rk8Pf2Agkjx.o6nypUr1vG/q3hi6w.OSAK2HXOrPbme"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aac4af1d44b611c0000041" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aac4af1d44b611c0000041"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4af1d44b611c0000041')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c0000041')})
Redirected to http://www.example.com/users
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c0000042'), "name"=>"user10", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$h5XiBUvSCuEt.OYD8dD/ge", "password_hash"=>"$2a$10$h5XiBUvSCuEt.OYD8dD/geU6G/O.0t3T7z4cdLI.330Xh7ctdhn2G"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:51 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:51 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Completed 200 OK in 75ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4af1d44b611c0000043'), "name"=>"user11", "email"=>"user10@example.com", "role"=>"reader", "password_salt"=>"$2a$10$mSsnBMuXIUUqVz4vypPiSO", "password_hash"=>"$2a$10$mSsnBMuXIUUqVz4vypPiSOReOOpivf0cBugFGKXaSfUcaJL8w.aMy"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB [DEBUG] Cursor#close 5906781382051385287
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c0000045'), "name"=>"user12", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$rNcyheN3ppDXnLpSocxvIu", "password_hash"=>"$2a$10$rNcyheN3ppDXnLpSocxvIuTpD8JiSJWLv8IYZP.r13esNfmh.Zsz2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB [DEBUG] Cursor#close 7438183565219614875
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4b01d44b611c0000045')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c0000046'), "name"=>"user13", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$GCxSxdyGozl5CY6dRUe6R.", "password_hash"=>"$2a$10$GCxSxdyGozl5CY6dRUe6R.bEWtrn477ENgYEj/gYlCdc6/KfJxrRa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user12@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB [DEBUG] Cursor#close 8735538433374572888
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.9ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.5ms)
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4b01d44b611c0000046')}).limit(-1)
Completed 200 OK in 15ms (Views: 13.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c0000047'), "name"=>"user14", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$sbY3Cekx27yePsCGCgU7C.", "password_hash"=>"$2a$10$sbY3Cekx27yePsCGCgU7C.996y/Vbmt1ol3A/OzEsC1e0OyG8Ihs."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user13@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user13@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c0000048'), "name"=>"user15", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$2kcfc.EE.wFTraagB42hae", "password_hash"=>"$2a$10$2kcfc.EE.wFTraagB42haeyg1kYYF4mlTaVqZ21XUMcQdFqGa/KtG"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c0000049'), "name"=>"user16", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$PVBlwez.SVkf/I3FNcqnOu", "password_hash"=>"$2a$10$PVBlwez.SVkf/I3FNcqnOuiNOBf4vjYfiJh5qrym2Emp3Efpe6U/u"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c000004a'), "name"=>"user17", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$qgLZx7lqVtMdRiKkwXht3u", "password_hash"=>"$2a$10$qgLZx7lqVtMdRiKkwXht3uvGpaqQemH46EWfIuC4q1VASMrNuOIuy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user16@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:52 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:52 UTC}})
MONGODB [DEBUG] Cursor#close 1481624865576342275
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (41.1ms)
  Rendered articles/_article.html.erb (0.4ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4b01d44b611c000004a')}).limit(-1)
Completed 200 OK in 52ms (Views: 50.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b01d44b611c000004b'), "name"=>"user18", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$NUenRXaCj8FD1fe0xkYSj.", "password_hash"=>"$2a$10$NUenRXaCj8FD1fe0xkYSj.b5yvLUnC5BQzqUyxwYTvkvRI5oxJODe"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB [DEBUG] Cursor#close 7173719575283913607
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac4b11d44b611c000004d'), "name"=>"user19", "email"=>"user18@example.com", "role"=>"reader", "password_salt"=>"$2a$10$No3Mav96BCKgyWIRcm3SGe", "password_hash"=>"$2a$10$No3Mav96BCKgyWIRcm3SGeSxSQ9v1MSTwARzhl3DedbCG3LGHMJQe"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB [DEBUG] Cursor#close 7803495135317087280
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac4b11d44b611c000004d')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB [DEBUG] Cursor#close 2255527467795108927
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 65ms (Views: 63.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
  Rendered areas/_form.html.erb (3.2ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac4b11d44b611c0000052'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 6ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c0000052')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 4ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aac4b11d44b611c000005a')}])
Redirected to http://www.example.com/areas/50aac4b11d44b611c000005a
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aac4b11d44b611c000005a" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac4b11d44b611c000005a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac4b11d44b611c000005a')}).limit(-1)
Completed 200 OK in 5ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c000005a')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac4b11d44b611c000005b'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac4b11d44b611c000005b" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac4b11d44b611c000005b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac4b11d44b611c000005b')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c000005b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac4b11d44b611c000005c'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 41.4ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac4b11d44b611c000005c/edit" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aac4b11d44b611c000005c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac4b11d44b611c000005c')}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 7ms (Views: 4.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c000005c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac4b11d44b611c000005d'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.6ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aac4b11d44b611c000005d" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aac4b11d44b611c000005d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac4b11d44b611c000005d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c000005d')})
Redirected to http://www.example.com/areas
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:45:53 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:44:53 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5411d44b611c8000001'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$LrLubi0kHH2.z3Ej6PSQGu", "password_hash"=>"$2a$10$LrLubi0kHH2.z3Ej6PSQGuBL4c8ZtV96zW7/jsEUFX8dKP3E6Ayb."}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:17 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:17 UTC}})
  Rendered sessions/new.html.erb within layouts/application (38.7ms)
Completed 200 OK in 102ms (Views: 88.6ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB [DEBUG] Cursor#close 7819715637656324800
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (26.5ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5411d44b611c8000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (260.5ms)
Completed 200 OK in 277ms (Views: 275.4ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB [DEBUG] Cursor#close 2559227852290689998
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5411d44b611c8000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (6.7ms)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB [DEBUG] Cursor#close 6177512742884379623
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c0000042')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4af1d44b611c0000043')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c0000045')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c0000046')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c0000047')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c0000048')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c0000049')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c000004a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b01d44b611c000004b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac4b11d44b611c000004d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5411d44b611c8000001')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5421d44b611c8000004'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$h2w3yoZ3xm104g8MV1EttO", "password_hash"=>"$2a$10$h2w3yoZ3xm104g8MV1EttOCUsQJEXBNYeChTh/UG0mPnE./OKtOuG"}])


Started GET "/users/50aac5421d44b611c8000004?method=delete" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aac5421d44b611c8000004"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5421d44b611c8000004')}).limit(-1)
Completed 200 OK in 31ms (Views: 28.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5421d44b611c8000004')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5421d44b611c8000006'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$w1BkjhNbR7HJFNd8uGupx.", "password_hash"=>"$2a$10$w1BkjhNbR7HJFNd8uGupx.tjOuBzcdsi.pIB1RX/B8BaNPpP3J/qm"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 22ms (Views: 20.6ms | ActiveRecord: 0.0ms)


Started GET "/users/50aac5421d44b611c8000006" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac5421d44b611c8000006"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5421d44b611c8000006')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5421d44b611c8000006')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 22ms (Views: 20.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user4", "email"=>"user4@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:18 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:18 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 46ms (Views: 43.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5421d44b611c800000f'), "name"=>"user5", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$IHUDHp772xE1hIRu08TZZu", "password_hash"=>"$2a$10$IHUDHp772xE1hIRu08TZZu6AbGD2PhupfkpU1oVhpExA.y/ivc3QO"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user5", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5421d44b611c800000f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000013'), "name"=>"user6", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$RxraARSf0nFFCorSwiKahu", "password_hash"=>"$2a$10$RxraARSf0nFFCorSwiKahu6DKIgMbr4r1kOdwbG2G/p2mdYqvp1yu"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.7ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aac5431d44b611c8000013" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000013"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000013')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000013')})
Redirected to http://www.example.com/users
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 44ms (Views: 42.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user7", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 4.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user8", "email"=>"user7@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user8", "email"=>"user7@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aac5431d44b611c800001b'), "password_salt"=>"$2a$10$oC8B6rFFdTgAy57a6EzkjO", "password_hash"=>"$2a$10$oC8B6rFFdTgAy57a6EzkjOyUikC7RIneoYGAk3MRk1X6d4BSpuSl."}])
Redirected to http://www.example.com/users/50aac5431d44b611c800001b
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/users/50aac5431d44b611c800001b" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac5431d44b611c800001b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5431d44b611c800001b')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5431d44b611c800001b')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c800001b')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user9", "email"=>"user8@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 9ms (Views: 5.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000021'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 20ms (Views: 19.1ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aac5431d44b611c8000021" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000021"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000021')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000021')})
Redirected to http://www.example.com/areas
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000022'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac5431d44b611c8000022/edit" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000022"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000022')}).limit(-1)
  Rendered areas/_form.html.erb (2.4ms)
Completed 200 OK in 20ms (Views: 18.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000022')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000023'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac5431d44b611c8000023" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000023"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000023')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000023')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
  Rendered areas/_form.html.erb (39.5ms)
Completed 200 OK in 44ms (Views: 42.4ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aac5431d44b611c8000026')}])
Redirected to http://www.example.com/areas/50aac5431d44b611c8000026
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aac5431d44b611c8000026" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000026"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000026')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000026')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000027'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000027')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000030'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (2.8ms)
Completed 200 OK in 42ms (Views: 40.5ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aac5431d44b611c8000030" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000030"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000030')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000030')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 42ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000031'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5431d44b611c8000031/edit" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000031"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000031')}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000031')})
  Rendered news_agencies/_form.html.erb (7.0ms)
Completed 200 OK in 40ms (Views: 38.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000031')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000032'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5431d44b611c8000032" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac5431d44b611c8000032"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5431d44b611c8000032')}).limit(-1)
Completed 200 OK in 21ms (Views: 18.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000032')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000034')})
  Rendered news_agencies/_form.html.erb (5.2ms)
Completed 200 OK in 29ms (Views: 27.5ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000035')})
  Rendered news_agencies/_form.html.erb (6.3ms)
Completed 200 OK in 11ms (Views: 8.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000037')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 47ms (Views: 46.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5431d44b611c8000038'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000039')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c800003a')})
  Rendered news_agencies/_form.html.erb (5.1ms)
Completed 200 OK in 9ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c8000038')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c800003c')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 8ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aac5431d44b611c800003d')}])
Redirected to http://www.example.com/news_agencies/50aac5431d44b611c800003d
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5431d44b611c800003d" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac5431d44b611c800003d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5431d44b611c800003d')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5431d44b611c800003d')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c800003f')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 8ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5431d44b611c8000040')})
  Rendered news_agencies/_form.html.erb (5.3ms)
Completed 200 OK in 9ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:48:19 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:47:19 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000042'), "name"=>"user10", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$fr3Ws5rv0e.dWerpztjqr.", "password_hash"=>"$2a$10$fr3Ws5rv0e.dWerpztjqr.LgoxVNzYPs6wFuXz4G0pF4Dr4PWpHQa"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Completed 200 OK in 3ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 6129909743442104937
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5441d44b611c8000042')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 9085409299690328698
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 12ms (Views: 8.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000044'), "name"=>"user11", "email"=>"user10@example.com", "role"=>"reader", "password_salt"=>"$2a$10$haM4EYI1cs5GLOjhJtKf1O", "password_hash"=>"$2a$10$haM4EYI1cs5GLOjhJtKf1Oso/bVUyJKv2FpoxFbTFSK1Pjd09BIcW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 2655420722990715683
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5441d44b611c8000044')}).limit(-1)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000045'), "name"=>"user12", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$dmvnFPpOZ0akEgmh.w20U.", "password_hash"=>"$2a$10$dmvnFPpOZ0akEgmh.w20U.Fl8.doakY/9qt1c8RZy94tYZBX4yo1a"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 7885148674136904572
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 8.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000047'), "name"=>"user13", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$heVpOJC88R4CCZbJojfSfu", "password_hash"=>"$2a$10$heVpOJC88R4CCZbJojfSfunlEYppqdwsXSikSXIxTqJiGxYq2qSDW"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000048'), "name"=>"user14", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$dHzYoyOj7DjmrlmG9ZAAwu", "password_hash"=>"$2a$10$dHzYoyOj7DjmrlmG9ZAAwuD.jQeTglSfr1HMK0I4gfP.d4dg5mi9W"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user13@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user13@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 7183285910561264794
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5441d44b611c8000048')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c8000049'), "name"=>"user15", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$5jzhihhvgPbtKJWb01Zcge", "password_hash"=>"$2a$10$5jzhihhvgPbtKJWb01ZcgeGr8d0xY7h/2W7G/sXMv5YETU1UyNkrC"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user14@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user14@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:20 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:20 UTC}})
MONGODB [DEBUG] Cursor#close 3205001435357025603
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5441d44b611c8000049')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5441d44b611c800004a'), "name"=>"user16", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$siolPFx733TbwhTDtl7qLO", "password_hash"=>"$2a$10$siolPFx733TbwhTDtl7qLOqSbE6gF9Pm0Z92UYEyKxNFcEycqlEbi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#new as HTML
MONGODB (50ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
Completed 200 OK in 54ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c800004b'), "name"=>"user17", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$wst2Z6Tcw9kjiv7/Z9Gkb.", "password_hash"=>"$2a$10$wst2Z6Tcw9kjiv7/Z9Gkb.1CPmo1lbamx7w.FjbPsmrzoQNsv5NGy"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user16@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user16@example.com"}).limit(-1)
Completed 200 OK in 75ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c800004c'), "name"=>"user18", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$sI35GWN7hKiElqLLQjvtM.", "password_hash"=>"$2a$10$sI35GWN7hKiElqLLQjvtM..jIgOOA2qN/2waPaR0sK7udWKpmsT42"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user17@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user17@example.com\"]"}).limit(-1)
Completed 200 OK in 4ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c800004d'), "name"=>"user19", "email"=>"user18@example.com", "role"=>"reader", "password_salt"=>"$2a$10$EkDCdFjxTrUBdZlEhmOgyu", "password_hash"=>"$2a$10$EkDCdFjxTrUBdZlEhmOgyuwttHjyk5GkAs69mDu/oKywiA1VJfB2K"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (35ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB [DEBUG] Cursor#close 8497363362732218203
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.7ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 47ms (Views: 10.2ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (1.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c800004f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c800004f')})
Completed 200 OK in 52ms (Views: 50.1ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (38.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c8000050')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c8000050')})
Completed 200 OK in 53ms (Views: 50.9ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.5ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c8000051')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5451d44b611c8000051')})
Completed 200 OK in 13ms (Views: 11.7ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aac5451d44b611c8000052'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c8000052')}, {"$set"=>{"guid"=>"50aac5451d44b611c8000052"}})
Redirected to http://www.example.com/articles/50aac5451d44b611c8000052
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5451d44b611c8000052" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5451d44b611c8000052"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5451d44b611c8000052')}).limit(-1)
Completed 200 OK in 20ms (Views: 17.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aac5451d44b611c8000054'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c8000054')}, {"$set"=>{"guid"=>"50aac5451d44b611c8000054"}})
Redirected to http://www.example.com/articles/50aac5451d44b611c8000054
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5451d44b611c8000054" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5451d44b611c8000054"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5451d44b611c8000054')}).limit(-1)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c8000056'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c8000056')}, {"$set"=>{"guid"=>"50aac5451d44b611c8000056"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB [DEBUG] Cursor#close 6672171548068190295
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB [DEBUG] Cursor#close 7281039482182342754
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c8000059'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c8000059')}, {"$set"=>{"guid"=>"50aac5451d44b611c8000059"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB [DEBUG] Cursor#close 3381719926335248496
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c800005b'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c800005b')}, {"$set"=>{"guid"=>"50aac5451d44b611c800005b"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 2ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aac5451d44b611c800005c", "headline"=>"Article 3", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5451d44b611c800005c'), "headline"=>"Article 3", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5451d44b611c800005c')}, {"$set"=>{"guid"=>"50aac5451d44b611c800005c"}})
Redirected to http://www.example.com/articles/50aac5451d44b611c800005c
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5451d44b611c800005c" for 127.0.0.1 at 2012-11-19 20:48:21 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5451d44b611c800005c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:47:21 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5451d44b611c800005c')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5911d44b611ca000001'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$hfm3sqWJv6iiXHCk7Lu9c.", "password_hash"=>"$2a$10$hfm3sqWJv6iiXHCk7Lu9c.ArWEVqaFJUcRke8VPMg9B0bB7tBmGH2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:38 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:38 UTC}})
  Rendered sessions/new.html.erb within layouts/application (83.5ms)
Completed 200 OK in 246ms (Views: 233.5ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB [DEBUG] Cursor#close 4863369826821982054
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (26.3ms)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5911d44b611ca000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (271.7ms)
Completed 200 OK in 298ms (Views: 296.4ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB [DEBUG] Cursor#close 8688588634033735891
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.9ms)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5911d44b611ca000001')}).limit(-1)
  Rendered articles/index.html.erb within layouts/application (8.4ms)
Completed 200 OK in 12ms (Views: 10.2ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB [DEBUG] Cursor#close 3807946618160007488
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000042')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000044')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000045')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000047')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000048')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c8000049')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5441d44b611c800004a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5451d44b611c800004b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5451d44b611c800004c')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5451d44b611c800004d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5911d44b611ca000001')})


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 51ms (Views: 49.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 69ms (Views: 66.9ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:39 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user2", "email"=>"user2@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:39 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 218ms (Views: 215.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 42ms (Views: 40.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user3", "email"=>"user3@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 9ms (Views: 6.2ms | ActiveRecord: 0.0ms)
MONGODB (37ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5941d44b611ca00000d'), "name"=>"user4", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$.kTgtX0lwXzT8chyy0r1gu", "password_hash"=>"$2a$10$.kTgtX0lwXzT8chyy0r1gukiLOXj8gkyFC3dH7LYVxiR1kdVzytCy"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.3ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user4", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5941d44b611ca00000d')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#new as HTML
MONGODB (58ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 67ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user5", "email"=>"user4@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user5", "email"=>"user4@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aac5941d44b611ca000013'), "password_salt"=>"$2a$10$uJyJqo0w69ZJ0tynyHx83e", "password_hash"=>"$2a$10$uJyJqo0w69ZJ0tynyHx83eZ7evmfkwAATcfetGuyjBvyjJR2ybHX6"}])
Redirected to http://www.example.com/users/50aac5941d44b611ca000013
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/users/50aac5941d44b611ca000013" for 127.0.0.1 at 2012-11-19 20:49:40 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac5941d44b611ca000013"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:48:40 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5941d44b611ca000013')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5941d44b611ca000013')}).limit(-1)
Completed 200 OK in 36ms (Views: 33.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5941d44b611ca000013')})
MONGODB (157ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5941d44b611ca000015'), "name"=>"user6", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$ZyP/2kDyUhYd7N.TivW6Wu", "password_hash"=>"$2a$10$ZyP/2kDyUhYd7N.TivW6WucmhORyZUHRxY4QwBUMhzwzmqgspbnHq"}])


Started GET "/users/50aac5941d44b611ca000015?method=delete" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aac5941d44b611ca000015"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5941d44b611ca000015')}).limit(-1)
Completed 200 OK in 41ms (Views: 39.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5941d44b611ca000015')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5951d44b611ca000017'), "name"=>"user7", "email"=>"user6@example.com", "role"=>"reader", "password_salt"=>"$2a$10$Dk..VzVm4vWP7rsQuEU8Q.", "password_hash"=>"$2a$10$Dk..VzVm4vWP7rsQuEU8Q.BsNy4z0sGwz2sXLSOLgzMkgmU6Xz4Q6"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#index as HTML
MONGODB (64ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 68ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started GET "/users/50aac5951d44b611ca000017" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac5951d44b611ca000017"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5951d44b611ca000017')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5951d44b611ca000017')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5951d44b611ca000019'), "name"=>"user8", "email"=>"user7@example.com", "role"=>"reader", "password_salt"=>"$2a$10$SztALRFCVZ4a/FEfUWCb2O", "password_hash"=>"$2a$10$SztALRFCVZ4a/FEfUWCb2OO501eNiTIDopWrqnSpiUuKkoG76j5Qq"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 12ms (Views: 10.7ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aac5951d44b611ca000019" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aac5951d44b611ca000019"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5951d44b611ca000019')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5951d44b611ca000019')})
Redirected to http://www.example.com/users
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 93ms (Views: 92.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#new as HTML
MONGODB (154ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 163ms (Views: 7.8ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:41 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user9", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:41 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 153ms (Views: 150.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 10ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5961d44b611ca000021'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca000021')}, {"$set"=>{"guid"=>"50aac5961d44b611ca000021"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published"})
Completed 500 Internal Server Error in 2ms
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aac5961d44b611ca000022", "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5961d44b611ca000022'), "headline"=>"Article 2", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca000022')}, {"$set"=>{"guid"=>"50aac5961d44b611ca000022"}})
Redirected to http://www.example.com/articles/50aac5961d44b611ca000022
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5961d44b611ca000022" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5961d44b611ca000022"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5961d44b611ca000022')}).limit(-1)
Completed 200 OK in 114ms (Views: 111.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5961d44b611ca000024'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca000024')}, {"$set"=>{"guid"=>"50aac5961d44b611ca000024"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (102ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB [DEBUG] Cursor#close 3490450188824466357
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 112ms (Views: 8.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac5961d44b611ca000026'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca000026')}, {"$set"=>{"guid"=>"50aac5961d44b611ca000026"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB [DEBUG] Cursor#close 1716991173636379587
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB [DEBUG] Cursor#close 4094972603877544938
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.5ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (1.1ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca000029')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca000029')})
Completed 200 OK in 117ms (Views: 115.0ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aac5961d44b611ca00002a'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca00002a')}, {"$set"=>{"guid"=>"50aac5961d44b611ca00002a"}})
Redirected to http://www.example.com/articles/50aac5961d44b611ca00002a
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5961d44b611ca00002a" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5961d44b611ca00002a"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5961d44b611ca00002a')}).limit(-1)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aac5961d44b611ca00002c'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac5961d44b611ca00002c')}, {"$set"=>{"guid"=>"50aac5961d44b611ca00002c"}})
Redirected to http://www.example.com/articles/50aac5961d44b611ca00002c
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac5961d44b611ca00002c" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac5961d44b611ca00002c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac5961d44b611ca00002c')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca00002e')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca00002e')})
Completed 200 OK in 15ms (Views: 13.3ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca00002f')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac5961d44b611ca00002f')})
Completed 200 OK in 15ms (Views: 13.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca000031')})
  Rendered news_agencies/_form.html.erb (10.5ms)
Completed 200 OK in 47ms (Views: 45.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aac5961d44b611ca000032')}])
Redirected to http://www.example.com/news_agencies/50aac5961d44b611ca000032
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5961d44b611ca000032" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac5961d44b611ca000032"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5961d44b611ca000032')}).limit(-1)
Completed 200 OK in 20ms (Views: 17.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5961d44b611ca000032')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca000034')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 8ms (Views: 6.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca000035')})
  Rendered news_agencies/_form.html.erb (5.3ms)
Completed 200 OK in 10ms (Views: 7.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5961d44b611ca000036'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca000037')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 8ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca000038')})
  Rendered news_agencies/_form.html.erb (5.0ms)
Completed 200 OK in 9ms (Views: 6.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5961d44b611ca000036')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca00003a')})
  Rendered news_agencies/_form.html.erb (5.0ms)
Completed 200 OK in 8ms (Views: 7.0ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca00003b')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 10ms (Views: 7.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 15ms (Views: 13.3ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5961d44b611ca00003d')})
  Rendered news_agencies/_form.html.erb (4.9ms)
Completed 200 OK in 8ms (Views: 6.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:42 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:42 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca00003f'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.7ms)
Completed 200 OK in 12ms (Views: 11.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5971d44b611ca00003f/edit" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aac5971d44b611ca00003f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca00003f')}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac5971d44b611ca00003f')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 25ms (Views: 23.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca00003f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000040'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac5971d44b611ca000040" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac5971d44b611ca000040"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000040')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000040')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000041'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aac5971d44b611ca000041" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aac5971d44b611ca000041"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000041')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000041')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000042'), "name"=>"user10", "email"=>"user9@example.com", "role"=>"reader", "password_salt"=>"$2a$10$INEsfKFKVkdkesjNI/.a.e", "password_hash"=>"$2a$10$INEsfKFKVkdkesjNI/.a.e.MiqabJ/2RolyRkKZXrWejwQ.Tr9Dwi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB [DEBUG] Cursor#close 4024175002920408806
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000042')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000043'), "name"=>"user11", "email"=>"user10@example.com", "role"=>"reader", "password_salt"=>"$2a$10$VzNdnIULTI8nycfGLRMegO", "password_hash"=>"$2a$10$VzNdnIULTI8nycfGLRMegOZX0QS/Mvm4iYZxGdMzMIHt67oExtEVW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user10@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user10@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB [DEBUG] Cursor#close 6680208338117187512
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000043')}).limit(-1)
Completed 200 OK in 10ms (Views: 9.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000044'), "name"=>"user12", "email"=>"user11@example.com", "role"=>"reader", "password_salt"=>"$2a$10$edGqv7wbSFZFJin7sXJlpu", "password_hash"=>"$2a$10$edGqv7wbSFZFJin7sXJlpuRDSp0ZvC0L0CcX08Hm59Ep3V1X0Nf3y"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB [DEBUG] Cursor#close 2072715552095459343
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.1ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000046'), "name"=>"user13", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$lO0MxSBcFiB0oRzNDN30qO", "password_hash"=>"$2a$10$lO0MxSBcFiB0oRzNDN30qOLvX76iwVx0CTqsYEJcvEpZxnHL4q1JW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user12@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user12@example.com"}).limit(-1)
Completed 200 OK in 76ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000047'), "name"=>"user14", "email"=>"user13@example.com", "role"=>"reader", "password_salt"=>"$2a$10$tzBCaon82mcq0aZqG13Ju.", "password_hash"=>"$2a$10$tzBCaon82mcq0aZqG13Ju.GV3rMaUIOunvcB88REraESvCsTHTsBO"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user13@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user13@example.com\"]"}).limit(-1)
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000048'), "name"=>"user15", "email"=>"user14@example.com", "role"=>"reader", "password_salt"=>"$2a$10$LbAuo1xmjzN.rBKoq5CMre", "password_hash"=>"$2a$10$LbAuo1xmjzN.rBKoq5CMreSAJaXFAYqUkKVv1lbkdf0NfaJLDF3OS"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5971d44b611ca000049'), "name"=>"user16", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$4rd9UoHGZxdnWF4wNy9x0u", "password_hash"=>"$2a$10$4rd9UoHGZxdnWF4wNy9x0ukvO0hHuXBCzfnpcyUbPfnWtXjJxw3WW"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:43 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:43 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user15@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user15@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 75ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB [DEBUG] Cursor#close 8156745883196840494
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000049')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00004a'), "name"=>"user17", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$1HbCbl/eEpWi.F80m.Sqmu", "password_hash"=>"$2a$10$1HbCbl/eEpWi.F80m.SqmuX2AHrvEpoLjMcWGtrNwhRDa33aw73Qu"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00004b'), "name"=>"user18", "email"=>"user17@example.com", "role"=>"reader", "password_salt"=>"$2a$10$HbX0lpkmltoHPbSgP9V7xu", "password_hash"=>"$2a$10$HbX0lpkmltoHPbSgP9V7xu7s4lRB4dUxV7HSF0op9PHJ2ZB60j2JW"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#destroy as HTML
MONGODB (32ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 34ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB [DEBUG] Cursor#close 6950924142578490106
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 7.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user18@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00004d'), "name"=>"user19", "email"=>"user18@example.com", "role"=>"reader", "password_salt"=>"$2a$10$s5DLGUK29jIBIKNCgQ87Lu", "password_hash"=>"$2a$10$s5DLGUK29jIBIKNCgQ87LudigGRA77plmEM1VDE.0YvQZZEUb6hji"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user18@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user18@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB [DEBUG] Cursor#close 8243587295833480098
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5981d44b611ca00004d')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB [DEBUG] Cursor#close 2772728052349918129
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00004f'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
  Rendered areas/_form.html.erb (2.7ms)
Completed 200 OK in 63ms (Views: 61.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 6ms (Views: 3.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00004f')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 5ms (Views: 3.4ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 4ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 6ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
  Rendered areas/_form.html.erb (1.5ms)
Completed 200 OK in 5ms (Views: 3.3ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aac5981d44b611ca000059')}])
Redirected to http://www.example.com/areas/50aac5981d44b611ca000059
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aac5981d44b611ca000059" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac5981d44b611ca000059"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5981d44b611ca000059')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca000059')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00005b'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac5981d44b611ca00005b/edit" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aac5981d44b611ca00005b"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5981d44b611ca00005b')}).limit(-1)
  Rendered areas/_form.html.erb (44.3ms)
Completed 200 OK in 50ms (Views: 47.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00005b')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00005c'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac5981d44b611ca00005c" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac5981d44b611ca00005c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5981d44b611ca00005c')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00005c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac5981d44b611ca00005d'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aac5981d44b611ca00005d" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aac5981d44b611ca00005d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac5981d44b611ca00005d')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00005d')})
Redirected to http://www.example.com/areas
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:49:44 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:48:44 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)
Connecting to database specified by database.yml
MONGODB [DEBUG] Logging level is currently :debug which could negatively impact client-side performance. You should set your logging level no lower than :info in production.
MONGODB (0ms) admin['$cmd'].find({:ismaster=>1}).limit(-1)
New Relic Agent not running.
MONGODB (1ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:55:08 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"headline"=>"holo", "story"=>"story"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:54:08 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"holo", "story"=>"story", "_id"=>BSON::ObjectId('50aac6dd1d44b611d5000001'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6dd1d44b611d5000001')}, {"$set"=>{"guid"=>"50aac6dd1d44b611d5000001"}})
Redirected to http://www.example.com/articles/50aac6dd1d44b611d5000001
Completed 302 Found in 37ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac6dd1d44b611d5000001" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac6dd1d44b611d5000001"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac6dd1d44b611d5000001')}).limit(-1)
  Rendered articles/show.html.erb within layouts/application (38.5ms)
Completed 200 OK in 129ms (Views: 127.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:headline=>"holo"})


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (1.1ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000003')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000003')})
Completed 200 OK in 179ms (Views: 177.2ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"fire", "deck"=>"", "story"=>"here"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"headline"=>"fire", "deck"=>"", "story"=>"here", "published_on"=>2012-11-19 00:00:00 UTC, "_id"=>BSON::ObjectId('50aac6dd1d44b611d5000004'), "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6dd1d44b611d5000004')}, {"$set"=>{"guid"=>"50aac6dd1d44b611d5000004"}})
Redirected to http://www.example.com/articles/50aac6dd1d44b611d5000004
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac6dd1d44b611d5000004" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac6dd1d44b611d5000004"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac6dd1d44b611d5000004')}).limit(-1)
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started GET "/articles/new" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesnew", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000006')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000006')})
Completed 200 OK in 51ms (Views: 49.7ms | ActiveRecord: 0.0ms)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"utf8"=>"✓", "article"=>{"published_on(1i)"=>"2012", "published_on(2i)"=>"11", "published_on(3i)"=>"19", "headline"=>"", "deck"=>"", "story"=>"ice"}, "commit"=>"Create Article"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered articles/_picture_fields.html.erb (0.6ms)
MONGODB (0ms) rails3_mongoid_devise_test['article_categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000007')})
MONGODB (0ms) rails3_mongoid_devise_test['categories'].find({"article_id"=>BSON::ObjectId('50aac6dd1d44b611d5000007')})
Completed 200 OK in 15ms (Views: 12.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started POST "/articles" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#create as HTML
  Parameters: {"article"=>{"_id"=>"50aac6dd1d44b611d5000008", "headline"=>"Article 1", "story"=>"it is an article", "is_published"=>"false"}}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlescreate", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac6dd1d44b611d5000008'), "headline"=>"Article 1", "story"=>"it is an article", "is_published"=>false, "grade"=>0.0, "editors_grade"=>0, "chief_editor_grade"=>0, "chief_editor_country_grade"=>0}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6dd1d44b611d5000008')}, {"$set"=>{"guid"=>"50aac6dd1d44b611d5000008"}})
Redirected to http://www.example.com/articles/50aac6dd1d44b611d5000008
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/articles/50aac6dd1d44b611d5000008" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#show as HTML
  Parameters: {"id"=>"50aac6dd1d44b611d5000008"}
MONGODB (19ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:_id=>BSON::ObjectId('50aac6dd1d44b611d5000008')}).limit(-1)
Completed 200 OK in 23ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>false}, "fields"=>nil}).limit(-1)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:09 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:09 UTC}})
MONGODB [DEBUG] Cursor#close 8299685616033518358
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (1.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 64ms (Views: 62.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500000b'), "headline"=>"my headline is not displayed in published areas", "story"=>"it is an article", "is_published"=>false}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6de1d44b611d500000b')}, {"$set"=>{"guid"=>"50aac6de1d44b611d500000b"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB [DEBUG] Cursor#close 801030290424779661
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500000d'), "headline"=>"i get published at once, 1", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6de1d44b611d500000d')}, {"$set"=>{"guid"=>"50aac6de1d44b611d500000d"}})


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB [DEBUG] Cursor#close 450031617236849563
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 8.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500000f'), "headline"=>"basdf", "story"=>"it is an article", "is_published"=>true}])
MONGODB (0ms) rails3_mongoid_devise_test['articles'].update({"_id"=>BSON::ObjectId('50aac6de1d44b611d500000f')}, {"$set"=>{"guid"=>"50aac6de1d44b611d500000f"}})


Started GET "/articles/non_published" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#show_non_published as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesshow_non_published", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>false, :editors_grade=>0, :user_id=>{"$ne"=>nil}})
Completed 200 OK in 16ms (Views: 14.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 10ms (Views: 9.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
  Rendered areas/_form.html.erb (2.6ms)
Completed 200 OK in 17ms (Views: 15.6ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"name"=>"Area Nueva", "_id"=>BSON::ObjectId('50aac6de1d44b611d5000013')}])
Redirected to http://www.example.com/areas/50aac6de1d44b611d5000013
Completed 302 Found in 4ms (ActiveRecord: 0.0ms)


Started GET "/areas/50aac6de1d44b611d5000013" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac6de1d44b611d5000013"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d5000013')}).limit(-1)
Completed 200 OK in 5ms (Views: 2.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000013')})


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
  Rendered areas/_form.html.erb (1.4ms)
Completed 200 OK in 4ms (Views: 3.2ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>""}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>""}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.6ms)
Completed 200 OK in 5ms (Views: 3.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d5000017'), "name"=>"Area Nueva"}])


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
  Rendered areas/_form.html.erb (41.0ms)
Completed 200 OK in 44ms (Views: 42.9ms | ActiveRecord: 0.0ms)


Started POST "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#create as HTML
  Parameters: {"utf8"=>"✓", "area"=>{"name"=>"Area Nueva"}, "commit"=>"Create Area"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areascreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
  Rendered areas/_form.html.erb (1.7ms)
Completed 200 OK in 6ms (Views: 3.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000017')})


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
  Rendered areas/_form.html.erb (1.3ms)
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500001c'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac6de1d44b611d500001c" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#show as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500001c"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasshow", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500001c')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500001c')})
MONGODB (2ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500001d'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started GET "/areas/50aac6de1d44b611d500001d/edit" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#edit as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500001d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasedit", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500001d')}).limit(-1)
  Rendered areas/_form.html.erb (1.8ms)
Completed 200 OK in 21ms (Views: 19.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500001d')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"areas", "query"=>{:name=>"Area Nueva"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500001e'), "name"=>"Area Nueva"}])


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 4ms (Views: 2.8ms | ActiveRecord: 0.0ms)


Started DELETE "/areas/50aac6de1d44b611d500001e" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#destroy as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500001e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasdestroy", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500001e')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500001e')})
Redirected to http://www.example.com/areas
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/areas" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by AreasController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"areasindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 15ms (Views: 14.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000021')})
  Rendered news_agencies/_form.html.erb (47.2ms)
Completed 200 OK in 71ms (Views: 69.6ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000022')})
  Rendered news_agencies/_form.html.erb (5.6ms)
Completed 200 OK in 11ms (Views: 7.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000024')})
  Rendered news_agencies/_form.html.erb (4.7ms)
Completed 200 OK in 7ms (Views: 6.5ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000026')})
  Rendered news_agencies/_form.html.erb (5.0ms)
Completed 200 OK in 8ms (Views: 6.9ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000027')})
  Rendered news_agencies/_form.html.erb (5.2ms)
Completed 200 OK in 9ms (Views: 7.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d5000028'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d5000029')})
  Rendered news_agencies/_form.html.erb (4.6ms)
Completed 200 OK in 7ms (Views: 6.4ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"http://urltest.com", "feed_url"=>""}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d500002a')})
  Rendered news_agencies/_form.html.erb (5.2ms)
Completed 200 OK in 48ms (Views: 46.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000028')})


Started GET "/news_agencies/new" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d500002c')})
  Rendered news_agencies/_form.html.erb (4.8ms)
Completed 200 OK in 8ms (Views: 6.7ms | ActiveRecord: 0.0ms)


Started POST "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#create as HTML
  Parameters: {"utf8"=>"✓", "news_agency"=>{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}, "commit"=>"Create News agency"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciescreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com", "_id"=>BSON::ObjectId('50aac6de1d44b611d500002d')}])
Redirected to http://www.example.com/news_agencies/50aac6de1d44b611d500002d
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac6de1d44b611d500002d" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500002d"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500002d')}).limit(-1)
Completed 200 OK in 48ms (Views: 46.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500002d')})
MONGODB (2ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500002e'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (1.5ms)
Completed 200 OK in 25ms (Views: 24.4ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac6de1d44b611d500002e" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#show as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500002e"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesshow", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500002e')}).limit(-1)
Completed 200 OK in 3ms (Views: 1.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500002e')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d500002f'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.8ms)
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started GET "/news_agencies/50aac6de1d44b611d500002f/edit" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#edit as HTML
  Parameters: {"id"=>"50aac6de1d44b611d500002f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesedit", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d500002f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({"news_agency_id"=>BSON::ObjectId('50aac6de1d44b611d500002f')})
  Rendered news_agencies/_form.html.erb (5.1ms)
Completed 200 OK in 10ms (Views: 8.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d500002f')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"news_agencies", "query"=>{:feed_url=>"http://urltest.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d5000030'), "name"=>"Agencia Nueva", "feed_url"=>"http://urltest.com"}])


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
  Rendered news_agencies/_news_agency.html.erb (0.9ms)
Completed 200 OK in 4ms (Views: 3.0ms | ActiveRecord: 0.0ms)


Started DELETE "/news_agencies/50aac6de1d44b611d5000030" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#destroy as HTML
  Parameters: {"id"=>"50aac6de1d44b611d5000030"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesdestroy", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d5000030')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000030')})
Redirected to http://www.example.com/news_agencies
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/news_agencies" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by NewsAgenciesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"news_agenciesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user1@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d5000031'), "name"=>"user1", "email"=>"user1@example.com", "role"=>"reader", "password_salt"=>"$2a$10$zSvXr43a4ePZ6kIi6P1iOe", "password_hash"=>"$2a$10$zSvXr43a4ePZ6kIi6P1iOedBkPrjrSf6gD/yVf6yywhO6GQ.H9vyi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
Completed 200 OK in 46ms (Views: 44.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user1@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user1@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB [DEBUG] Cursor#close 5558866263454308058
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d5000031')}).limit(-1)
Completed 200 OK in 11ms (Views: 9.4ms | ActiveRecord: 0.0ms)


Started GET "/glutton/store" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#fetch_and_store as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesfetch_and_store", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['news_agencies'].find({})
Redirected to http://www.example.com/articles
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB [DEBUG] Cursor#close 1580314014219032301
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d5000031')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.9ms | ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:10 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:10 UTC}})
MONGODB [DEBUG] Cursor#close 7160123645855586042
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user2@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6de1d44b611d5000033'), "name"=>"user2", "email"=>"user2@example.com", "role"=>"reader", "password_salt"=>"$2a$10$7WMQHTGAeZTMnIkpyyYpVO", "password_hash"=>"$2a$10$7WMQHTGAeZTMnIkpyyYpVOAPRXpcIawbelOjzTPZWA1gGs.0xDr4a"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user2@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user2@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB [DEBUG] Cursor#close 4662037466681235363
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6de1d44b611d5000033')}).limit(-1)
Completed 200 OK in 10ms (Views: 8.9ms | ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB [DEBUG] Cursor#close 1027007632471807923
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 10ms (Views: 8.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user3@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d5000035'), "name"=>"user3", "email"=>"user3@example.com", "role"=>"reader", "password_salt"=>"$2a$10$J3G.dy5vM8uzxFOGxFUVne", "password_hash"=>"$2a$10$J3G.dy5vM8uzxFOGxFUVnecpqrCcK7msX9TQW4XXLZnfDciI03/Ra"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB [DEBUG] Cursor#close 8151801362227189813
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.5ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 8.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user4@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d5000037'), "name"=>"user4", "email"=>"user4@example.com", "role"=>"reader", "password_salt"=>"$2a$10$MXCHAvyN1CWsLPeKcUu8bu", "password_hash"=>"$2a$10$MXCHAvyN1CWsLPeKcUu8buH085gtI2hJuvGyjYmEulor.DQUfLdYi"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user4@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user4@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 73ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB [DEBUG] Cursor#close 1267161879878883550
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.8ms)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.4ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6df1d44b611d5000037')}).limit(-1)
Completed 200 OK in 12ms (Views: 10.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user5@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d5000038'), "name"=>"user5", "email"=>"user5@example.com", "role"=>"reader", "password_salt"=>"$2a$10$VxnoFyTWaAcS7QZzkKhLR.", "password_hash"=>"$2a$10$VxnoFyTWaAcS7QZzkKhLR.BGXDANRl5dgq2LM9X1T7aIJulXVJT7O"}])


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/log_out" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#destroy as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsdestroy", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Redirected to http://www.example.com/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user6@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d5000039'), "name"=>"user6", "email"=>"user6@example.com", "role"=>"reader", "password_salt"=>"$2a$10$fYRhOaM.OUoix6T8QM6DQe", "password_hash"=>"$2a$10$fYRhOaM.OUoix6T8QM6DQeBE/nukcC1jnTEK9bs.o8gCBAscdoT0u"}])


Started GET "/" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB [DEBUG] Cursor#close 7779248455793826184
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.4ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
Completed 200 OK in 9ms (Views: 8.0ms | ActiveRecord: 0.0ms)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user7@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d500003b'), "name"=>"user7", "email"=>"user7@example.com", "role"=>"reader", "password_salt"=>"$2a$10$.Z/SY0GExnZMSMvoR8pEV.", "password_hash"=>"$2a$10$.Z/SY0GExnZMSMvoR8pEV.vH1BEM3qreDXMK/fH7BfUauEMGnLw9a"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 3ms (Views: 2.0ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user8@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6df1d44b611d500003c'), "name"=>"user8", "email"=>"user8@example.com", "role"=>"reader", "password_salt"=>"$2a$10$dcRKxrnwid70W7dQ9xMlFe", "password_hash"=>"$2a$10$dcRKxrnwid70W7dQ9xMlFeHWsAkXkO8y2R2EUGeWCsbYLW7oZ2tC2"}])


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 43ms (Views: 41.9ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user8@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user8@example.com"}).limit(-1)
Completed 200 OK in 76ms (Views: 2.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user9@example.com"}, "fields"=>nil}).limit(-1)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:11 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user9@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:11 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user9@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 72ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB [DEBUG] Cursor#close 434111457665800966
MONGODB (1ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000042')}).limit(-1)
Completed 200 OK in 13ms (Views: 11.7ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user10@example.com"}, "fields"=>nil}).limit(-1)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
Completed 200 OK in 4ms (Views: 2.3ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"[\"user10@example.com\"]", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"[\"user10@example.com\"]"}).limit(-1)
Completed 200 OK in 4ms (Views: 2.4ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user11@example.com"}, "fields"=>nil}).limit(-1)


Started GET "/log_in" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by SessionsController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionsnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
Completed 200 OK in 3ms (Views: 2.2ms | ActiveRecord: 0.0ms)


Started POST "/sessions" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by SessionsController#create as HTML
  Parameters: {"utf8"=>"✓", "email"=>"user11@example.com", "password"=>"[FILTERED]", "commit"=>"Log in"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"sessionscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:email=>"user11@example.com"}).limit(-1)
Redirected to http://www.example.com/articles
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/articles" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by ArticlesController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"articlesindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB [DEBUG] Cursor#close 1433719762429991805
MONGODB (0ms) rails3_mongoid_devise_test['articles'].find({:is_published=>true}).limit(5)
  Rendered articles/_article.html.erb (0.6ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.2ms)
  Rendered articles/_article.html.erb (0.3ms)
  Rendered articles/_article.html.erb (0.2ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"articles", "query"=>{:is_published=>true}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac5971d44b611ca000044')}).limit(-1)
Completed 200 OK in 11ms (Views: 9.3ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000042')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000043')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000044')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000046')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000047')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000048')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5971d44b611ca000049')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00004a')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00004b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac5981d44b611ca00004d')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000031')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6de1d44b611d5000033')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d5000035')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d5000037')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d5000038')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d5000039')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d500003b')})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6df1d44b611d500003c')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user12@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6e01d44b611d5000041'), "name"=>"user12", "email"=>"user12@example.com", "role"=>"reader", "password_salt"=>"$2a$10$3/75tQU5vugHAJF0faQIRu", "password_hash"=>"$2a$10$3/75tQU5vugHAJF0faQIRuGvpFgrjZAzIvve3QKEnVyGlEZ4/EYTy"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 19ms (Views: 17.9ms | ActiveRecord: 0.0ms)


Started GET "/users/50aac6e01d44b611d5000041" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac6e01d44b611d5000041"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6e01d44b611d5000041')}).limit(-1)
Completed 200 OK in 19ms (Views: 17.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6e01d44b611d5000041')})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6e01d44b611d5000043'), "name"=>"user13", "email"=>"mi_random@mail.co", "role"=>"admin", "password_salt"=>"$2a$10$cmfopbPW7uktYkCVTTFTTu", "password_hash"=>"$2a$10$cmfopbPW7uktYkCVTTFTTuS5zrs9hCLgJwJqQY1jtu3R7uzpDYNAG"}])


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 30ms (Views: 28.7ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user13", "email"=>"mi_random@mail.co", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"mi_random@mail.co"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6e01d44b611d5000043')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 45ms (Views: 43.4ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user14", "email"=>"user13@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user13@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"name"=>"user14", "email"=>"user13@example.com", "country"=>"Chile", "area_id"=>nil, "_id"=>BSON::ObjectId('50aac6e01d44b611d5000049'), "password_salt"=>"$2a$10$3rvK8Dz2CI.5QXJhynxGpe", "password_hash"=>"$2a$10$3rvK8Dz2CI.5QXJhynxGpeKQjDVGgK.hIRarvzhELs/pi.wB5NT0W"}])
Redirected to http://www.example.com/users/50aac6e01d44b611d5000049
Completed 302 Found in 74ms (ActiveRecord: 0.0ms)


Started GET "/users/50aac6e01d44b611d5000049" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#show as HTML
  Parameters: {"id"=>"50aac6e01d44b611d5000049"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6e01d44b611d5000049')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6e01d44b611d5000049')}).limit(-1)
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6e01d44b611d5000049')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.2ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user15", "email"=>"user14@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user14@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 8ms (Views: 5.2ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user15@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6e01d44b611d500004f'), "name"=>"user16", "email"=>"user15@example.com", "role"=>"reader", "password_salt"=>"$2a$10$dOcNR.7IPG0qBcZF6.bw6e", "password_hash"=>"$2a$10$dOcNR.7IPG0qBcZF6.bw6edq8n/gEWeGdciucumxwMtBu1JW4L2gi"}])


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 4ms (Views: 2.9ms | ActiveRecord: 0.0ms)


Started DELETE "/users/50aac6e01d44b611d500004f" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#destroy as HTML
  Parameters: {"id"=>"50aac6e01d44b611d500004f"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersdestroy", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6e01d44b611d500004f')}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6e01d44b611d500004f')})
Redirected to http://www.example.com/users
Completed 302 Found in 3ms (ActiveRecord: 0.0ms)


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 2.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user16@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].insert([{"_id"=>BSON::ObjectId('50aac6e01d44b611d5000051'), "name"=>"user17", "email"=>"user16@example.com", "role"=>"reader", "password_salt"=>"$2a$10$Xy7mFnYDUv9FC24dG657HO", "password_hash"=>"$2a$10$Xy7mFnYDUv9FC24dG657HO/OmLppZ0TwkvbEXXybswqS1ZKrpjlbe"}])


Started GET "/users/50aac6e01d44b611d5000051?method=delete" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#show as HTML
  Parameters: {"method"=>"delete", "id"=>"50aac6e01d44b611d5000051"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersshow", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({:_id=>BSON::ObjectId('50aac6e01d44b611d5000051')}).limit(-1)
Completed 200 OK in 42ms (Views: 40.6ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
MONGODB (0ms) rails3_mongoid_devise_test['users'].remove({:_id=>BSON::ObjectId('50aac6e01d44b611d5000051')})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 6ms (Views: 5.1ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user18", "email"=>"user17@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>"user17@example.com"}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.6ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user19", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 5.1ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users/new" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#new as HTML
MONGODB (37ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersnew", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 44ms (Views: 5.8ms | ActiveRecord: 0.0ms)


Started POST "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#create as HTML
  Parameters: {"utf8"=>"✓", "user"=>{"name"=>"user_name", "email"=>"", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "country"=>"Chile", "area_id"=>""}, "commit"=>"Create User"}
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"userscreate", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{:email=>""}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['areas'].find({})
Completed 200 OK in 7ms (Views: 4.8ms | ActiveRecord: 0.0ms)
MONGODB (0ms) rails3_mongoid_devise_test['$cmd'].find({"count"=>"users", "query"=>{}, "fields"=>nil}).limit(-1)
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})


Started GET "/users" for 127.0.0.1 at 2012-11-19 20:55:12 -0300
Processing by UsersController#index as HTML
MONGODB (0ms) rails3_mongoid_devise_test['rollouts'].find({:name=>"usersindex", :time=>{"$gte"=>2012-11-19 23:54:12 UTC}})
MONGODB (0ms) rails3_mongoid_devise_test['users'].find({})
Completed 200 OK in 3ms (Views: 1.9ms | ActiveRecord: 0.0ms)
